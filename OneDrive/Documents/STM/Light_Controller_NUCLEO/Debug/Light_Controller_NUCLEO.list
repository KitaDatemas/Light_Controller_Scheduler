
Light_Controller_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004bd4  08004bd4  00005bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c64  08004c64  000060a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004c64  08004c64  000060a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c64  08004c64  000060a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08004c6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200000a4  08004d10  000060a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004d10  000063fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010722  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264d  00000000  00000000  000167ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00018e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb3  00000000  00000000  00019e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a11  00000000  00000000  0001ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a59  00000000  00000000  0003351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d35f  00000000  00000000  00046f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d42d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  000d4318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d89c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bbc 	.word	0x08004bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08004bbc 	.word	0x08004bbc

0800014c <I2C_Send>:
		C /*Cursor*/ = 0,
		B /*Blinking*/ = 0;

I2C_HandleTypeDef * lcd_i2c;

void I2C_Send(I2C_HandleTypeDef *i2c, uint8_t DevAddress, uint8_t pData, uint8_t rs) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4603      	mov	r3, r0
 800015c:	70fb      	strb	r3, [r7, #3]
 800015e:	460b      	mov	r3, r1
 8000160:	70bb      	strb	r3, [r7, #2]
 8000162:	4613      	mov	r3, r2
 8000164:	707b      	strb	r3, [r7, #1]
	uint8_t data[1] = {(pData & 0xF0) | _backlightval | En | rs};
 8000166:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800016a:	f023 030f 	bic.w	r3, r3, #15
 800016e:	b25a      	sxtb	r2, r3
 8000170:	4b37      	ldr	r3, [pc, #220]	@ (8000250 <I2C_Send+0x104>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	b25b      	sxtb	r3, r3
 8000176:	4313      	orrs	r3, r2
 8000178:	b25b      	sxtb	r3, r3
 800017a:	b2da      	uxtb	r2, r3
 800017c:	787b      	ldrb	r3, [r7, #1]
 800017e:	4313      	orrs	r3, r2
 8000180:	b2db      	uxtb	r3, r3
 8000182:	f043 0304 	orr.w	r3, r3, #4
 8000186:	b2db      	uxtb	r3, r3
 8000188:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 800018a:	f107 020c 	add.w	r2, r7, #12
 800018e:	230a      	movs	r3, #10
 8000190:	9300      	str	r3, [sp, #0]
 8000192:	2301      	movs	r3, #1
 8000194:	214e      	movs	r1, #78	@ 0x4e
 8000196:	6878      	ldr	r0, [r7, #4]
 8000198:	f002 ff82 	bl	80030a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800019c:	2001      	movs	r0, #1
 800019e:	f002 fb1b 	bl	80027d8 <HAL_Delay>

	data[0] = (pData & 0xF0) | _backlightval | rs;
 80001a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80001a6:	f023 030f 	bic.w	r3, r3, #15
 80001aa:	b25a      	sxtb	r2, r3
 80001ac:	4b28      	ldr	r3, [pc, #160]	@ (8000250 <I2C_Send+0x104>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	b25b      	sxtb	r3, r3
 80001b2:	4313      	orrs	r3, r2
 80001b4:	b25a      	sxtb	r2, r3
 80001b6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80001ba:	4313      	orrs	r3, r2
 80001bc:	b25b      	sxtb	r3, r3
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 80001c2:	f107 020c 	add.w	r2, r7, #12
 80001c6:	230a      	movs	r3, #10
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	2301      	movs	r3, #1
 80001cc:	214e      	movs	r1, #78	@ 0x4e
 80001ce:	6878      	ldr	r0, [r7, #4]
 80001d0:	f002 ff66 	bl	80030a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f002 faff 	bl	80027d8 <HAL_Delay>

	data[0] = (pData << 4) | _backlightval | rs | En;
 80001da:	78bb      	ldrb	r3, [r7, #2]
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	b25a      	sxtb	r2, r3
 80001e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000250 <I2C_Send+0x104>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	b25b      	sxtb	r3, r3
 80001e6:	4313      	orrs	r3, r2
 80001e8:	b25a      	sxtb	r2, r3
 80001ea:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80001ee:	4313      	orrs	r3, r2
 80001f0:	b25b      	sxtb	r3, r3
 80001f2:	f043 0304 	orr.w	r3, r3, #4
 80001f6:	b25b      	sxtb	r3, r3
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 80001fc:	f107 020c 	add.w	r2, r7, #12
 8000200:	230a      	movs	r3, #10
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2301      	movs	r3, #1
 8000206:	214e      	movs	r1, #78	@ 0x4e
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f002 ff49 	bl	80030a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f002 fae2 	bl	80027d8 <HAL_Delay>

	data[0] = (pData << 4) | _backlightval | rs;
 8000214:	78bb      	ldrb	r3, [r7, #2]
 8000216:	011b      	lsls	r3, r3, #4
 8000218:	b25a      	sxtb	r2, r3
 800021a:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <I2C_Send+0x104>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	b25b      	sxtb	r3, r3
 8000220:	4313      	orrs	r3, r2
 8000222:	b25a      	sxtb	r2, r3
 8000224:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000228:	4313      	orrs	r3, r2
 800022a:	b25b      	sxtb	r3, r3
 800022c:	b2db      	uxtb	r3, r3
 800022e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 8000230:	f107 020c 	add.w	r2, r7, #12
 8000234:	230a      	movs	r3, #10
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	214e      	movs	r1, #78	@ 0x4e
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f002 ff2f 	bl	80030a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000242:	2001      	movs	r0, #1
 8000244:	f002 fac8 	bl	80027d8 <HAL_Delay>
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000000 	.word	0x20000000

08000254 <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef * i2c){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	lcd_i2c = i2c;
 800025c:	4a19      	ldr	r2, [pc, #100]	@ (80002c4 <LCD_Init+0x70>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6013      	str	r3, [r2, #0]

//	Set up for 8 bits interface
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 8000262:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <LCD_Init+0x70>)
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	2300      	movs	r3, #0
 8000268:	2230      	movs	r2, #48	@ 0x30
 800026a:	214e      	movs	r1, #78	@ 0x4e
 800026c:	f7ff ff6e 	bl	800014c <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <LCD_Init+0x70>)
 8000272:	6818      	ldr	r0, [r3, #0]
 8000274:	2300      	movs	r3, #0
 8000276:	2230      	movs	r2, #48	@ 0x30
 8000278:	214e      	movs	r1, #78	@ 0x4e
 800027a:	f7ff ff67 	bl	800014c <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 800027e:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <LCD_Init+0x70>)
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	2230      	movs	r2, #48	@ 0x30
 8000286:	214e      	movs	r1, #78	@ 0x4e
 8000288:	f7ff ff60 	bl	800014c <I2C_Send>

//	Change into 4 bits interface - 2 display lines - font 5x8 dots
	I2C_Send(lcd_i2c, (0x27 << 1), 0x8, 0);
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <LCD_Init+0x70>)
 800028e:	6818      	ldr	r0, [r3, #0]
 8000290:	2300      	movs	r3, #0
 8000292:	2208      	movs	r2, #8
 8000294:	214e      	movs	r1, #78	@ 0x4e
 8000296:	f7ff ff59 	bl	800014c <I2C_Send>

//	Display on - cursor off - blinking on
	I2C_Send(lcd_i2c, (0x27 << 1), 0xD, 0);
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <LCD_Init+0x70>)
 800029c:	6818      	ldr	r0, [r3, #0]
 800029e:	2300      	movs	r3, #0
 80002a0:	220d      	movs	r2, #13
 80002a2:	214e      	movs	r1, #78	@ 0x4e
 80002a4:	f7ff ff52 	bl	800014c <I2C_Send>

//  Entry mode set
	I2C_Send(lcd_i2c, (0x27 << 1), 0x6, 0);
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <LCD_Init+0x70>)
 80002aa:	6818      	ldr	r0, [r3, #0]
 80002ac:	2300      	movs	r3, #0
 80002ae:	2206      	movs	r2, #6
 80002b0:	214e      	movs	r1, #78	@ 0x4e
 80002b2:	f7ff ff4b 	bl	800014c <I2C_Send>

	clearLCD();
 80002b6:	f000 f807 	bl	80002c8 <clearLCD>
};
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	200000c4 	.word	0x200000c4

080002c8 <clearLCD>:
	for (int idx = 0; text[idx] != '\0' && col + idx < 17; idx++){
		I2C_Send(lcd_i2c, (0x27 << 1), text[idx], RS);
	}
}

void clearLCD(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//  Clear display
		I2C_Send(lcd_i2c, (0x27 << 1), 0x1, 0);
 80002cc:	4b07      	ldr	r3, [pc, #28]	@ (80002ec <clearLCD+0x24>)
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	2300      	movs	r3, #0
 80002d2:	2201      	movs	r2, #1
 80002d4:	214e      	movs	r1, #78	@ 0x4e
 80002d6:	f7ff ff39 	bl	800014c <I2C_Send>
	//  Home return
		I2C_Send(lcd_i2c, (0x27 << 1), 0x2, 0);
 80002da:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <clearLCD+0x24>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2202      	movs	r2, #2
 80002e2:	214e      	movs	r1, #78	@ 0x4e
 80002e4:	f7ff ff32 	bl	800014c <I2C_Send>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	200000c4 	.word	0x200000c4

080002f0 <setBlinking>:

void setBlinking (uint8_t blink) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	B = blink;
 80002fa:	4a13      	ldr	r2, [pc, #76]	@ (8000348 <setBlinking+0x58>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	7013      	strb	r3, [r2, #0]
	I2C_Send(lcd_i2c, (0x27 << 1), 0x0, 0);
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <setBlinking+0x5c>)
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	214e      	movs	r1, #78	@ 0x4e
 800030a:	f7ff ff1f 	bl	800014c <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), ((1 << 3) | (D << 2) | (C << 1) | B), 0);
 800030e:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <setBlinking+0x5c>)
 8000310:	6818      	ldr	r0, [r3, #0]
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <setBlinking+0x60>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	b25b      	sxtb	r3, r3
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	b25a      	sxtb	r2, r3
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <setBlinking+0x64>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	b25b      	sxtb	r3, r3
 8000328:	4313      	orrs	r3, r2
 800032a:	b25a      	sxtb	r2, r3
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <setBlinking+0x58>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b25b      	sxtb	r3, r3
 8000332:	4313      	orrs	r3, r2
 8000334:	b25b      	sxtb	r3, r3
 8000336:	b2da      	uxtb	r2, r3
 8000338:	2300      	movs	r3, #0
 800033a:	214e      	movs	r1, #78	@ 0x4e
 800033c:	f7ff ff06 	bl	800014c <I2C_Send>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200000c1 	.word	0x200000c1
 800034c:	200000c4 	.word	0x200000c4
 8000350:	20000001 	.word	0x20000001
 8000354:	200000c0 	.word	0x200000c0

08000358 <setCursor>:

void setCursor (uint8_t cursor) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	C = cursor;
 8000362:	4a13      	ldr	r2, [pc, #76]	@ (80003b0 <setCursor+0x58>)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	7013      	strb	r3, [r2, #0]
	I2C_Send(lcd_i2c, (0x27 << 1), 0x0, 0);
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <setCursor+0x5c>)
 800036a:	6818      	ldr	r0, [r3, #0]
 800036c:	2300      	movs	r3, #0
 800036e:	2200      	movs	r2, #0
 8000370:	214e      	movs	r1, #78	@ 0x4e
 8000372:	f7ff feeb 	bl	800014c <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), ((1 << 3) | (D << 2) | (C << 1) | B), 0);
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <setCursor+0x5c>)
 8000378:	6818      	ldr	r0, [r3, #0]
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <setCursor+0x60>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	b25b      	sxtb	r3, r3
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	b25a      	sxtb	r2, r3
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <setCursor+0x58>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	b25b      	sxtb	r3, r3
 8000390:	4313      	orrs	r3, r2
 8000392:	b25a      	sxtb	r2, r3
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <setCursor+0x64>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	4313      	orrs	r3, r2
 800039c:	b25b      	sxtb	r3, r3
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	214e      	movs	r1, #78	@ 0x4e
 80003a4:	f7ff fed2 	bl	800014c <I2C_Send>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000c0 	.word	0x200000c0
 80003b4:	200000c4 	.word	0x200000c4
 80003b8:	20000001 	.word	0x20000001
 80003bc:	200000c1 	.word	0x200000c1

080003c0 <SCH_Init>:
#include "Scheduler.h"

sTask * SCH_Tasks;
unsigned int taskID = 0;

void SCH_Init ( void ) {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	SCH_Tasks = NULL;
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <SCH_Init+0x14>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	200000c8 	.word	0x200000c8

080003d8 <SCH_Add_Task>:

unsigned int SCH_Add_Task (void (* Task) (void), uint32_t Delay, uint32_t Period) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
    sTask * NewTask = (sTask *) malloc (sizeof( sTask ));
 80003e4:	2018      	movs	r0, #24
 80003e6:	f004 fa9f 	bl	8004928 <malloc>
 80003ea:	4603      	mov	r3, r0
 80003ec:	613b      	str	r3, [r7, #16]
    NewTask->pTask = Task;
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	601a      	str	r2, [r3, #0]
	NewTask->Delay = Delay;
 80003f4:	68ba      	ldr	r2, [r7, #8]
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	605a      	str	r2, [r3, #4]
    NewTask->Period = Period;
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	609a      	str	r2, [r3, #8]
    NewTask->RunMe = 0;
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	2200      	movs	r2, #0
 8000404:	731a      	strb	r2, [r3, #12]
    NewTask->TaskID = taskID++;
 8000406:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <SCH_Add_Task+0xa4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	491b      	ldr	r1, [pc, #108]	@ (800047c <SCH_Add_Task+0xa4>)
 800040e:	600a      	str	r2, [r1, #0]
 8000410:	693a      	ldr	r2, [r7, #16]
 8000412:	6113      	str	r3, [r2, #16]

    //Find the suitable position for Task
    sTask **pointer = &SCH_Tasks;
 8000414:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <SCH_Add_Task+0xa8>)
 8000416:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 8000418:	e00b      	b.n	8000432 <SCH_Add_Task+0x5a>
        NewTask->Delay -= (*pointer)->Delay;
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	1ad2      	subs	r2, r2, r3
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	605a      	str	r2, [r3, #4]
        pointer = &((*pointer)->next);
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3314      	adds	r3, #20
 8000430:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d006      	beq.n	8000448 <SCH_Add_Task+0x70>
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	429a      	cmp	r2, r3
 8000446:	dae8      	bge.n	800041a <SCH_Add_Task+0x42>
    }
    NewTask->next = *pointer;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	615a      	str	r2, [r3, #20]
    *pointer = NewTask;
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	601a      	str	r2, [r3, #0]

    //Update the rest of the linked list
    if (NewTask->next != NULL) {
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d008      	beq.n	8000470 <SCH_Add_Task+0x98>
    	(NewTask->next)->Delay -= NewTask->Delay;
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	6859      	ldr	r1, [r3, #4]
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	605a      	str	r2, [r3, #4]
    }
    return NewTask->TaskID;
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	691b      	ldr	r3, [r3, #16]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000cc 	.word	0x200000cc
 8000480:	200000c8 	.word	0x200000c8

08000484 <SCH_Add_Task_Dispatcher>:

void SCH_Add_Task_Dispatcher (void (* Task) (void), uint32_t Delay, uint32_t Period, int TaskID) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	603b      	str	r3, [r7, #0]
    sTask * NewTask = (sTask *) malloc (sizeof(sTask));
 8000492:	2018      	movs	r0, #24
 8000494:	f004 fa48 	bl	8004928 <malloc>
 8000498:	4603      	mov	r3, r0
 800049a:	613b      	str	r3, [r7, #16]
    NewTask->pTask = Task;
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]
    NewTask->Delay = Delay;
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	605a      	str	r2, [r3, #4]
    NewTask->Period = Period;
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	609a      	str	r2, [r3, #8]
    NewTask->RunMe = 0;
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	2200      	movs	r2, #0
 80004b2:	731a      	strb	r2, [r3, #12]
    NewTask->TaskID = TaskID;
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	611a      	str	r2, [r3, #16]

    //Find the suitable position for Task
    sTask **pointer = &SCH_Tasks;
 80004ba:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <SCH_Add_Task_Dispatcher+0x9c>)
 80004bc:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 80004be:	e00b      	b.n	80004d8 <SCH_Add_Task_Dispatcher+0x54>
        NewTask->Delay -= (*pointer)->Delay;
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	685a      	ldr	r2, [r3, #4]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	605a      	str	r2, [r3, #4]
        pointer = &((*pointer)->next);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3314      	adds	r3, #20
 80004d6:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d006      	beq.n	80004ee <SCH_Add_Task_Dispatcher+0x6a>
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dae8      	bge.n	80004c0 <SCH_Add_Task_Dispatcher+0x3c>
    }
    NewTask->next = *pointer;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	615a      	str	r2, [r3, #20]
    *pointer = NewTask;
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	601a      	str	r2, [r3, #0]

    //Update the rest of the linked list
    if (NewTask->next != NULL) {
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d008      	beq.n	8000516 <SCH_Add_Task_Dispatcher+0x92>
    	(NewTask->next)->Delay -= NewTask->Delay;
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	6859      	ldr	r1, [r3, #4]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	685a      	ldr	r2, [r3, #4]
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	1a8a      	subs	r2, r1, r2
 8000514:	605a      	str	r2, [r3, #4]
    }
}
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000c8 	.word	0x200000c8

08000524 <Delete_Task_Dispatcher>:

void Delete_Task_Dispatcher ( void ) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
    sTask * deleteTask = SCH_Tasks;
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <Delete_Task_Dispatcher+0x24>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	607b      	str	r3, [r7, #4]

    SCH_Tasks = SCH_Tasks->next;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <Delete_Task_Dispatcher+0x24>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <Delete_Task_Dispatcher+0x24>)
 8000538:	6013      	str	r3, [r2, #0]
    free(deleteTask);
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f004 f9fc 	bl	8004938 <free>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000c8 	.word	0x200000c8

0800054c <Delete_Task>:

void Delete_Task ( unsigned int TaskID) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    sTask ** taskPointer = &SCH_Tasks;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <Delete_Task+0x50>)
 8000556:	60fb      	str	r3, [r7, #12]

    while (*taskPointer != NULL && (*taskPointer)->TaskID != TaskID)
 8000558:	e003      	b.n	8000562 <Delete_Task+0x16>
        taskPointer = &((*taskPointer)->next);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	3314      	adds	r3, #20
 8000560:	60fb      	str	r3, [r7, #12]
    while (*taskPointer != NULL && (*taskPointer)->TaskID != TaskID)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <Delete_Task+0x2a>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	d1f1      	bne.n	800055a <Delete_Task+0xe>

    if (*taskPointer != NULL) {
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <Delete_Task+0x48>
        sTask *deleteTask = *taskPointer;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	60bb      	str	r3, [r7, #8]
        *taskPointer = (*taskPointer)->next;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	601a      	str	r2, [r3, #0]
        free(deleteTask);
 800058e:	68b8      	ldr	r0, [r7, #8]
 8000590:	f004 f9d2 	bl	8004938 <free>
    }
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000c8 	.word	0x200000c8

080005a0 <SCH_Update>:

void SCH_Update ( void ) {
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if (SCH_Tasks != NULL) {
 80005a4:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <SCH_Update+0x24>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <SCH_Update+0x1a>
		SCH_Tasks->Delay -= TIMER_CYCLE;
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <SCH_Update+0x24>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <SCH_Update+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3a01      	subs	r2, #1
 80005b8:	605a      	str	r2, [r3, #4]
	}
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200000c8 	.word	0x200000c8

080005c8 <SCH_Dispatcher>:

void SCH_Dispatcher ( void ) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	if (SCH_Tasks != NULL) {
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d021      	beq.n	800061a <SCH_Dispatcher+0x52>
		if (SCH_Tasks->Delay <= 0) {
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	dc1c      	bgt.n	800061a <SCH_Dispatcher+0x52>
			(*(SCH_Tasks->pTask))();
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4798      	blx	r3
			if (SCH_Tasks->Period > 0) {
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d011      	beq.n	8000616 <SCH_Dispatcher+0x4e>
				void *func = SCH_Tasks->pTask;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
				unsigned int Period = SCH_Tasks->Period;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <SCH_Dispatcher+0x5c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	60bb      	str	r3, [r7, #8]
				unsigned int TaskID = SCH_Tasks->TaskID;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <SCH_Dispatcher+0x5c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	607b      	str	r3, [r7, #4]
				SCH_Add_Task_Dispatcher (func, Period, Period, TaskID);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	f7ff ff37 	bl	8000484 <SCH_Add_Task_Dispatcher>
			}
			Delete_Task_Dispatcher ();
 8000616:	f7ff ff85 	bl	8000524 <Delete_Task_Dispatcher>
		}
	}
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000c8 	.word	0x200000c8

08000628 <HAL_TIM_PeriodElapsedCallback>:
//        head = head->next;
//    }
//    printf ("\n");
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000630:	f7ff ffb6 	bl	80005a0 <SCH_Update>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Traffic_Light_FSM_Init>:
							 GPIO_TypeDef * Button2_Port, int Button2_Pin,
							 GPIO_TypeDef * Button3_Port, int Button3_Pin,
							 GPIO_TypeDef * LIGHT1_Sig1_Port, int LIGHT1_Sig1_Pin,
							 GPIO_TypeDef * LIGHT1_Sig2_Port, int LIGHT1_Sig2_Pin,
							 GPIO_TypeDef * LIGHT2_Sig1_Port, int LIGHT2_Sig1_Pin,
							 GPIO_TypeDef * LIGHT2_Sig2_Port, int LIGHT2_Sig2_Pin) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]
	Button_Init(Button1_Port, Button1_Pin, Button2_Port, Button2_Pin, Button3_Port, Button3_Pin);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 fe21 	bl	80012a0 <Button_Init>

	LIGHT1_Port [0] = LIGHT1_Sig1_Port;
 800065e:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <Traffic_Light_FSM_Init+0x5c>)
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	6013      	str	r3, [r2, #0]
	LIGHT1_Port [1] = LIGHT1_Sig2_Port;
 8000664:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <Traffic_Light_FSM_Init+0x5c>)
 8000666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000668:	6053      	str	r3, [r2, #4]
	LIGHT1_Pin [0] = LIGHT1_Sig1_Pin;
 800066a:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <Traffic_Light_FSM_Init+0x60>)
 800066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066e:	6013      	str	r3, [r2, #0]
	LIGHT1_Pin [1] = LIGHT1_Sig2_Pin;
 8000670:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <Traffic_Light_FSM_Init+0x60>)
 8000672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000674:	6053      	str	r3, [r2, #4]

	LIGHT2_Port [0] = LIGHT2_Sig1_Port;
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <Traffic_Light_FSM_Init+0x64>)
 8000678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067a:	6013      	str	r3, [r2, #0]
	LIGHT2_Port [1] = LIGHT2_Sig2_Port;
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <Traffic_Light_FSM_Init+0x64>)
 800067e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000680:	6053      	str	r3, [r2, #4]
	LIGHT2_Pin [0] = LIGHT2_Sig1_Pin;
 8000682:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <Traffic_Light_FSM_Init+0x68>)
 8000684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000686:	6013      	str	r3, [r2, #0]
	LIGHT2_Pin [1] = LIGHT2_Sig2_Pin;
 8000688:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <Traffic_Light_FSM_Init+0x68>)
 800068a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800068c:	6053      	str	r3, [r2, #4]

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000fc 	.word	0x200000fc
 800069c:	2000010c 	.word	0x2000010c
 80006a0:	20000104 	.word	0x20000104
 80006a4:	20000114 	.word	0x20000114

080006a8 <Traffic_Light_FSM_Run>:

void Traffic_Light_FSM_Run () {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if (!init) {
 80006ac:	4b9b      	ldr	r3, [pc, #620]	@ (800091c <Traffic_Light_FSM_Run+0x274>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d104      	bne.n	80006be <Traffic_Light_FSM_Run+0x16>
		init = 1;
 80006b4:	4b99      	ldr	r3, [pc, #612]	@ (800091c <Traffic_Light_FSM_Run+0x274>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
		controllerInit ();
 80006ba:	f000 fa19 	bl	8000af0 <controllerInit>
	}
	switch (Mode) {
 80006be:	4b98      	ldr	r3, [pc, #608]	@ (8000920 <Traffic_Light_FSM_Run+0x278>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b05      	cmp	r3, #5
 80006c4:	f200 81cc 	bhi.w	8000a60 <Traffic_Light_FSM_Run+0x3b8>
 80006c8:	a201      	add	r2, pc, #4	@ (adr r2, 80006d0 <Traffic_Light_FSM_Run+0x28>)
 80006ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ce:	bf00      	nop
 80006d0:	08000761 	.word	0x08000761
 80006d4:	0800081b 	.word	0x0800081b
 80006d8:	080008d5 	.word	0x080008d5
 80006dc:	080006e9 	.word	0x080006e9
 80006e0:	080009f9 	.word	0x080009f9
 80006e4:	08000a1f 	.word	0x08000a1f
	case NORMAL:
		if (Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) {
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fecd 	bl	8001488 <Is_Button_Pressed>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00c      	beq.n	800070e <Traffic_Light_FSM_Run+0x66>
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fee1 	bl	80014bc <Is_Button_Long_Pressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d106      	bne.n	800070e <Traffic_Light_FSM_Run+0x66>
			modePreset (RED);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fbcb 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 8000706:	4b87      	ldr	r3, [pc, #540]	@ (8000924 <Traffic_Light_FSM_Run+0x27c>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
			break;
 800070c:	e1b3      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		}
		else if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 800070e:	2002      	movs	r0, #2
 8000710:	f000 feba 	bl	8001488 <Is_Button_Pressed>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d00c      	beq.n	8000734 <Traffic_Light_FSM_Run+0x8c>
 800071a:	2002      	movs	r0, #2
 800071c:	f000 fece 	bl	80014bc <Is_Button_Long_Pressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d106      	bne.n	8000734 <Traffic_Light_FSM_Run+0x8c>
			modePreset (SLOWDOWN);
 8000726:	2004      	movs	r0, #4
 8000728:	f000 fbb8 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 800072c:	4b7d      	ldr	r3, [pc, #500]	@ (8000924 <Traffic_Light_FSM_Run+0x27c>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
			break;
 8000732:	e1a0      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		}
		else if (Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3)) {
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fea7 	bl	8001488 <Is_Button_Pressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00c      	beq.n	800075a <Traffic_Light_FSM_Run+0xb2>
 8000740:	2003      	movs	r0, #3
 8000742:	f000 febb 	bl	80014bc <Is_Button_Long_Pressed>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d106      	bne.n	800075a <Traffic_Light_FSM_Run+0xb2>
			modePreset (MANUAL);
 800074c:	2005      	movs	r0, #5
 800074e:	f000 fba5 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 8000752:	4b74      	ldr	r3, [pc, #464]	@ (8000924 <Traffic_Light_FSM_Run+0x27c>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
			break;
 8000758:	e18d      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		} else {
			display_Light ();
 800075a:	f000 f997 	bl	8000a8c <display_Light>
			return;
 800075e:	e18a      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		}
		break;
	case RED:
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fe91 	bl	8001488 <Is_Button_Pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d005      	beq.n	8000778 <Traffic_Light_FSM_Run+0xd0>
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fea5 	bl	80014bc <Is_Button_Long_Pressed>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <Traffic_Light_FSM_Run+0xe8>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000778:	2003      	movs	r0, #3
 800077a:	f000 fe85 	bl	8001488 <Is_Button_Pressed>
 800077e:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000780:	2b00      	cmp	r3, #0
 8000782:	d015      	beq.n	80007b0 <Traffic_Light_FSM_Run+0x108>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000784:	2003      	movs	r0, #3
 8000786:	f000 fe99 	bl	80014bc <Is_Button_Long_Pressed>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10f      	bne.n	80007b0 <Traffic_Light_FSM_Run+0x108>
			if (RED_Timer != settingBuffer[RED])
 8000790:	4b65      	ldr	r3, [pc, #404]	@ (8000928 <Traffic_Light_FSM_Run+0x280>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b65      	ldr	r3, [pc, #404]	@ (800092c <Traffic_Light_FSM_Run+0x284>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d002      	beq.n	80007a2 <Traffic_Light_FSM_Run+0xfa>
				setFlag = 1;
 800079c:	4b64      	ldr	r3, [pc, #400]	@ (8000930 <Traffic_Light_FSM_Run+0x288>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
			modePreset (AMBER);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 fb7a 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 80007a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000924 <Traffic_Light_FSM_Run+0x27c>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
			break;
 80007ae:	e162      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		}
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 fe69 	bl	8001488 <Is_Button_Pressed>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d008      	beq.n	80007ce <Traffic_Light_FSM_Run+0x126>
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 fe7d 	bl	80014bc <Is_Button_Long_Pressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <Traffic_Light_FSM_Run+0x126>
			increaseTimer(&settingBuffer[RED]);
 80007c8:	4857      	ldr	r0, [pc, #348]	@ (8000928 <Traffic_Light_FSM_Run+0x280>)
 80007ca:	f000 fb37 	bl	8000e3c <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fe74 	bl	80014bc <Is_Button_Long_Pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00f      	beq.n	80007fa <Traffic_Light_FSM_Run+0x152>
			if (longPressedID == -1) {
 80007da:	4b56      	ldr	r3, [pc, #344]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e2:	f040 813f 	bne.w	8000a64 <Traffic_Light_FSM_Run+0x3bc>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 80007ec:	4852      	ldr	r0, [pc, #328]	@ (8000938 <Traffic_Light_FSM_Run+0x290>)
 80007ee:	f7ff fdf3 	bl	80003d8 <SCH_Add_Task>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a4f      	ldr	r2, [pc, #316]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80007f6:	6013      	str	r3, [r2, #0]
			if (longPressedID != -1) {
				Delete_Task (longPressedID);
				longPressedID = -1;
			}
		}
		break;
 80007f8:	e134      	b.n	8000a64 <Traffic_Light_FSM_Run+0x3bc>
			if (longPressedID != -1) {
 80007fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000802:	f000 812f 	beq.w	8000a64 <Traffic_Light_FSM_Run+0x3bc>
				Delete_Task (longPressedID);
 8000806:	4b4b      	ldr	r3, [pc, #300]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe9e 	bl	800054c <Delete_Task>
				longPressedID = -1;
 8000810:	4b48      	ldr	r3, [pc, #288]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	601a      	str	r2, [r3, #0]
		break;
 8000818:	e124      	b.n	8000a64 <Traffic_Light_FSM_Run+0x3bc>
	case AMBER:
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fe34 	bl	8001488 <Is_Button_Pressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <Traffic_Light_FSM_Run+0x18a>
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fe48 	bl	80014bc <Is_Button_Long_Pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00b      	beq.n	800084a <Traffic_Light_FSM_Run+0x1a2>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000832:	2003      	movs	r0, #3
 8000834:	f000 fe28 	bl	8001488 <Is_Button_Pressed>
 8000838:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 800083a:	2b00      	cmp	r3, #0
 800083c:	d015      	beq.n	800086a <Traffic_Light_FSM_Run+0x1c2>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 800083e:	2003      	movs	r0, #3
 8000840:	f000 fe3c 	bl	80014bc <Is_Button_Long_Pressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10f      	bne.n	800086a <Traffic_Light_FSM_Run+0x1c2>
			if (AMBER_Timer != settingBuffer[AMBER])
 800084a:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <Traffic_Light_FSM_Run+0x280>)
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <Traffic_Light_FSM_Run+0x294>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d002      	beq.n	800085c <Traffic_Light_FSM_Run+0x1b4>
				setFlag = 1;
 8000856:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <Traffic_Light_FSM_Run+0x288>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
			modePreset (GREEN);
 800085c:	2002      	movs	r0, #2
 800085e:	f000 fb1d 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <Traffic_Light_FSM_Run+0x27c>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
			break;
 8000868:	e105      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		}
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 800086a:	2002      	movs	r0, #2
 800086c:	f000 fe0c 	bl	8001488 <Is_Button_Pressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <Traffic_Light_FSM_Run+0x1e0>
 8000876:	2002      	movs	r0, #2
 8000878:	f000 fe20 	bl	80014bc <Is_Button_Long_Pressed>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d102      	bne.n	8000888 <Traffic_Light_FSM_Run+0x1e0>
			increaseTimer (&settingBuffer[AMBER]);
 8000882:	482f      	ldr	r0, [pc, #188]	@ (8000940 <Traffic_Light_FSM_Run+0x298>)
 8000884:	f000 fada 	bl	8000e3c <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 8000888:	2002      	movs	r0, #2
 800088a:	f000 fe17 	bl	80014bc <Is_Button_Long_Pressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00f      	beq.n	80008b4 <Traffic_Light_FSM_Run+0x20c>
			if (longPressedID == -1) {
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	f040 80e4 	bne.w	8000a68 <Traffic_Light_FSM_Run+0x3c0>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 80008a6:	4824      	ldr	r0, [pc, #144]	@ (8000938 <Traffic_Light_FSM_Run+0x290>)
 80008a8:	f7ff fd96 	bl	80003d8 <SCH_Add_Task>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a21      	ldr	r2, [pc, #132]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80008b0:	6013      	str	r3, [r2, #0]
			if (longPressedID != -1) {
				Delete_Task (longPressedID);
				longPressedID = -1;
			}
		}
		break;
 80008b2:	e0d9      	b.n	8000a68 <Traffic_Light_FSM_Run+0x3c0>
			if (longPressedID != -1) {
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	f000 80d4 	beq.w	8000a68 <Traffic_Light_FSM_Run+0x3c0>
				Delete_Task (longPressedID);
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe41 	bl	800054c <Delete_Task>
				longPressedID = -1;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	601a      	str	r2, [r3, #0]
		break;
 80008d2:	e0c9      	b.n	8000a68 <Traffic_Light_FSM_Run+0x3c0>
	case GREEN:
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 80008d4:	2002      	movs	r0, #2
 80008d6:	f000 fdd7 	bl	8001488 <Is_Button_Pressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <Traffic_Light_FSM_Run+0x24a>
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 fdeb 	bl	80014bc <Is_Button_Long_Pressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <Traffic_Light_FSM_Run+0x24a>
			increaseTimer (&settingBuffer[GREEN]);
 80008ec:	4815      	ldr	r0, [pc, #84]	@ (8000944 <Traffic_Light_FSM_Run+0x29c>)
 80008ee:	f000 faa5 	bl	8000e3c <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 80008f2:	2002      	movs	r0, #2
 80008f4:	f000 fde2 	bl	80014bc <Is_Button_Long_Pressed>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d024      	beq.n	8000948 <Traffic_Light_FSM_Run+0x2a0>
			if (longPressedID == -1) {
 80008fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000906:	d12d      	bne.n	8000964 <Traffic_Light_FSM_Run+0x2bc>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800090e:	480a      	ldr	r0, [pc, #40]	@ (8000938 <Traffic_Light_FSM_Run+0x290>)
 8000910:	f7ff fd62 	bl	80003d8 <SCH_Add_Task>
 8000914:	4603      	mov	r3, r0
 8000916:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <Traffic_Light_FSM_Run+0x28c>)
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e023      	b.n	8000964 <Traffic_Light_FSM_Run+0x2bc>
 800091c:	200000d0 	.word	0x200000d0
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004
 8000928:	20000014 	.word	0x20000014
 800092c:	20000020 	.word	0x20000020
 8000930:	200000d4 	.word	0x200000d4
 8000934:	20000030 	.word	0x20000030
 8000938:	080010a1 	.word	0x080010a1
 800093c:	20000024 	.word	0x20000024
 8000940:	20000018 	.word	0x20000018
 8000944:	2000001c 	.word	0x2000001c
			}
		} else {
			if (longPressedID != -1) {
 8000948:	4b4b      	ldr	r3, [pc, #300]	@ (8000a78 <Traffic_Light_FSM_Run+0x3d0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d008      	beq.n	8000964 <Traffic_Light_FSM_Run+0x2bc>
				Delete_Task (longPressedID);
 8000952:	4b49      	ldr	r3, [pc, #292]	@ (8000a78 <Traffic_Light_FSM_Run+0x3d0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fdf8 	bl	800054c <Delete_Task>
				longPressedID = -1;
 800095c:	4b46      	ldr	r3, [pc, #280]	@ (8000a78 <Traffic_Light_FSM_Run+0x3d0>)
 800095e:	f04f 32ff 	mov.w	r2, #4294967295
 8000962:	601a      	str	r2, [r3, #0]
			}
		}
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000964:	2001      	movs	r0, #1
 8000966:	f000 fd8f 	bl	8001488 <Is_Button_Pressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <Traffic_Light_FSM_Run+0x2d4>
 8000970:	2001      	movs	r0, #1
 8000972:	f000 fda3 	bl	80014bc <Is_Button_Long_Pressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00b      	beq.n	8000994 <Traffic_Light_FSM_Run+0x2ec>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 800097c:	2003      	movs	r0, #3
 800097e:	f000 fd83 	bl	8001488 <Is_Button_Pressed>
 8000982:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000984:	2b00      	cmp	r3, #0
 8000986:	d071      	beq.n	8000a6c <Traffic_Light_FSM_Run+0x3c4>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000988:	2003      	movs	r0, #3
 800098a:	f000 fd97 	bl	80014bc <Is_Button_Long_Pressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d16b      	bne.n	8000a6c <Traffic_Light_FSM_Run+0x3c4>
			if (GREEN_Timer != settingBuffer[GREEN])
 8000994:	4b39      	ldr	r3, [pc, #228]	@ (8000a7c <Traffic_Light_FSM_Run+0x3d4>)
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	4b39      	ldr	r3, [pc, #228]	@ (8000a80 <Traffic_Light_FSM_Run+0x3d8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d002      	beq.n	80009a6 <Traffic_Light_FSM_Run+0x2fe>
				setFlag = 1;
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <Traffic_Light_FSM_Run+0x3dc>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
			if (setFlag) {
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <Traffic_Light_FSM_Run+0x3dc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <Traffic_Light_FSM_Run+0x33a>
				if (settingBuffer[RED] != settingBuffer[AMBER] + settingBuffer[GREEN]) {//Process if the change is invalid
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <Traffic_Light_FSM_Run+0x3d4>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b32      	ldr	r3, [pc, #200]	@ (8000a7c <Traffic_Light_FSM_Run+0x3d4>)
 80009b4:	6859      	ldr	r1, [r3, #4]
 80009b6:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <Traffic_Light_FSM_Run+0x3d4>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	440b      	add	r3, r1
 80009bc:	429a      	cmp	r2, r3
 80009be:	d00b      	beq.n	80009d8 <Traffic_Light_FSM_Run+0x330>
					resetSettingBuffer ();
 80009c0:	f000 fa52 	bl	8000e68 <resetSettingBuffer>
					modePreset (RED);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fa69 	bl	8000e9c <modePreset>
					changeModeFlag = 1;
 80009ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <Traffic_Light_FSM_Run+0x3e0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
					setFlag = 0;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <Traffic_Light_FSM_Run+0x3dc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
					break;
 80009d6:	e04e      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
				} else {
					saveState ();
 80009d8:	f000 fa16 	bl	8000e08 <saveState>
					setFlag = 0;
 80009dc:	4b29      	ldr	r3, [pc, #164]	@ (8000a84 <Traffic_Light_FSM_Run+0x3dc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
				}
			}
			if (!setFlag) {//If we not make any change or the change is valid then enter mode normal to run
 80009e2:	4b28      	ldr	r3, [pc, #160]	@ (8000a84 <Traffic_Light_FSM_Run+0x3dc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d140      	bne.n	8000a6c <Traffic_Light_FSM_Run+0x3c4>
				modePreset (NORMAL);
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 fa56 	bl	8000e9c <modePreset>
				changeModeFlag = 1;
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <Traffic_Light_FSM_Run+0x3e0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80009f6:	e039      	b.n	8000a6c <Traffic_Light_FSM_Run+0x3c4>
	case SLOWDOWN:
		if (Is_Button_Pressed(BUTTON2) && !Is_Button_Long_Pressed(BUTTON2)) {
 80009f8:	2002      	movs	r0, #2
 80009fa:	f000 fd45 	bl	8001488 <Is_Button_Pressed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d035      	beq.n	8000a70 <Traffic_Light_FSM_Run+0x3c8>
 8000a04:	2002      	movs	r0, #2
 8000a06:	f000 fd59 	bl	80014bc <Is_Button_Long_Pressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d12f      	bne.n	8000a70 <Traffic_Light_FSM_Run+0x3c8>
			modePreset (NORMAL);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 fa43 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <Traffic_Light_FSM_Run+0x3e0>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a1c:	e028      	b.n	8000a70 <Traffic_Light_FSM_Run+0x3c8>
	case MANUAL:
		if (Is_Button_Pressed(BUTTON3) && !Is_Button_Long_Pressed(BUTTON3)) {
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f000 fd32 	bl	8001488 <Is_Button_Pressed>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00b      	beq.n	8000a42 <Traffic_Light_FSM_Run+0x39a>
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 fd46 	bl	80014bc <Is_Button_Long_Pressed>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d105      	bne.n	8000a42 <Traffic_Light_FSM_Run+0x39a>
			modePreset (NORMAL);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 fa30 	bl	8000e9c <modePreset>
			changeModeFlag = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <Traffic_Light_FSM_Run+0x3e0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
		}
		if (Is_Button_Pressed(BUTTON1) && !Is_Button_Long_Pressed(BUTTON1)) {
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fd20 	bl	8001488 <Is_Button_Pressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d012      	beq.n	8000a74 <Traffic_Light_FSM_Run+0x3cc>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fd34 	bl	80014bc <Is_Button_Long_Pressed>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10c      	bne.n	8000a74 <Traffic_Light_FSM_Run+0x3cc>
			switchRoute();
 8000a5a:	f000 fae1 	bl	8001020 <switchRoute>
		}
		break;
 8000a5e:	e009      	b.n	8000a74 <Traffic_Light_FSM_Run+0x3cc>
	default:
		break;
 8000a60:	bf00      	nop
 8000a62:	e008      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		break;
 8000a64:	bf00      	nop
 8000a66:	e006      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e004      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <Traffic_Light_FSM_Run+0x3ce>
		break;
 8000a74:	bf00      	nop
	}
}
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000030 	.word	0x20000030
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	20000028 	.word	0x20000028
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	20000004 	.word	0x20000004

08000a8c <display_Light>:

void display_Light () {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if (milliSec >= 1000) {
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <display_Light+0x50>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a98:	db1c      	blt.n	8000ad4 <display_Light+0x48>
		second--;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <display_Light+0x54>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <display_Light+0x54>)
 8000aa2:	6013      	str	r3, [r2, #0]
		redLightTimer--;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <display_Light+0x58>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <display_Light+0x58>)
 8000aac:	6013      	str	r3, [r2, #0]
		milliSec = 0;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <display_Light+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]

		if (second <= 0) {
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <display_Light+0x54>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dc0b      	bgt.n	8000ad4 <display_Light+0x48>
		  fetchNextState();
 8000abc:	f000 f836 	bl	8000b2c <fetchNextState>
		  switch (lightController.currentState) {
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <display_Light+0x5c>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d104      	bne.n	8000ad2 <display_Light+0x46>
			  case Green:
				  redLightTimer = RED_Timer;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <display_Light+0x60>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <display_Light+0x58>)
 8000ace:	6013      	str	r3, [r2, #0]
				  break;
 8000ad0:	e000      	b.n	8000ad4 <display_Light+0x48>
			  default:
				  break;
 8000ad2:	bf00      	nop
		  }
		}
	}
	lightOn();
 8000ad4:	f000 f858 	bl	8000b88 <lightOn>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	2000002c 	.word	0x2000002c
 8000ae8:	200000d8 	.word	0x200000d8
 8000aec:	20000020 	.word	0x20000020

08000af0 <controllerInit>:

/*controllerInit used to reload the value of green light time and red light time
for the traffic light before enter normal mode*/
void controllerInit (void) {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	lightController.isLight1 = 1;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <controllerInit+0x28>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
	lightController.currentState = Green;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <controllerInit+0x28>)
 8000afc:	2203      	movs	r2, #3
 8000afe:	705a      	strb	r2, [r3, #1]
	second = GREEN_Timer;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <controllerInit+0x2c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <controllerInit+0x30>)
 8000b06:	6013      	str	r3, [r2, #0]
	redLightTimer = RED_Timer;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <controllerInit+0x34>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <controllerInit+0x38>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	200000d8 	.word	0x200000d8
 8000b1c:	20000028 	.word	0x20000028
 8000b20:	20000010 	.word	0x20000010
 8000b24:	20000020 	.word	0x20000020
 8000b28:	2000002c 	.word	0x2000002c

08000b2c <fetchNextState>:

/*Load next state when the counter gets to zero*/
void fetchNextState (void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	switch (lightController.currentState) {
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <fetchNextState+0x4c>)
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d009      	beq.n	8000b4c <fetchNextState+0x20>
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d119      	bne.n	8000b70 <fetchNextState+0x44>
		case Green:
			lightController.currentState = Yellow;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <fetchNextState+0x4c>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	705a      	strb	r2, [r3, #1]
			second = AMBER_Timer;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <fetchNextState+0x50>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <fetchNextState+0x54>)
 8000b48:	6013      	str	r3, [r2, #0]
			return;
 8000b4a:	e012      	b.n	8000b72 <fetchNextState+0x46>
		case Yellow:
			lightController.currentState = Green;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <fetchNextState+0x4c>)
 8000b4e:	2203      	movs	r2, #3
 8000b50:	705a      	strb	r2, [r3, #1]
			lightController.isLight1 = !lightController.isLight1;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <fetchNextState+0x4c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <fetchNextState+0x4c>)
 8000b64:	701a      	strb	r2, [r3, #0]
			second = GREEN_Timer;
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <fetchNextState+0x58>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <fetchNextState+0x54>)
 8000b6c:	6013      	str	r3, [r2, #0]
			return;
 8000b6e:	e000      	b.n	8000b72 <fetchNextState+0x46>
		default:
			return;
 8000b70:	bf00      	nop
	}
}
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	200000d8 	.word	0x200000d8
 8000b7c:	20000024 	.word	0x20000024
 8000b80:	20000010 	.word	0x20000010
 8000b84:	20000028 	.word	0x20000028

08000b88 <lightOn>:

/*Turn on lights on the traffic light*/
void lightOn (void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	if (lightController.isLight1) {
 8000b8c:	4b43      	ldr	r3, [pc, #268]	@ (8000c9c <lightOn+0x114>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d03e      	beq.n	8000c12 <lightOn+0x8a>
		switch (lightController.currentState) {
 8000b94:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <lightOn+0x114>)
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d014      	beq.n	8000bc6 <lightOn+0x3e>
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d125      	bne.n	8000bec <lightOn+0x64>
			case Green:
				HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca0 <lightOn+0x118>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca4 <lightOn+0x11c>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	b291      	uxth	r1, r2
 8000baa:	2201      	movs	r2, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 f8e0 	bl	8002d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <lightOn+0x118>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca4 <lightOn+0x11c>)
 8000bb8:	6852      	ldr	r2, [r2, #4]
 8000bba:	b291      	uxth	r1, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f8d7 	bl	8002d72 <HAL_GPIO_WritePin>
				break;
 8000bc4:	e013      	b.n	8000bee <lightOn+0x66>
			case Yellow:
				HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 8000bc6:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <lightOn+0x118>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a36      	ldr	r2, [pc, #216]	@ (8000ca4 <lightOn+0x11c>)
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	b291      	uxth	r1, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 f8cd 	bl	8002d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <lightOn+0x118>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <lightOn+0x11c>)
 8000bde:	6852      	ldr	r2, [r2, #4]
 8000be0:	b291      	uxth	r1, r2
 8000be2:	2201      	movs	r2, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 f8c4 	bl	8002d72 <HAL_GPIO_WritePin>
				break;
 8000bea:	e000      	b.n	8000bee <lightOn+0x66>
			default:
				break;
 8000bec:	bf00      	nop
		}
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <lightOn+0x120>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <lightOn+0x124>)
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	b291      	uxth	r1, r2
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 f8b9 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000c00:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <lightOn+0x120>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a29      	ldr	r2, [pc, #164]	@ (8000cac <lightOn+0x124>)
 8000c06:	6852      	ldr	r2, [r2, #4]
 8000c08:	b291      	uxth	r1, r2
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 f8b0 	bl	8002d72 <HAL_GPIO_WritePin>
	}
	if (!lightController.isLight1) {
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <lightOn+0x114>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13e      	bne.n	8000c98 <lightOn+0x110>
		switch (lightController.currentState) {
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <lightOn+0x114>)
 8000c1c:	785b      	ldrb	r3, [r3, #1]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d014      	beq.n	8000c4c <lightOn+0xc4>
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d125      	bne.n	8000c72 <lightOn+0xea>
		case Green:
				HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <lightOn+0x120>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a20      	ldr	r2, [pc, #128]	@ (8000cac <lightOn+0x124>)
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	b291      	uxth	r1, r2
 8000c30:	2201      	movs	r2, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f89d 	bl	8002d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <lightOn+0x120>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <lightOn+0x124>)
 8000c3e:	6852      	ldr	r2, [r2, #4]
 8000c40:	b291      	uxth	r1, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 f894 	bl	8002d72 <HAL_GPIO_WritePin>
				break;
 8000c4a:	e013      	b.n	8000c74 <lightOn+0xec>
			case Yellow:
				HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <lightOn+0x120>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <lightOn+0x124>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	b291      	uxth	r1, r2
 8000c56:	2200      	movs	r2, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 f88a 	bl	8002d72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <lightOn+0x120>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <lightOn+0x124>)
 8000c64:	6852      	ldr	r2, [r2, #4]
 8000c66:	b291      	uxth	r1, r2
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 f881 	bl	8002d72 <HAL_GPIO_WritePin>
				break;
 8000c70:	e000      	b.n	8000c74 <lightOn+0xec>
			default:
				break;
 8000c72:	bf00      	nop
		}
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <lightOn+0x118>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <lightOn+0x11c>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	b291      	uxth	r1, r2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f876 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <lightOn+0x118>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <lightOn+0x11c>)
 8000c8c:	6852      	ldr	r2, [r2, #4]
 8000c8e:	b291      	uxth	r1, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f86d 	bl	8002d72 <HAL_GPIO_WritePin>
	}
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000d8 	.word	0x200000d8
 8000ca0:	200000fc 	.word	0x200000fc
 8000ca4:	2000010c 	.word	0x2000010c
 8000ca8:	20000104 	.word	0x20000104
 8000cac:	20000114 	.word	0x20000114

08000cb0 <turnOffLight>:

/*Turn off lights on the traffic light*/
void turnOffLight(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <turnOffLight+0x50>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <turnOffLight+0x54>)
 8000cba:	6812      	ldr	r2, [r2, #0]
 8000cbc:	b291      	uxth	r1, r2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f856 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <turnOffLight+0x50>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <turnOffLight+0x54>)
 8000ccc:	6852      	ldr	r2, [r2, #4]
 8000cce:	b291      	uxth	r1, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 f84d 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <turnOffLight+0x58>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <turnOffLight+0x5c>)
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 f844 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <turnOffLight+0x58>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <turnOffLight+0x5c>)
 8000cf0:	6852      	ldr	r2, [r2, #4]
 8000cf2:	b291      	uxth	r1, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f83b 	bl	8002d72 <HAL_GPIO_WritePin>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000fc 	.word	0x200000fc
 8000d04:	2000010c 	.word	0x2000010c
 8000d08:	20000104 	.word	0x20000104
 8000d0c:	20000114 	.word	0x20000114

08000d10 <displayMode>:

/*This function is to display the correct numbers on 4 7-SEGs Leds corresponding to each mode*/
void displayMode (enum FSM_Mode mode) {
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d046      	beq.n	8000dae <displayMode+0x9e>
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	dc64      	bgt.n	8000dee <displayMode+0xde>
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <displayMode+0x1e>
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d020      	beq.n	8000d6e <displayMode+0x5e>
		LED_Buffer [1] = 3;
		LED_Buffer [2] = settingBuffer[GREEN] / 10;
		LED_Buffer [3] = settingBuffer[GREEN] % 10;
		break;
	default:
		break;
 8000d2c:	e05f      	b.n	8000dee <displayMode+0xde>
		LED_Buffer [0] = 0;
 8000d2e:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <displayMode+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 1;
 8000d34:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <displayMode+0xec>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[RED] / 10;
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <displayMode+0xf0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a31      	ldr	r2, [pc, #196]	@ (8000e04 <displayMode+0xf4>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dfc <displayMode+0xec>)
 8000d4c:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[RED] % 10;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <displayMode+0xf0>)
 8000d50:	6819      	ldr	r1, [r3, #0]
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <displayMode+0xf4>)
 8000d54:	fb83 2301 	smull	r2, r3, r3, r1
 8000d58:	109a      	asrs	r2, r3, #2
 8000d5a:	17cb      	asrs	r3, r1, #31
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	1aca      	subs	r2, r1, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <displayMode+0xec>)
 8000d6a:	60da      	str	r2, [r3, #12]
		break;
 8000d6c:	e040      	b.n	8000df0 <displayMode+0xe0>
		LED_Buffer [0] = 0;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <displayMode+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 2;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <displayMode+0xec>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[AMBER] / 10;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <displayMode+0xf0>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <displayMode+0xf4>)
 8000d80:	fb82 1203 	smull	r1, r2, r2, r3
 8000d84:	1092      	asrs	r2, r2, #2
 8000d86:	17db      	asrs	r3, r3, #31
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <displayMode+0xec>)
 8000d8c:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[AMBER] % 10;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <displayMode+0xf0>)
 8000d90:	6859      	ldr	r1, [r3, #4]
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <displayMode+0xf4>)
 8000d94:	fb83 2301 	smull	r2, r3, r3, r1
 8000d98:	109a      	asrs	r2, r3, #2
 8000d9a:	17cb      	asrs	r3, r1, #31
 8000d9c:	1ad2      	subs	r2, r2, r3
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	1aca      	subs	r2, r1, r3
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <displayMode+0xec>)
 8000daa:	60da      	str	r2, [r3, #12]
		break;
 8000dac:	e020      	b.n	8000df0 <displayMode+0xe0>
		LED_Buffer [0] = 0;
 8000dae:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <displayMode+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 3;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <displayMode+0xec>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[GREEN] / 10;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <displayMode+0xf0>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	4a11      	ldr	r2, [pc, #68]	@ (8000e04 <displayMode+0xf4>)
 8000dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc4:	1092      	asrs	r2, r2, #2
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <displayMode+0xec>)
 8000dcc:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[GREEN] % 10;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <displayMode+0xf0>)
 8000dd0:	6899      	ldr	r1, [r3, #8]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <displayMode+0xf4>)
 8000dd4:	fb83 2301 	smull	r2, r3, r3, r1
 8000dd8:	109a      	asrs	r2, r3, #2
 8000dda:	17cb      	asrs	r3, r1, #31
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	1aca      	subs	r2, r1, r3
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <displayMode+0xec>)
 8000dea:	60da      	str	r2, [r3, #12]
		break;
 8000dec:	e000      	b.n	8000df0 <displayMode+0xe0>
		break;
 8000dee:	bf00      	nop
	}
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000ec 	.word	0x200000ec
 8000e00:	20000014 	.word	0x20000014
 8000e04:	66666667 	.word	0x66666667

08000e08 <saveState>:

/*To save state when the change is valid*/
void saveState () {
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
	RED_Timer = settingBuffer[0];
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <saveState+0x24>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <saveState+0x28>)
 8000e12:	6013      	str	r3, [r2, #0]
	AMBER_Timer = settingBuffer[1];
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <saveState+0x24>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <saveState+0x2c>)
 8000e1a:	6013      	str	r3, [r2, #0]
	GREEN_Timer = settingBuffer[2];
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <saveState+0x24>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <saveState+0x30>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	20000014 	.word	0x20000014
 8000e30:	20000020 	.word	0x20000020
 8000e34:	20000024 	.word	0x20000024
 8000e38:	20000028 	.word	0x20000028

08000e3c <increaseTimer>:

/*This function is to increase and make sure if it valid*/
void increaseTimer (int * buffer) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	if (++*buffer > 99)		*buffer = 1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b63      	cmp	r3, #99	@ 0x63
 8000e54:	dd02      	ble.n	8000e5c <increaseTimer+0x20>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
	...

08000e68 <resetSettingBuffer>:
	LED_Buffer [2] = second / 10;
	LED_Buffer [3] = second % 10;
}

/*Reset the buffer if the change we made is invalid*/
void resetSettingBuffer () {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	settingBuffer[RED] = RED_Timer;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <resetSettingBuffer+0x24>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <resetSettingBuffer+0x28>)
 8000e72:	6013      	str	r3, [r2, #0]
	settingBuffer[AMBER] = AMBER_Timer;
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <resetSettingBuffer+0x2c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <resetSettingBuffer+0x28>)
 8000e7a:	6053      	str	r3, [r2, #4]
	settingBuffer[GREEN] = GREEN_Timer;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <resetSettingBuffer+0x30>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a03      	ldr	r2, [pc, #12]	@ (8000e90 <resetSettingBuffer+0x28>)
 8000e82:	6093      	str	r3, [r2, #8]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000020 	.word	0x20000020
 8000e90:	20000014 	.word	0x20000014
 8000e94:	20000024 	.word	0x20000024
 8000e98:	20000028 	.word	0x20000028

08000e9c <modePreset>:

/*Preparing for the next state when we make state transition of FSM*/
void modePreset (enum FSM_Mode mode) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	Mode = mode;
 8000ea6:	4a10      	ldr	r2, [pc, #64]	@ (8000ee8 <modePreset+0x4c>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	7013      	strb	r3, [r2, #0]
	if (Mode != NORMAL) {
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <modePreset+0x4c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d010      	beq.n	8000ed6 <modePreset+0x3a>
		turnOffLight();
 8000eb4:	f7ff fefc 	bl	8000cb0 <turnOffLight>
		if (Mode != MANUAL)
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <modePreset+0x4c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d004      	beq.n	8000eca <modePreset+0x2e>
			displayMode(mode);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff24 	bl	8000d10 <displayMode>
 8000ec8:	e007      	b.n	8000eda <modePreset+0x3e>
		else {
			isLight1Manual = 1;
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <modePreset+0x50>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
			manualModeInit();
 8000ed0:	f000 f810 	bl	8000ef4 <manualModeInit>
 8000ed4:	e001      	b.n	8000eda <modePreset+0x3e>
		}
	} else {
		controllerInit ();
 8000ed6:	f7ff fe0b 	bl	8000af0 <controllerInit>
	}
	count = 0;
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <modePreset+0x54>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	2000000c 	.word	0x2000000c
 8000ef0:	200000dc 	.word	0x200000dc

08000ef4 <manualModeInit>:
void manualModeInit() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <manualModeInit+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <manualModeInit+0x54>)
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	b291      	uxth	r1, r2
 8000f02:	2201      	movs	r2, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 ff34 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <manualModeInit+0x50>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <manualModeInit+0x54>)
 8000f10:	6852      	ldr	r2, [r2, #4]
 8000f12:	b291      	uxth	r1, r2
 8000f14:	2200      	movs	r2, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 ff2b 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <manualModeInit+0x58>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <manualModeInit+0x5c>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	b291      	uxth	r1, r2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 ff22 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <manualModeInit+0x58>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <manualModeInit+0x5c>)
 8000f34:	6852      	ldr	r2, [r2, #4]
 8000f36:	b291      	uxth	r1, r2
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ff19 	bl	8002d72 <HAL_GPIO_WritePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000fc 	.word	0x200000fc
 8000f48:	2000010c 	.word	0x2000010c
 8000f4c:	20000104 	.word	0x20000104
 8000f50:	20000114 	.word	0x20000114

08000f54 <switchGreenLight>:
void switchGreenLight () {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if (isLight1Manual) {
 8000f58:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <switchGreenLight+0xb8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d024      	beq.n	8000faa <switchGreenLight+0x56>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <switchGreenLight+0xbc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2b      	ldr	r2, [pc, #172]	@ (8001014 <switchGreenLight+0xc0>)
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	b291      	uxth	r1, r2
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 ff00 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <switchGreenLight+0xbc>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <switchGreenLight+0xc0>)
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	b291      	uxth	r1, r2
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fef7 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <switchGreenLight+0xc4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a24      	ldr	r2, [pc, #144]	@ (800101c <switchGreenLight+0xc8>)
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 feee 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <switchGreenLight+0xc4>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	@ (800101c <switchGreenLight+0xc8>)
 8000f9c:	6852      	ldr	r2, [r2, #4]
 8000f9e:	b291      	uxth	r1, r2
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fee5 	bl	8002d72 <HAL_GPIO_WritePin>
 8000fa8:	e023      	b.n	8000ff2 <switchGreenLight+0x9e>
	}else {
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000faa:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <switchGreenLight+0xc4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <switchGreenLight+0xc8>)
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	b291      	uxth	r1, r2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fedb 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <switchGreenLight+0xc4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a16      	ldr	r2, [pc, #88]	@ (800101c <switchGreenLight+0xc8>)
 8000fc2:	6852      	ldr	r2, [r2, #4]
 8000fc4:	b291      	uxth	r1, r2
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fed2 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <switchGreenLight+0xbc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <switchGreenLight+0xc0>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	b291      	uxth	r1, r2
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fec9 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <switchGreenLight+0xbc>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <switchGreenLight+0xc0>)
 8000fe6:	6852      	ldr	r2, [r2, #4]
 8000fe8:	b291      	uxth	r1, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fec0 	bl	8002d72 <HAL_GPIO_WritePin>
	}
	isLight1Manual = !isLight1Manual;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <switchGreenLight+0xb8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2301      	moveq	r3, #1
 8000ffc:	2300      	movne	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4b02      	ldr	r3, [pc, #8]	@ (800100c <switchGreenLight+0xb8>)
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000000c 	.word	0x2000000c
 8001010:	200000fc 	.word	0x200000fc
 8001014:	2000010c 	.word	0x2000010c
 8001018:	20000104 	.word	0x20000104
 800101c:	20000114 	.word	0x20000114

08001020 <switchRoute>:
void switchRoute () {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	if (isLight1Manual) {
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <switchRoute+0x68>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d012      	beq.n	8001052 <switchRoute+0x32>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <switchRoute+0x6c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <switchRoute+0x70>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	b291      	uxth	r1, r2
 8001036:	2200      	movs	r2, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fe9a 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <switchRoute+0x6c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <switchRoute+0x70>)
 8001044:	6852      	ldr	r2, [r2, #4]
 8001046:	b291      	uxth	r1, r2
 8001048:	2201      	movs	r2, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fe91 	bl	8002d72 <HAL_GPIO_WritePin>
 8001050:	e011      	b.n	8001076 <switchRoute+0x56>
	} else {
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <switchRoute+0x74>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <switchRoute+0x78>)
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	b291      	uxth	r1, r2
 800105c:	2200      	movs	r2, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fe87 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <switchRoute+0x74>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <switchRoute+0x78>)
 800106a:	6852      	ldr	r2, [r2, #4]
 800106c:	b291      	uxth	r1, r2
 800106e:	2201      	movs	r2, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fe7e 	bl	8002d72 <HAL_GPIO_WritePin>
	}
	SCH_Add_Task(switchGreenLight, 2000, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <switchRoute+0x7c>)
 800107e:	f7ff f9ab 	bl	80003d8 <SCH_Add_Task>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000000c 	.word	0x2000000c
 800108c:	200000fc 	.word	0x200000fc
 8001090:	2000010c 	.word	0x2000010c
 8001094:	20000104 	.word	0x20000104
 8001098:	20000114 	.word	0x20000114
 800109c:	08000f55 	.word	0x08000f55

080010a0 <checkButton2LongPressed>:
void checkButton2LongPressed () {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	if (Is_Button_Long_Pressed(BUTTON2)) {
 80010a4:	2002      	movs	r0, #2
 80010a6:	f000 fa09 	bl	80014bc <Is_Button_Long_Pressed>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <checkButton2LongPressed+0x22>
		longPressedID = SCH_Add_Task(checkLongPressed, 0, 330);
 80010b0:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80010b4:	2100      	movs	r1, #0
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <checkButton2LongPressed+0x28>)
 80010b8:	f7ff f98e 	bl	80003d8 <SCH_Add_Task>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a03      	ldr	r2, [pc, #12]	@ (80010cc <checkButton2LongPressed+0x2c>)
 80010c0:	6013      	str	r3, [r2, #0]
	}
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	080010d1 	.word	0x080010d1
 80010cc:	20000030 	.word	0x20000030

080010d0 <checkLongPressed>:
void checkLongPressed() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	switch (Mode) {
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <checkLongPressed+0x38>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d00e      	beq.n	80010fa <checkLongPressed+0x2a>
 80010dc:	2b02      	cmp	r3, #2
 80010de:	dc10      	bgt.n	8001102 <checkLongPressed+0x32>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <checkLongPressed+0x1a>
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d004      	beq.n	80010f2 <checkLongPressed+0x22>
		break;
	case GREEN:
		increaseTimer(&settingBuffer[GREEN]);
		break;
	default:
		break;
 80010e8:	e00b      	b.n	8001102 <checkLongPressed+0x32>
		increaseTimer(&settingBuffer[RED]);
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <checkLongPressed+0x3c>)
 80010ec:	f7ff fea6 	bl	8000e3c <increaseTimer>
		break;
 80010f0:	e008      	b.n	8001104 <checkLongPressed+0x34>
		increaseTimer(&settingBuffer[AMBER]);
 80010f2:	4807      	ldr	r0, [pc, #28]	@ (8001110 <checkLongPressed+0x40>)
 80010f4:	f7ff fea2 	bl	8000e3c <increaseTimer>
		break;
 80010f8:	e004      	b.n	8001104 <checkLongPressed+0x34>
		increaseTimer(&settingBuffer[GREEN]);
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <checkLongPressed+0x44>)
 80010fc:	f7ff fe9e 	bl	8000e3c <increaseTimer>
		break;
 8001100:	e000      	b.n	8001104 <checkLongPressed+0x34>
		break;
 8001102:	bf00      	nop
	}
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000008 	.word	0x20000008
 800110c:	20000014 	.word	0x20000014
 8001110:	20000018 	.word	0x20000018
 8001114:	2000001c 	.word	0x2000001c

08001118 <traficLightFSM>:
void traficLightFSM () {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    if (++count >= blinkCount)	{
 800111c:	4b54      	ldr	r3, [pc, #336]	@ (8001270 <traficLightFSM+0x158>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a53      	ldr	r2, [pc, #332]	@ (8001270 <traficLightFSM+0x158>)
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b52      	ldr	r3, [pc, #328]	@ (8001270 <traficLightFSM+0x158>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b52      	ldr	r3, [pc, #328]	@ (8001274 <traficLightFSM+0x15c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	f2c0 8083 	blt.w	800123a <traficLightFSM+0x122>
        count = 0;
 8001134:	4b4e      	ldr	r3, [pc, #312]	@ (8001270 <traficLightFSM+0x158>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
        switch (Mode) {
 800113a:	4b4f      	ldr	r3, [pc, #316]	@ (8001278 <traficLightFSM+0x160>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b04      	cmp	r3, #4
 8001140:	d878      	bhi.n	8001234 <traficLightFSM+0x11c>
 8001142:	a201      	add	r2, pc, #4	@ (adr r2, 8001148 <traficLightFSM+0x30>)
 8001144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001148:	0800115d 	.word	0x0800115d
 800114c:	080011a7 	.word	0x080011a7
 8001150:	080011cd 	.word	0x080011cd
 8001154:	08001235 	.word	0x08001235
 8001158:	080011f3 	.word	0x080011f3
            case RED:
                HAL_GPIO_TogglePin (LIGHT1_Port[0], LIGHT1_Pin[0]);
 800115c:	4b47      	ldr	r3, [pc, #284]	@ (800127c <traficLightFSM+0x164>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <traficLightFSM+0x168>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	b292      	uxth	r2, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fe1a 	bl	8002da2 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <traficLightFSM+0x164>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a43      	ldr	r2, [pc, #268]	@ (8001280 <traficLightFSM+0x168>)
 8001174:	6852      	ldr	r2, [r2, #4]
 8001176:	b292      	uxth	r2, r2
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fe11 	bl	8002da2 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[0], LIGHT2_Pin[0]);
 8001180:	4b40      	ldr	r3, [pc, #256]	@ (8001284 <traficLightFSM+0x16c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a40      	ldr	r2, [pc, #256]	@ (8001288 <traficLightFSM+0x170>)
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	b292      	uxth	r2, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fe08 	bl	8002da2 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 8001192:	4b3c      	ldr	r3, [pc, #240]	@ (8001284 <traficLightFSM+0x16c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a3c      	ldr	r2, [pc, #240]	@ (8001288 <traficLightFSM+0x170>)
 8001198:	6852      	ldr	r2, [r2, #4]
 800119a:	b292      	uxth	r2, r2
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fdff 	bl	8002da2 <HAL_GPIO_TogglePin>
                break;
 80011a4:	e049      	b.n	800123a <traficLightFSM+0x122>
            case AMBER:
                HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 80011a6:	4b35      	ldr	r3, [pc, #212]	@ (800127c <traficLightFSM+0x164>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a35      	ldr	r2, [pc, #212]	@ (8001280 <traficLightFSM+0x168>)
 80011ac:	6852      	ldr	r2, [r2, #4]
 80011ae:	b292      	uxth	r2, r2
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 fdf5 	bl	8002da2 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <traficLightFSM+0x16c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a32      	ldr	r2, [pc, #200]	@ (8001288 <traficLightFSM+0x170>)
 80011be:	6852      	ldr	r2, [r2, #4]
 80011c0:	b292      	uxth	r2, r2
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fdec 	bl	8002da2 <HAL_GPIO_TogglePin>
                break;
 80011ca:	e036      	b.n	800123a <traficLightFSM+0x122>
            case GREEN:
                HAL_GPIO_TogglePin (LIGHT1_Port[0], LIGHT1_Pin[0]);
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <traficLightFSM+0x164>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a2b      	ldr	r2, [pc, #172]	@ (8001280 <traficLightFSM+0x168>)
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	b292      	uxth	r2, r2
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fde2 	bl	8002da2 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[0], LIGHT2_Pin[0]);
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <traficLightFSM+0x16c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <traficLightFSM+0x170>)
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	b292      	uxth	r2, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fdd9 	bl	8002da2 <HAL_GPIO_TogglePin>
                break;
 80011f0:	e023      	b.n	800123a <traficLightFSM+0x122>
            case SLOWDOWN:
            	if (++amber_blinking_count >= amberBlinkCount) {
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <traficLightFSM+0x174>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <traficLightFSM+0x174>)
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <traficLightFSM+0x174>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <traficLightFSM+0x178>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	db17      	blt.n	8001238 <traficLightFSM+0x120>
            		amber_blinking_count = 0;
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <traficLightFSM+0x174>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <traficLightFSM+0x164>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <traficLightFSM+0x168>)
 8001214:	6852      	ldr	r2, [r2, #4]
 8001216:	b292      	uxth	r2, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fdc1 	bl	8002da2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <traficLightFSM+0x16c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <traficLightFSM+0x170>)
 8001226:	6852      	ldr	r2, [r2, #4]
 8001228:	b292      	uxth	r2, r2
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fdb8 	bl	8002da2 <HAL_GPIO_TogglePin>
            	}
                break;
 8001232:	e001      	b.n	8001238 <traficLightFSM+0x120>
            default:
                break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <traficLightFSM+0x122>
                break;
 8001238:	bf00      	nop
        }
    }
    if (++led_count >= 4*scanCount)
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <traficLightFSM+0x17c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <traficLightFSM+0x17c>)
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <traficLightFSM+0x17c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <traficLightFSM+0x180>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	429a      	cmp	r2, r3
 8001250:	db02      	blt.n	8001258 <traficLightFSM+0x140>
    	led_count = 0;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <traficLightFSM+0x17c>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    if (Mode == NORMAL)		milliSec += TIMER;
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <traficLightFSM+0x160>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d104      	bne.n	800126a <traficLightFSM+0x152>
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <traficLightFSM+0x184>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <traficLightFSM+0x184>)
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000dc 	.word	0x200000dc
 8001274:	20000038 	.word	0x20000038
 8001278:	20000008 	.word	0x20000008
 800127c:	200000fc 	.word	0x200000fc
 8001280:	2000010c 	.word	0x2000010c
 8001284:	20000104 	.word	0x20000104
 8001288:	20000114 	.word	0x20000114
 800128c:	200000e4 	.word	0x200000e4
 8001290:	2000003c 	.word	0x2000003c
 8001294:	200000e0 	.word	0x200000e0
 8001298:	20000034 	.word	0x20000034
 800129c:	200000e8 	.word	0x200000e8

080012a0 <Button_Init>:
	ButtonLongPressedState [NO_BUTTONS],
	sample = 0;

void Button_Init(GPIO_TypeDef * Port1, int Pin1,
				 GPIO_TypeDef * Port2, int Pin2,
				 GPIO_TypeDef * Port3, int Pin3) {
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
	ButtonPort [0] = Port1;
 80012ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001328 <Button_Init+0x88>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6013      	str	r3, [r2, #0]
	ButtonPin [0] = Pin1;
 80012b4:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <Button_Init+0x8c>)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	6013      	str	r3, [r2, #0]
	ButtonPort [1] = Port2;
 80012ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <Button_Init+0x88>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6053      	str	r3, [r2, #4]
	ButtonPin [1] = Pin2;
 80012c0:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <Button_Init+0x8c>)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6053      	str	r3, [r2, #4]
	ButtonPort [2] = Port3;
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <Button_Init+0x88>)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	6093      	str	r3, [r2, #8]
	ButtonPin [2] = Pin3;
 80012cc:	4a17      	ldr	r2, [pc, #92]	@ (800132c <Button_Init+0x8c>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	6093      	str	r3, [r2, #8]

	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e01d      	b.n	8001314 <Button_Init+0x74>
		for (int idx = 0; idx < NO_DEBOUNCE_SAMPLE; idx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e00a      	b.n	80012f4 <Button_Init+0x54>
			input_buffer[buttonIdx][idx] = 1;
 80012de:	4914      	ldr	r1, [pc, #80]	@ (8001330 <Button_Init+0x90>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	009a      	lsls	r2, r3, #2
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	2201      	movs	r2, #1
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int idx = 0; idx < NO_DEBOUNCE_SAMPLE; idx++)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3301      	adds	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	ddf1      	ble.n	80012de <Button_Init+0x3e>
		ButtonState[buttonIdx] = BUTTON_RELEASED;
 80012fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <Button_Init+0x94>)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2100      	movs	r1, #0
 8001300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ButtonLongPressedState[buttonIdx] = BUTTON_RELEASED;
 8001304:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <Button_Init+0x98>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2100      	movs	r1, #0
 800130a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++) {
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b02      	cmp	r3, #2
 8001318:	ddde      	ble.n	80012d8 <Button_Init+0x38>
	}
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000011c 	.word	0x2000011c
 800132c:	20000128 	.word	0x20000128
 8001330:	20000134 	.word	0x20000134
 8001334:	20000164 	.word	0x20000164
 8001338:	20000170 	.word	0x20000170

0800133c <Button_Read>:

void Button_Read () {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
	sample++;
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <Button_Read+0x134>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a49      	ldr	r2, [pc, #292]	@ (8001470 <Button_Read+0x134>)
 800134a:	6013      	str	r3, [r2, #0]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++){
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	e085      	b.n	800145e <Button_Read+0x122>
		int offstate = 0, buttonstate = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]

		for (int idx = 1; idx < NO_DEBOUNCE_SAMPLE; idx++) {
 800135a:	2301      	movs	r3, #1
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	e022      	b.n	80013a6 <Button_Read+0x6a>
			input_buffer [buttonIdx] [idx - 1] = input_buffer [buttonIdx] [idx];
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	4843      	ldr	r0, [pc, #268]	@ (8001474 <Button_Read+0x138>)
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	0091      	lsls	r1, r2, #2
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	440a      	add	r2, r1
 800136e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001372:	4840      	ldr	r0, [pc, #256]	@ (8001474 <Button_Read+0x138>)
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	0089      	lsls	r1, r1, #2
 8001378:	440b      	add	r3, r1
 800137a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			offstate = (offstate << 1) | 1;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
			buttonstate = (buttonstate << 1) | input_buffer [buttonIdx] [idx - 1];
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	005a      	lsls	r2, r3, #1
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4838      	ldr	r0, [pc, #224]	@ (8001474 <Button_Read+0x138>)
 8001392:	68f9      	ldr	r1, [r7, #12]
 8001394:	0089      	lsls	r1, r1, #2
 8001396:	440b      	add	r3, r1
 8001398:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800139c:	4313      	orrs	r3, r2
 800139e:	607b      	str	r3, [r7, #4]
		for (int idx = 1; idx < NO_DEBOUNCE_SAMPLE; idx++) {
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	ddd9      	ble.n	8001360 <Button_Read+0x24>
		}

		input_buffer [buttonIdx] [NO_DEBOUNCE_SAMPLE - 1] = HAL_GPIO_ReadPin(ButtonPort[buttonIdx], ButtonPin[buttonIdx]);
 80013ac:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <Button_Read+0x13c>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b4:	4931      	ldr	r1, [pc, #196]	@ (800147c <Button_Read+0x140>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f001 fcbf 	bl	8002d44 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001474 <Button_Read+0x138>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	330c      	adds	r3, #12
 80013d4:	6019      	str	r1, [r3, #0]
		offstate = (offstate << 1) | 1;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
		buttonstate = (buttonstate << 1) | input_buffer [buttonIdx] [NO_DEBOUNCE_SAMPLE - 1];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	005a      	lsls	r2, r3, #1
 80013e4:	4923      	ldr	r1, [pc, #140]	@ (8001474 <Button_Read+0x138>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	330c      	adds	r3, #12
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	607b      	str	r3, [r7, #4]

		if (sample >= NO_DEBOUNCE_SAMPLE) {
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <Button_Read+0x134>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	dd2d      	ble.n	8001458 <Button_Read+0x11c>
			if (buttonstate == offstate && ButtonState [buttonIdx] == BUTTON_PRESSED) {
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	429a      	cmp	r2, r3
 8001402:	d10f      	bne.n	8001424 <Button_Read+0xe8>
 8001404:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <Button_Read+0x144>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d109      	bne.n	8001424 <Button_Read+0xe8>
				ButtonLongPressedState [buttonIdx] = BUTTON_RELEASED;
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <Button_Read+0x148>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2100      	movs	r1, #0
 8001416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				ButtonState [buttonIdx] = BUTTON_RELEASED;
 800141a:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <Button_Read+0x144>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2100      	movs	r1, #0
 8001420:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (buttonstate == 0) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d110      	bne.n	800144c <Button_Read+0x110>
				if (ButtonState [buttonIdx] == BUTTON_PRESSED)
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <Button_Read+0x144>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d105      	bne.n	8001442 <Button_Read+0x106>
					ButtonLongPressedState [buttonIdx] = BUTTON_PRESSED;
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <Button_Read+0x148>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2101      	movs	r1, #1
 800143c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001440:	e004      	b.n	800144c <Button_Read+0x110>
				else
					ButtonState [buttonIdx] = BUTTON_PRESSED;
 8001442:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <Button_Read+0x144>)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2101      	movs	r1, #1
 8001448:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (buttonIdx == NO_BUTTONS - 1)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d102      	bne.n	8001458 <Button_Read+0x11c>
				sample = NO_DEBOUNCE_SAMPLE - 1;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <Button_Read+0x134>)
 8001454:	2203      	movs	r2, #3
 8001456:	601a      	str	r2, [r3, #0]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++){
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b02      	cmp	r3, #2
 8001462:	f77f af76 	ble.w	8001352 <Button_Read+0x16>
		}
	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000017c 	.word	0x2000017c
 8001474:	20000134 	.word	0x20000134
 8001478:	2000011c 	.word	0x2000011c
 800147c:	20000128 	.word	0x20000128
 8001480:	20000164 	.word	0x20000164
 8001484:	20000170 	.word	0x20000170

08001488 <Is_Button_Pressed>:

int Is_Button_Pressed (int num) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if (num < 1 || num > NO_BUTTONS)		return -1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dd02      	ble.n	800149c <Is_Button_Pressed+0x14>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b03      	cmp	r3, #3
 800149a:	dd02      	ble.n	80014a2 <Is_Button_Pressed+0x1a>
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	e004      	b.n	80014ac <Is_Button_Pressed+0x24>
	return ButtonState [num - 1];
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <Is_Button_Pressed+0x30>)
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000164 	.word	0x20000164

080014bc <Is_Button_Long_Pressed>:

int Is_Button_Long_Pressed (int num) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (num < 1 || num > NO_BUTTONS)		return -1;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dd02      	ble.n	80014d0 <Is_Button_Long_Pressed+0x14>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	dd02      	ble.n	80014d6 <Is_Button_Long_Pressed+0x1a>
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e004      	b.n	80014e0 <Is_Button_Long_Pressed+0x24>
	return ButtonLongPressedState [num - 1];
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <Is_Button_Long_Pressed+0x30>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000170 	.word	0x20000170

080014f0 <printLightNotify>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printLightNotify () {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b0a5      	sub	sp, #148	@ 0x94
 80014f4:	af00      	add	r7, sp, #0
	int col = 1, row = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80014fa:	2301      	movs	r3, #1
 80014fc:	663b      	str	r3, [r7, #96]	@ 0x60
	if (changeModeFlag) {
 80014fe:	4bab      	ldr	r3, [pc, #684]	@ (80017ac <printLightNotify+0x2bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 821a 	beq.w	800193c <printLightNotify+0x44c>
		char mode[] = "TIMER:";
 8001508:	4aa9      	ldr	r2, [pc, #676]	@ (80017b0 <printLightNotify+0x2c0>)
 800150a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001512:	6018      	str	r0, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	8019      	strh	r1, [r3, #0]
 8001518:	3302      	adds	r3, #2
 800151a:	0c0a      	lsrs	r2, r1, #16
 800151c:	701a      	strb	r2, [r3, #0]
		changeModeFlag = 0;
 800151e:	4ba3      	ldr	r3, [pc, #652]	@ (80017ac <printLightNotify+0x2bc>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		clearLCD();
 8001524:	f7fe fed0 	bl	80002c8 <clearLCD>
		switch (Mode) {
 8001528:	4ba2      	ldr	r3, [pc, #648]	@ (80017b4 <printLightNotify+0x2c4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b05      	cmp	r3, #5
 800152e:	f200 8204 	bhi.w	800193a <printLightNotify+0x44a>
 8001532:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <printLightNotify+0x48>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800162b 	.word	0x0800162b
 800153c:	080016f5 	.word	0x080016f5
 8001540:	080017cd 	.word	0x080017cd
 8001544:	08001551 	.word	0x08001551
 8001548:	08001883 	.word	0x08001883
 800154c:	080018e1 	.word	0x080018e1
		case NORMAL:
			char text1[] = "Light 1";
 8001550:	4a99      	ldr	r2, [pc, #612]	@ (80017b8 <printLightNotify+0x2c8>)
 8001552:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155a:	e883 0003 	stmia.w	r3, {r0, r1}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 800155e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001560:	3b01      	subs	r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	b2da      	uxtb	r2, r3
 8001568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800157a:	b25b      	sxtb	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	2300      	movs	r3, #0
 8001580:	214e      	movs	r1, #78	@ 0x4e
 8001582:	488e      	ldr	r0, [pc, #568]	@ (80017bc <printLightNotify+0x2cc>)
 8001584:	f7fe fde2 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(text1)/sizeof(text1[0]) - 1; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800158e:	e00f      	b.n	80015b0 <printLightNotify+0xc0>
				I2C_Send(&hi2c1, (0x27 << 1), text1[i], RS);
 8001590:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	214e      	movs	r1, #78	@ 0x4e
 80015a0:	4886      	ldr	r0, [pc, #536]	@ (80017bc <printLightNotify+0x2cc>)
 80015a2:	f7fe fdd3 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(text1)/sizeof(text1[0]) - 1; i++)
 80015a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015aa:	3301      	adds	r3, #1
 80015ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80015b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d9eb      	bls.n	8001590 <printLightNotify+0xa0>

			char text2[] = "Light 2";
 80015b8:	4a81      	ldr	r2, [pc, #516]	@ (80017c0 <printLightNotify+0x2d0>)
 80015ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c2:	e883 0003 	stmia.w	r3, {r0, r1}
			col = 10; row = 1;
 80015c6:	230a      	movs	r3, #10
 80015c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80015ca:	2301      	movs	r3, #1
 80015cc:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80015ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	2300      	movs	r3, #0
 80015f0:	214e      	movs	r1, #78	@ 0x4e
 80015f2:	4872      	ldr	r0, [pc, #456]	@ (80017bc <printLightNotify+0x2cc>)
 80015f4:	f7fe fdaa 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(text2)/sizeof(text2[0]) - 1; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015fe:	e00f      	b.n	8001620 <printLightNotify+0x130>
				I2C_Send(&hi2c1, (0x27 << 1), text2[i], RS);
 8001600:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001608:	4413      	add	r3, r2
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	214e      	movs	r1, #78	@ 0x4e
 8001610:	486a      	ldr	r0, [pc, #424]	@ (80017bc <printLightNotify+0x2cc>)
 8001612:	f7fe fd9b 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(text2)/sizeof(text2[0]) - 1; i++)
 8001616:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800161a:	3301      	adds	r3, #1
 800161c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001624:	2b06      	cmp	r3, #6
 8001626:	d9eb      	bls.n	8001600 <printLightNotify+0x110>
			break;
 8001628:	e188      	b.n	800193c <printLightNotify+0x44c>
		case RED:
			char textRED[] = "RED SETTING";
 800162a:	4a66      	ldr	r2, [pc, #408]	@ (80017c4 <printLightNotify+0x2d4>)
 800162c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001630:	ca07      	ldmia	r2, {r0, r1, r2}
 8001632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001638:	3b01      	subs	r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	b2da      	uxtb	r2, r3
 8001640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b25b      	sxtb	r3, r3
 800164e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001652:	b25b      	sxtb	r3, r3
 8001654:	b2da      	uxtb	r2, r3
 8001656:	2300      	movs	r3, #0
 8001658:	214e      	movs	r1, #78	@ 0x4e
 800165a:	4858      	ldr	r0, [pc, #352]	@ (80017bc <printLightNotify+0x2cc>)
 800165c:	f7fe fd76 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textRED)/sizeof(textRED[0]) - 1; i++)
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001666:	e00f      	b.n	8001688 <printLightNotify+0x198>
				I2C_Send(&hi2c1, (0x27 << 1), textRED[i], RS);
 8001668:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800166c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001670:	4413      	add	r3, r2
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	2301      	movs	r3, #1
 8001676:	214e      	movs	r1, #78	@ 0x4e
 8001678:	4850      	ldr	r0, [pc, #320]	@ (80017bc <printLightNotify+0x2cc>)
 800167a:	f7fe fd67 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textRED)/sizeof(textRED[0]) - 1; i++)
 800167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001682:	3301      	adds	r3, #1
 8001684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800168c:	2b0a      	cmp	r3, #10
 800168e:	d9eb      	bls.n	8001668 <printLightNotify+0x178>
			col = 1; row = 2;
 8001690:	2301      	movs	r3, #1
 8001692:	667b      	str	r3, [r7, #100]	@ 0x64
 8001694:	2302      	movs	r3, #2
 8001696:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800169a:	3b01      	subs	r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	214e      	movs	r1, #78	@ 0x4e
 80016bc:	483f      	ldr	r0, [pc, #252]	@ (80017bc <printLightNotify+0x2cc>)
 80016be:	f7fe fd45 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016c8:	e00f      	b.n	80016ea <printLightNotify+0x1fa>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 80016ca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80016ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016d2:	4413      	add	r3, r2
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	214e      	movs	r1, #78	@ 0x4e
 80016da:	4838      	ldr	r0, [pc, #224]	@ (80017bc <printLightNotify+0x2cc>)
 80016dc:	f7fe fd36 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 80016e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d9eb      	bls.n	80016ca <printLightNotify+0x1da>
			break;
 80016f2:	e123      	b.n	800193c <printLightNotify+0x44c>
		case AMBER:
			char textAMBER[] = "AMBER SETTING";
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <printLightNotify+0x2d8>)
 80016f6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80016fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fc:	c407      	stmia	r4!, {r0, r1, r2}
 80016fe:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001702:	3b01      	subs	r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	019b      	lsls	r3, r3, #6
 8001708:	b2da      	uxtb	r2, r3
 800170a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4413      	add	r3, r2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2da      	uxtb	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	214e      	movs	r1, #78	@ 0x4e
 8001724:	4825      	ldr	r0, [pc, #148]	@ (80017bc <printLightNotify+0x2cc>)
 8001726:	f7fe fd11 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textAMBER)/sizeof(textAMBER[0]) - 1; i++)
 800172a:	2300      	movs	r3, #0
 800172c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800172e:	e00c      	b.n	800174a <printLightNotify+0x25a>
				I2C_Send(&hi2c1, (0x27 << 1), textAMBER[i], RS);
 8001730:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001736:	4413      	add	r3, r2
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	214e      	movs	r1, #78	@ 0x4e
 800173e:	481f      	ldr	r0, [pc, #124]	@ (80017bc <printLightNotify+0x2cc>)
 8001740:	f7fe fd04 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textAMBER)/sizeof(textAMBER[0]) - 1; i++)
 8001744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001746:	3301      	adds	r3, #1
 8001748:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800174a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d9ef      	bls.n	8001730 <printLightNotify+0x240>
			col = 1; row = 2;
 8001750:	2301      	movs	r3, #1
 8001752:	667b      	str	r3, [r7, #100]	@ 0x64
 8001754:	2302      	movs	r3, #2
 8001756:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800175a:	3b01      	subs	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	019b      	lsls	r3, r3, #6
 8001760:	b2da      	uxtb	r2, r3
 8001762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4413      	add	r3, r2
 8001768:	b2db      	uxtb	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001774:	b25b      	sxtb	r3, r3
 8001776:	b2da      	uxtb	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	214e      	movs	r1, #78	@ 0x4e
 800177c:	480f      	ldr	r0, [pc, #60]	@ (80017bc <printLightNotify+0x2cc>)
 800177e:	f7fe fce5 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001786:	e00c      	b.n	80017a2 <printLightNotify+0x2b2>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 8001788:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800178c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800178e:	4413      	add	r3, r2
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	214e      	movs	r1, #78	@ 0x4e
 8001796:	4809      	ldr	r0, [pc, #36]	@ (80017bc <printLightNotify+0x2cc>)
 8001798:	f7fe fcd8 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 800179c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800179e:	3301      	adds	r3, #1
 80017a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d9ef      	bls.n	8001788 <printLightNotify+0x298>
			break;
 80017a8:	e0c8      	b.n	800193c <printLightNotify+0x44c>
 80017aa:	bf00      	nop
 80017ac:	20000004 	.word	0x20000004
 80017b0:	08004bd4 	.word	0x08004bd4
 80017b4:	20000008 	.word	0x20000008
 80017b8:	08004bdc 	.word	0x08004bdc
 80017bc:	20000180 	.word	0x20000180
 80017c0:	08004be4 	.word	0x08004be4
 80017c4:	08004bec 	.word	0x08004bec
 80017c8:	08004bf8 	.word	0x08004bf8
		case GREEN:
			char textGREEN[] = "GREEN SETTING";
 80017cc:	4b5d      	ldr	r3, [pc, #372]	@ (8001944 <printLightNotify+0x454>)
 80017ce:	f107 041c 	add.w	r4, r7, #28
 80017d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d4:	c407      	stmia	r4!, {r0, r1, r2}
 80017d6:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80017d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017da:	3b01      	subs	r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	214e      	movs	r1, #78	@ 0x4e
 80017fc:	4852      	ldr	r0, [pc, #328]	@ (8001948 <printLightNotify+0x458>)
 80017fe:	f7fe fca5 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textGREEN)/sizeof(textGREEN[0]) - 1; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	677b      	str	r3, [r7, #116]	@ 0x74
 8001806:	e00c      	b.n	8001822 <printLightNotify+0x332>
				I2C_Send(&hi2c1, (0x27 << 1), textGREEN[i], RS);
 8001808:	f107 021c 	add.w	r2, r7, #28
 800180c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800180e:	4413      	add	r3, r2
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	214e      	movs	r1, #78	@ 0x4e
 8001816:	484c      	ldr	r0, [pc, #304]	@ (8001948 <printLightNotify+0x458>)
 8001818:	f7fe fc98 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textGREEN)/sizeof(textGREEN[0]) - 1; i++)
 800181c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181e:	3301      	adds	r3, #1
 8001820:	677b      	str	r3, [r7, #116]	@ 0x74
 8001822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001824:	2b0c      	cmp	r3, #12
 8001826:	d9ef      	bls.n	8001808 <printLightNotify+0x318>
			col = 1; row = 2;
 8001828:	2301      	movs	r3, #1
 800182a:	667b      	str	r3, [r7, #100]	@ 0x64
 800182c:	2302      	movs	r3, #2
 800182e:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001832:	3b01      	subs	r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	b2da      	uxtb	r2, r3
 800183a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	b25b      	sxtb	r3, r3
 8001848:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800184c:	b25b      	sxtb	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	2300      	movs	r3, #0
 8001852:	214e      	movs	r1, #78	@ 0x4e
 8001854:	483c      	ldr	r0, [pc, #240]	@ (8001948 <printLightNotify+0x458>)
 8001856:	f7fe fc79 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	673b      	str	r3, [r7, #112]	@ 0x70
 800185e:	e00c      	b.n	800187a <printLightNotify+0x38a>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 8001860:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001864:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001866:	4413      	add	r3, r2
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	214e      	movs	r1, #78	@ 0x4e
 800186e:	4836      	ldr	r0, [pc, #216]	@ (8001948 <printLightNotify+0x458>)
 8001870:	f7fe fc6c 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001876:	3301      	adds	r3, #1
 8001878:	673b      	str	r3, [r7, #112]	@ 0x70
 800187a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800187c:	2b05      	cmp	r3, #5
 800187e:	d9ef      	bls.n	8001860 <printLightNotify+0x370>
			break;
 8001880:	e05c      	b.n	800193c <printLightNotify+0x44c>
		case SLOWDOWN:
			char textSLOWDOWN[] = "SLOWDOWN MODE";
 8001882:	4b32      	ldr	r3, [pc, #200]	@ (800194c <printLightNotify+0x45c>)
 8001884:	f107 040c 	add.w	r4, r7, #12
 8001888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188a:	c407      	stmia	r4!, {r0, r1, r2}
 800188c:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 800188e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001890:	3b01      	subs	r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	b2da      	uxtb	r2, r3
 8001898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	2300      	movs	r3, #0
 80018b0:	214e      	movs	r1, #78	@ 0x4e
 80018b2:	4825      	ldr	r0, [pc, #148]	@ (8001948 <printLightNotify+0x458>)
 80018b4:	f7fe fc4a 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textSLOWDOWN)/sizeof(textSLOWDOWN[0]) - 1; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018bc:	e00c      	b.n	80018d8 <printLightNotify+0x3e8>
				I2C_Send(&hi2c1, (0x27 << 1), textSLOWDOWN[i], RS);
 80018be:	f107 020c 	add.w	r2, r7, #12
 80018c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018c4:	4413      	add	r3, r2
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	214e      	movs	r1, #78	@ 0x4e
 80018cc:	481e      	ldr	r0, [pc, #120]	@ (8001948 <printLightNotify+0x458>)
 80018ce:	f7fe fc3d 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textSLOWDOWN)/sizeof(textSLOWDOWN[0]) - 1; i++)
 80018d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018d4:	3301      	adds	r3, #1
 80018d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d9ef      	bls.n	80018be <printLightNotify+0x3ce>
			break;
 80018de:	e02d      	b.n	800193c <printLightNotify+0x44c>
		case MANUAL:
			char textMANUAL[] = "MANUAL MODE";
 80018e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001950 <printLightNotify+0x460>)
 80018e2:	463b      	mov	r3, r7
 80018e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80018ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001906:	b25b      	sxtb	r3, r3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	2300      	movs	r3, #0
 800190c:	214e      	movs	r1, #78	@ 0x4e
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <printLightNotify+0x458>)
 8001910:	f7fe fc1c 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textMANUAL)/sizeof(textMANUAL[0]) - 1; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001918:	e00b      	b.n	8001932 <printLightNotify+0x442>
				I2C_Send(&hi2c1, (0x27 << 1), textMANUAL[i], RS);
 800191a:	463a      	mov	r2, r7
 800191c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800191e:	4413      	add	r3, r2
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	214e      	movs	r1, #78	@ 0x4e
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <printLightNotify+0x458>)
 8001928:	f7fe fc10 	bl	800014c <I2C_Send>
			for (int i = 0; i < sizeof(textMANUAL)/sizeof(textMANUAL[0]) - 1; i++)
 800192c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800192e:	3301      	adds	r3, #1
 8001930:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001934:	2b0a      	cmp	r3, #10
 8001936:	d9f0      	bls.n	800191a <printLightNotify+0x42a>
			break;
 8001938:	e000      	b.n	800193c <printLightNotify+0x44c>
		default:
			break;
 800193a:	bf00      	nop
		}
	}
}
 800193c:	bf00      	nop
 800193e:	3794      	adds	r7, #148	@ 0x94
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	08004c08 	.word	0x08004c08
 8001948:	20000180 	.word	0x20000180
 800194c:	08004c18 	.word	0x08004c18
 8001950:	08004c28 	.word	0x08004c28

08001954 <printLight1Mode>:

void printLight1Mode () {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <printLight1Mode+0x6c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d12a      	bne.n	80019b8 <printLight1Mode+0x64>
		int col = 1, row = 2;
 8001962:	2301      	movs	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	2302      	movs	r3, #2
 8001968:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3b01      	subs	r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	b2da      	uxtb	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4413      	add	r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001986:	b25b      	sxtb	r3, r3
 8001988:	b2da      	uxtb	r2, r3
 800198a:	2300      	movs	r3, #0
 800198c:	214e      	movs	r1, #78	@ 0x4e
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <printLight1Mode+0x70>)
 8001990:	f7fe fbdc 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(light1Mode)/sizeof(light1Mode[0]) - 1; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e00b      	b.n	80019b2 <printLight1Mode+0x5e>
			I2C_Send(&hi2c1, (0x27 << 1), light1Mode[i], RS);
 800199a:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <printLight1Mode+0x74>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	214e      	movs	r1, #78	@ 0x4e
 80019a6:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <printLight1Mode+0x70>)
 80019a8:	f7fe fbd0 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(light1Mode)/sizeof(light1Mode[0]) - 1; i++)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d9f0      	bls.n	800199a <printLight1Mode+0x46>
	}
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000180 	.word	0x20000180
 80019c8:	20000040 	.word	0x20000040

080019cc <printLight2Mode>:
void printLight2Mode () {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 80019d2:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <printLight2Mode+0x6c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d12a      	bne.n	8001a30 <printLight2Mode+0x64>
		int col = 10, row = 2;
 80019da:	230a      	movs	r3, #10
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	2302      	movs	r3, #2
 80019e0:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	214e      	movs	r1, #78	@ 0x4e
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <printLight2Mode+0x70>)
 8001a08:	f7fe fba0 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(light2Mode)/sizeof(light2Mode[0]) - 1; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e00b      	b.n	8001a2a <printLight2Mode+0x5e>
			I2C_Send(&hi2c1, (0x27 << 1), light2Mode[i], RS);
 8001a12:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <printLight2Mode+0x74>)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	214e      	movs	r1, #78	@ 0x4e
 8001a1e:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <printLight2Mode+0x70>)
 8001a20:	f7fe fb94 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(light2Mode)/sizeof(light2Mode[0]) - 1; i++)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d9f0      	bls.n	8001a12 <printLight2Mode+0x46>
	}
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000180 	.word	0x20000180
 8001a40:	20000044 	.word	0x20000044

08001a44 <printLight1Timer>:
void printLight1Timer () {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
	uint8_t timer[] = "00";
 8001a4a:	4aae      	ldr	r2, [pc, #696]	@ (8001d04 <printLight1Timer+0x2c0>)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4611      	mov	r1, r2
 8001a52:	8019      	strh	r1, [r3, #0]
 8001a54:	3302      	adds	r3, #2
 8001a56:	0c12      	lsrs	r2, r2, #16
 8001a58:	701a      	strb	r2, [r3, #0]
	int col = 8, row = 2;
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	60bb      	str	r3, [r7, #8]
	switch (Mode){
 8001a62:	4ba9      	ldr	r3, [pc, #676]	@ (8001d08 <printLight1Timer+0x2c4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	f200 8146 	bhi.w	8001cf8 <printLight1Timer+0x2b4>
 8001a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <printLight1Timer+0x30>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001b5b 	.word	0x08001b5b
 8001a78:	08001be5 	.word	0x08001be5
 8001a7c:	08001c6f 	.word	0x08001c6f
 8001a80:	08001a85 	.word	0x08001a85
	case NORMAL:
		if (lightController.isLight1){
 8001a84:	4ba1      	ldr	r3, [pc, #644]	@ (8001d0c <printLight1Timer+0x2c8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01d      	beq.n	8001ac8 <printLight1Timer+0x84>
			timer[0] = '0' + (second / 10);
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d10 <printLight1Timer+0x2cc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4aa0      	ldr	r2, [pc, #640]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001a92:	fb82 1203 	smull	r1, r2, r2, r3
 8001a96:	1092      	asrs	r2, r2, #2
 8001a98:	17db      	asrs	r3, r3, #31
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3330      	adds	r3, #48	@ 0x30
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	713b      	strb	r3, [r7, #4]
			timer[1] = '0' + (second % 10);
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d10 <printLight1Timer+0x2cc>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b9a      	ldr	r3, [pc, #616]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8001aae:	1099      	asrs	r1, r3, #2
 8001ab0:	17d3      	asrs	r3, r2, #31
 8001ab2:	1ac9      	subs	r1, r1, r3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	1ad1      	subs	r1, r2, r3
 8001abe:	b2cb      	uxtb	r3, r1
 8001ac0:	3330      	adds	r3, #48	@ 0x30
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	717b      	strb	r3, [r7, #5]
 8001ac6:	e01c      	b.n	8001b02 <printLight1Timer+0xbe>
		} else {
			timer[0] = '0' + (redLightTimer / 10);
 8001ac8:	4b93      	ldr	r3, [pc, #588]	@ (8001d18 <printLight1Timer+0x2d4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a91      	ldr	r2, [pc, #580]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	1092      	asrs	r2, r2, #2
 8001ad4:	17db      	asrs	r3, r3, #31
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	713b      	strb	r3, [r7, #4]
			timer[1] = '0' + (redLightTimer % 10);
 8001ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8001d18 <printLight1Timer+0x2d4>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b8b      	ldr	r3, [pc, #556]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001ae6:	fb83 1302 	smull	r1, r3, r3, r2
 8001aea:	1099      	asrs	r1, r3, #2
 8001aec:	17d3      	asrs	r3, r2, #31
 8001aee:	1ac9      	subs	r1, r1, r3
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	1ad1      	subs	r1, r2, r3
 8001afa:	b2cb      	uxtb	r3, r1
 8001afc:	3330      	adds	r3, #48	@ 0x30
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	717b      	strb	r3, [r7, #5]
		}
		col = 4; row = 2;
 8001b02:	2304      	movs	r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	2302      	movs	r3, #2
 8001b08:	60bb      	str	r3, [r7, #8]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	214e      	movs	r1, #78	@ 0x4e
 8001b2e:	487b      	ldr	r0, [pc, #492]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001b30:	f7fe fb0c 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	e00b      	b.n	8001b52 <printLight1Timer+0x10e>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001b3a:	1d3a      	adds	r2, r7, #4
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	214e      	movs	r1, #78	@ 0x4e
 8001b46:	4875      	ldr	r0, [pc, #468]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001b48:	f7fe fb00 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d9f0      	bls.n	8001b3a <printLight1Timer+0xf6>
		break;
 8001b58:	e0cf      	b.n	8001cfa <printLight1Timer+0x2b6>
	case RED:
		timer[0] = '0' + (settingBuffer[RED] / 10);
 8001b5a:	4b71      	ldr	r3, [pc, #452]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001b60:	fb82 1203 	smull	r1, r2, r2, r3
 8001b64:	1092      	asrs	r2, r2, #2
 8001b66:	17db      	asrs	r3, r3, #31
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3330      	adds	r3, #48	@ 0x30
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[RED] % 10);
 8001b72:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b67      	ldr	r3, [pc, #412]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001b78:	fb83 1302 	smull	r1, r3, r3, r2
 8001b7c:	1099      	asrs	r1, r3, #2
 8001b7e:	17d3      	asrs	r3, r2, #31
 8001b80:	1ac9      	subs	r1, r1, r3
 8001b82:	460b      	mov	r3, r1
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	1ad1      	subs	r1, r2, r3
 8001b8c:	b2cb      	uxtb	r3, r1
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	214e      	movs	r1, #78	@ 0x4e
 8001bb8:	4858      	ldr	r0, [pc, #352]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001bba:	f7fe fac7 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	e00b      	b.n	8001bdc <printLight1Timer+0x198>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001bc4:	1d3a      	adds	r2, r7, #4
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	214e      	movs	r1, #78	@ 0x4e
 8001bd0:	4852      	ldr	r0, [pc, #328]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001bd2:	f7fe fabb 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d9f0      	bls.n	8001bc4 <printLight1Timer+0x180>
		break;
 8001be2:	e08a      	b.n	8001cfa <printLight1Timer+0x2b6>
	case AMBER:
		timer[0] = '0' + (settingBuffer[AMBER] / 10);
 8001be4:	4b4e      	ldr	r3, [pc, #312]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001bea:	fb82 1203 	smull	r1, r2, r2, r3
 8001bee:	1092      	asrs	r2, r2, #2
 8001bf0:	17db      	asrs	r3, r3, #31
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3330      	adds	r3, #48	@ 0x30
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[AMBER] % 10);
 8001bfc:	4b48      	ldr	r3, [pc, #288]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4b44      	ldr	r3, [pc, #272]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001c02:	fb83 1302 	smull	r1, r3, r3, r2
 8001c06:	1099      	asrs	r1, r3, #2
 8001c08:	17d3      	asrs	r3, r2, #31
 8001c0a:	1ac9      	subs	r1, r1, r3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	1ad1      	subs	r1, r2, r3
 8001c16:	b2cb      	uxtb	r3, r1
 8001c18:	3330      	adds	r3, #48	@ 0x30
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	2300      	movs	r3, #0
 8001c40:	214e      	movs	r1, #78	@ 0x4e
 8001c42:	4836      	ldr	r0, [pc, #216]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001c44:	f7fe fa82 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e00b      	b.n	8001c66 <printLight1Timer+0x222>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001c4e:	1d3a      	adds	r2, r7, #4
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4413      	add	r3, r2
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	2301      	movs	r3, #1
 8001c58:	214e      	movs	r1, #78	@ 0x4e
 8001c5a:	4830      	ldr	r0, [pc, #192]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001c5c:	f7fe fa76 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d9f0      	bls.n	8001c4e <printLight1Timer+0x20a>
		break;
 8001c6c:	e045      	b.n	8001cfa <printLight1Timer+0x2b6>
	case GREEN:
		timer[0] = '0' + (settingBuffer[GREEN] / 10);
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001c74:	fb82 1203 	smull	r1, r2, r2, r3
 8001c78:	1092      	asrs	r2, r2, #2
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3330      	adds	r3, #48	@ 0x30
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[GREEN] % 10);
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <printLight1Timer+0x2dc>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <printLight1Timer+0x2d0>)
 8001c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c90:	1099      	asrs	r1, r3, #2
 8001c92:	17d3      	asrs	r3, r2, #31
 8001c94:	1ac9      	subs	r1, r1, r3
 8001c96:	460b      	mov	r3, r1
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	1ad1      	subs	r1, r2, r3
 8001ca0:	b2cb      	uxtb	r3, r1
 8001ca2:	3330      	adds	r3, #48	@ 0x30
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	214e      	movs	r1, #78	@ 0x4e
 8001ccc:	4813      	ldr	r0, [pc, #76]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001cce:	f7fe fa3d 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e00b      	b.n	8001cf0 <printLight1Timer+0x2ac>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001cd8:	1d3a      	adds	r2, r7, #4
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	214e      	movs	r1, #78	@ 0x4e
 8001ce4:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <printLight1Timer+0x2d8>)
 8001ce6:	f7fe fa31 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3301      	adds	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d9f0      	bls.n	8001cd8 <printLight1Timer+0x294>
		break;
 8001cf6:	e000      	b.n	8001cfa <printLight1Timer+0x2b6>
	default:
		break;
 8001cf8:	bf00      	nop
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	08004c34 	.word	0x08004c34
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200000d8 	.word	0x200000d8
 8001d10:	20000010 	.word	0x20000010
 8001d14:	66666667 	.word	0x66666667
 8001d18:	2000002c 	.word	0x2000002c
 8001d1c:	20000180 	.word	0x20000180
 8001d20:	20000014 	.word	0x20000014

08001d24 <printLight2Timer>:
void printLight2Timer () {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <printLight2Timer+0xfc>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d171      	bne.n	8001e16 <printLight2Timer+0xf2>
		uint8_t timer[] = "00";
 8001d32:	4a3c      	ldr	r2, [pc, #240]	@ (8001e24 <printLight2Timer+0x100>)
 8001d34:	463b      	mov	r3, r7
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	8019      	strh	r1, [r3, #0]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	0c12      	lsrs	r2, r2, #16
 8001d40:	701a      	strb	r2, [r3, #0]
		if (!lightController.isLight1){
 8001d42:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <printLight2Timer+0x104>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <printLight2Timer+0x62>
			timer[0] = '0' + (second / 10);
 8001d4a:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <printLight2Timer+0x108>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a38      	ldr	r2, [pc, #224]	@ (8001e30 <printLight2Timer+0x10c>)
 8001d50:	fb82 1203 	smull	r1, r2, r2, r3
 8001d54:	1092      	asrs	r2, r2, #2
 8001d56:	17db      	asrs	r3, r3, #31
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3330      	adds	r3, #48	@ 0x30
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	703b      	strb	r3, [r7, #0]
			timer[1] = '0' + (second % 10);
 8001d62:	4b32      	ldr	r3, [pc, #200]	@ (8001e2c <printLight2Timer+0x108>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b32      	ldr	r3, [pc, #200]	@ (8001e30 <printLight2Timer+0x10c>)
 8001d68:	fb83 1302 	smull	r1, r3, r3, r2
 8001d6c:	1099      	asrs	r1, r3, #2
 8001d6e:	17d3      	asrs	r3, r2, #31
 8001d70:	1ac9      	subs	r1, r1, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	1ad1      	subs	r1, r2, r3
 8001d7c:	b2cb      	uxtb	r3, r1
 8001d7e:	3330      	adds	r3, #48	@ 0x30
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	707b      	strb	r3, [r7, #1]
 8001d84:	e01c      	b.n	8001dc0 <printLight2Timer+0x9c>
		} else {
			timer[0] = '0' + (redLightTimer / 10);
 8001d86:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <printLight2Timer+0x110>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a29      	ldr	r2, [pc, #164]	@ (8001e30 <printLight2Timer+0x10c>)
 8001d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d90:	1092      	asrs	r2, r2, #2
 8001d92:	17db      	asrs	r3, r3, #31
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3330      	adds	r3, #48	@ 0x30
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	703b      	strb	r3, [r7, #0]
			timer[1] = '0' + (redLightTimer % 10);
 8001d9e:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <printLight2Timer+0x110>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <printLight2Timer+0x10c>)
 8001da4:	fb83 1302 	smull	r1, r3, r3, r2
 8001da8:	1099      	asrs	r1, r3, #2
 8001daa:	17d3      	asrs	r3, r2, #31
 8001dac:	1ac9      	subs	r1, r1, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	1ad1      	subs	r1, r2, r3
 8001db8:	b2cb      	uxtb	r3, r1
 8001dba:	3330      	adds	r3, #48	@ 0x30
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	707b      	strb	r3, [r7, #1]
		}
		int col = 13, row = 2;
 8001dc0:	230d      	movs	r3, #13
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	214e      	movs	r1, #78	@ 0x4e
 8001dec:	4812      	ldr	r0, [pc, #72]	@ (8001e38 <printLight2Timer+0x114>)
 8001dee:	f7fe f9ad 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e00b      	b.n	8001e10 <printLight2Timer+0xec>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001df8:	463a      	mov	r2, r7
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	2301      	movs	r3, #1
 8001e02:	214e      	movs	r1, #78	@ 0x4e
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <printLight2Timer+0x114>)
 8001e06:	f7fe f9a1 	bl	800014c <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d9f0      	bls.n	8001df8 <printLight2Timer+0xd4>
	}
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	08004c34 	.word	0x08004c34
 8001e28:	200000d8 	.word	0x200000d8
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	66666667 	.word	0x66666667
 8001e34:	2000002c 	.word	0x2000002c
 8001e38:	20000180 	.word	0x20000180

08001e3c <cursorOff>:
void cursorOff() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	setCursor(0);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7fe fa89 	bl	8000358 <setCursor>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <blinkingOff>:
void blinkingOff() {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
	setBlinking(0);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe fa4e 	bl	80002f0 <setBlinking>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <changeMode>:
void changeMode( ) {
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	switch (lightController.isLight1) {
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <changeMode+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <changeMode+0x2e>
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d11d      	bne.n	8001ea4 <changeMode+0x4c>
	case 1:
		if (lightController.currentState == Green)
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <changeMode+0x58>)
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d103      	bne.n	8001e78 <changeMode+0x20>
			light1Mode[0] = 'G';
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <changeMode+0x5c>)
 8001e72:	2247      	movs	r2, #71	@ 0x47
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e002      	b.n	8001e7e <changeMode+0x26>
		else
			light1Mode[0] = 'A';
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <changeMode+0x5c>)
 8001e7a:	2241      	movs	r2, #65	@ 0x41
 8001e7c:	701a      	strb	r2, [r3, #0]
		light2Mode[0] = 'R';
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <changeMode+0x60>)
 8001e80:	2252      	movs	r2, #82	@ 0x52
 8001e82:	701a      	strb	r2, [r3, #0]
		break;
 8001e84:	e00f      	b.n	8001ea6 <changeMode+0x4e>
	case 0:
		if (lightController.currentState == Green)
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <changeMode+0x58>)
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d103      	bne.n	8001e96 <changeMode+0x3e>
			light2Mode[0] = 'G';
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <changeMode+0x60>)
 8001e90:	2247      	movs	r2, #71	@ 0x47
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e002      	b.n	8001e9c <changeMode+0x44>
		else
			light2Mode[0] = 'A';
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <changeMode+0x60>)
 8001e98:	2241      	movs	r2, #65	@ 0x41
 8001e9a:	701a      	strb	r2, [r3, #0]
		light1Mode[0] = 'R';
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <changeMode+0x5c>)
 8001e9e:	2252      	movs	r2, #82	@ 0x52
 8001ea0:	701a      	strb	r2, [r3, #0]
		break;
 8001ea2:	e000      	b.n	8001ea6 <changeMode+0x4e>
	default:
		break;
 8001ea4:	bf00      	nop
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200000d8 	.word	0x200000d8
 8001eb4:	20000040 	.word	0x20000040
 8001eb8:	20000044 	.word	0x20000044

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f000 fc27 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f895 	bl	8001ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eca:	f000 f9cb 	bl	8002264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ece:	f000 f99f 	bl	8002210 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ed2:	f000 f903 	bl	80020dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ed6:	f000 f94d 	bl	8002174 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001eda:	f000 f8d1 	bl	8002080 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Traffic_Light_FSM_Init(BUTTON_1_GPIO_Port, BUTTON_1_Pin,
 8001ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <main+0xf4>)
 8001ee6:	9308      	str	r3, [sp, #32]
 8001ee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eec:	9307      	str	r3, [sp, #28]
 8001eee:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <main+0xf4>)
 8001ef0:	9306      	str	r3, [sp, #24]
 8001ef2:	2340      	movs	r3, #64	@ 0x40
 8001ef4:	9305      	str	r3, [sp, #20]
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <main+0xf8>)
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	9303      	str	r3, [sp, #12]
 8001efe:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <main+0xfc>)
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2320      	movs	r3, #32
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <main+0xf8>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f0e:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <main+0xf8>)
 8001f10:	2110      	movs	r1, #16
 8001f12:	4828      	ldr	r0, [pc, #160]	@ (8001fb4 <main+0xf8>)
 8001f14:	f7fe fb92 	bl	800063c <Traffic_Light_FSM_Init>
						 BUTTON_3_GPIO_Port, BUTTON_3_Pin,
						 LIGHT1_SIG1_GPIO_Port, LIGHT1_SIG1_Pin,
						 LIGHT1_SIG2_GPIO_Port, LIGHT1_SIG2_Pin,
						 LIGHT2_SIG1_GPIO_Port, LIGHT2_SIG1_Pin,
						 LIGHT2_SIG2_GPIO_Port, LIGHT2_SIG2_Pin);
  HAL_TIM_Base_Start_IT(&htim3);
 8001f18:	4828      	ldr	r0, [pc, #160]	@ (8001fbc <main+0x100>)
 8001f1a:	f002 f879 	bl	8004010 <HAL_TIM_Base_Start_IT>
  LCD_Init(&hi2c1);
 8001f1e:	4828      	ldr	r0, [pc, #160]	@ (8001fc0 <main+0x104>)
 8001f20:	f7fe f998 	bl	8000254 <LCD_Init>
  SCH_Init();
 8001f24:	f7fe fa4c 	bl	80003c0 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(clearLCD, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4825      	ldr	r0, [pc, #148]	@ (8001fc4 <main+0x108>)
 8001f2e:	f7fe fa53 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(cursorOff, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	4824      	ldr	r0, [pc, #144]	@ (8001fc8 <main+0x10c>)
 8001f38:	f7fe fa4e 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(blinkingOff, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4822      	ldr	r0, [pc, #136]	@ (8001fcc <main+0x110>)
 8001f42:	f7fe fa49 	bl	80003d8 <SCH_Add_Task>

  SCH_Add_Task(printLightNotify, 0, 353);
 8001f46:	f240 1261 	movw	r2, #353	@ 0x161
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4820      	ldr	r0, [pc, #128]	@ (8001fd0 <main+0x114>)
 8001f4e:	f7fe fa43 	bl	80003d8 <SCH_Add_Task>
//  SCH_Add_Task(printLight2, 0, 1000);
  SCH_Add_Task(printLight1Timer, 0, 243);
 8001f52:	22f3      	movs	r2, #243	@ 0xf3
 8001f54:	2100      	movs	r1, #0
 8001f56:	481f      	ldr	r0, [pc, #124]	@ (8001fd4 <main+0x118>)
 8001f58:	f7fe fa3e 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(printLight2Timer, 0, 333);
 8001f5c:	f240 124d 	movw	r2, #333	@ 0x14d
 8001f60:	2100      	movs	r1, #0
 8001f62:	481d      	ldr	r0, [pc, #116]	@ (8001fd8 <main+0x11c>)
 8001f64:	f7fe fa38 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(printLight1Mode, 0, 300);
 8001f68:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	481b      	ldr	r0, [pc, #108]	@ (8001fdc <main+0x120>)
 8001f70:	f7fe fa32 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(printLight2Mode, 0, 400);
 8001f74:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4819      	ldr	r0, [pc, #100]	@ (8001fe0 <main+0x124>)
 8001f7c:	f7fe fa2c 	bl	80003d8 <SCH_Add_Task>

  SCH_Add_Task(changeMode, 0, 2*TIMER_CYCLE);
 8001f80:	2202      	movs	r2, #2
 8001f82:	2100      	movs	r1, #0
 8001f84:	4817      	ldr	r0, [pc, #92]	@ (8001fe4 <main+0x128>)
 8001f86:	f7fe fa27 	bl	80003d8 <SCH_Add_Task>

  SCH_Add_Task(Button_Read, 0, TIMER_CYCLE);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <main+0x12c>)
 8001f90:	f7fe fa22 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(Traffic_Light_FSM_Run, 0, TIMER_CYCLE);
 8001f94:	2201      	movs	r2, #1
 8001f96:	2100      	movs	r1, #0
 8001f98:	4814      	ldr	r0, [pc, #80]	@ (8001fec <main+0x130>)
 8001f9a:	f7fe fa1d 	bl	80003d8 <SCH_Add_Task>
  SCH_Add_Task(traficLightFSM, 0, TIMER_CYCLE);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4813      	ldr	r0, [pc, #76]	@ (8001ff0 <main+0x134>)
 8001fa4:	f7fe fa18 	bl	80003d8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatcher();
 8001fa8:	f7fe fb0e 	bl	80005c8 <SCH_Dispatcher>
 8001fac:	e7fc      	b.n	8001fa8 <main+0xec>
 8001fae:	bf00      	nop
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	2000021c 	.word	0x2000021c
 8001fc0:	20000180 	.word	0x20000180
 8001fc4:	080002c9 	.word	0x080002c9
 8001fc8:	08001e3d 	.word	0x08001e3d
 8001fcc:	08001e4b 	.word	0x08001e4b
 8001fd0:	080014f1 	.word	0x080014f1
 8001fd4:	08001a45 	.word	0x08001a45
 8001fd8:	08001d25 	.word	0x08001d25
 8001fdc:	08001955 	.word	0x08001955
 8001fe0:	080019cd 	.word	0x080019cd
 8001fe4:	08001e59 	.word	0x08001e59
 8001fe8:	0800133d 	.word	0x0800133d
 8001fec:	080006a9 	.word	0x080006a9
 8001ff0:	08001119 	.word	0x08001119

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b090      	sub	sp, #64	@ 0x40
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	2228      	movs	r2, #40	@ 0x28
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f002 fd4e 	bl	8004aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002016:	2301      	movs	r3, #1
 8002018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800201a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800201e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002024:	2301      	movs	r3, #1
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002028:	2302      	movs	r3, #2
 800202a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002032:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002036:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	4618      	mov	r0, r3
 800203e:	f001 fb87 	bl	8003750 <HAL_RCC_OscConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002048:	f000 f9b2 	bl	80023b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204c:	230f      	movs	r3, #15
 800204e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002050:	2302      	movs	r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f001 fdf4 	bl	8003c54 <HAL_RCC_ClockConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002072:	f000 f99d 	bl	80023b0 <Error_Handler>
  }
}
 8002076:	bf00      	nop
 8002078:	3740      	adds	r7, #64	@ 0x40
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <MX_I2C1_Init+0x50>)
 8002086:	4a13      	ldr	r2, [pc, #76]	@ (80020d4 <MX_I2C1_Init+0x54>)
 8002088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_I2C1_Init+0x50>)
 800208c:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <MX_I2C1_Init+0x58>)
 800208e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <MX_I2C1_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_I2C1_Init+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <MX_I2C1_Init+0x50>)
 800209e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <MX_I2C1_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <MX_I2C1_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <MX_I2C1_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	@ (80020d0 <MX_I2C1_Init+0x50>)
 80020be:	f000 feab 	bl	8002e18 <HAL_I2C_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020c8:	f000 f972 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000180 	.word	0x20000180
 80020d4:	40005400 	.word	0x40005400
 80020d8:	000186a0 	.word	0x000186a0

080020dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	463b      	mov	r3, r7
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <MX_TIM2_Init+0x94>)
 80020fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <MX_TIM2_Init+0x94>)
 8002102:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002106:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <MX_TIM2_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800210e:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_TIM2_Init+0x94>)
 8002110:	2209      	movs	r2, #9
 8002112:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <MX_TIM2_Init+0x94>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <MX_TIM2_Init+0x94>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002120:	4813      	ldr	r0, [pc, #76]	@ (8002170 <MX_TIM2_Init+0x94>)
 8002122:	f001 ff25 	bl	8003f70 <HAL_TIM_Base_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800212c:	f000 f940 	bl	80023b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002134:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <MX_TIM2_Init+0x94>)
 800213e:	f002 f8c1 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002148:	f000 f932 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002154:	463b      	mov	r3, r7
 8002156:	4619      	mov	r1, r3
 8002158:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_TIM2_Init+0x94>)
 800215a:	f002 fa97 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002164:	f000 f924 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200001d4 	.word	0x200001d4

08002174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	463b      	mov	r3, r7
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <MX_TIM3_Init+0x94>)
 8002192:	4a1e      	ldr	r2, [pc, #120]	@ (800220c <MX_TIM3_Init+0x98>)
 8002194:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23999;
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <MX_TIM3_Init+0x94>)
 8002198:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800219c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 80021a4:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021a6:	2202      	movs	r2, #2
 80021a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021aa:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b6:	4814      	ldr	r0, [pc, #80]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021b8:	f001 feda 	bl	8003f70 <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021c2:	f000 f8f5 	bl	80023b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	4619      	mov	r1, r3
 80021d2:	480d      	ldr	r0, [pc, #52]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021d4:	f002 f876 	bl	80042c4 <HAL_TIM_ConfigClockSource>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021de:	f000 f8e7 	bl	80023b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	4619      	mov	r1, r3
 80021ee:	4806      	ldr	r0, [pc, #24]	@ (8002208 <MX_TIM3_Init+0x94>)
 80021f0:	f002 fa4c 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80021fa:	f000 f8d9 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000021c 	.word	0x2000021c
 800220c:	40000400 	.word	0x40000400

08002210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <MX_USART2_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800221c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_USART2_UART_Init+0x4c>)
 8002248:	f002 fa90 	bl	800476c <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f000 f8ad 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000264 	.word	0x20000264
 8002260:	40004400 	.word	0x40004400

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002278:	4b48      	ldr	r3, [pc, #288]	@ (800239c <MX_GPIO_Init+0x138>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a47      	ldr	r2, [pc, #284]	@ (800239c <MX_GPIO_Init+0x138>)
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b45      	ldr	r3, [pc, #276]	@ (800239c <MX_GPIO_Init+0x138>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002290:	4b42      	ldr	r3, [pc, #264]	@ (800239c <MX_GPIO_Init+0x138>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a41      	ldr	r2, [pc, #260]	@ (800239c <MX_GPIO_Init+0x138>)
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b3f      	ldr	r3, [pc, #252]	@ (800239c <MX_GPIO_Init+0x138>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	4b3c      	ldr	r3, [pc, #240]	@ (800239c <MX_GPIO_Init+0x138>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a3b      	ldr	r2, [pc, #236]	@ (800239c <MX_GPIO_Init+0x138>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b39      	ldr	r3, [pc, #228]	@ (800239c <MX_GPIO_Init+0x138>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	@ (800239c <MX_GPIO_Init+0x138>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <MX_GPIO_Init+0x138>)
 80022c6:	f043 0308 	orr.w	r3, r3, #8
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b33      	ldr	r3, [pc, #204]	@ (800239c <MX_GPIO_Init+0x138>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LIGHT2_SIG1_Pin|LIGHT2_SIG2_Pin, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80022de:	4830      	ldr	r0, [pc, #192]	@ (80023a0 <MX_GPIO_Init+0x13c>)
 80022e0:	f000 fd47 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT1_SIG1_GPIO_Port, LIGHT1_SIG1_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	482e      	ldr	r0, [pc, #184]	@ (80023a4 <MX_GPIO_Init+0x140>)
 80022ea:	f000 fd42 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT1_SIG2_GPIO_Port, LIGHT1_SIG2_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2140      	movs	r1, #64	@ 0x40
 80022f2:	482d      	ldr	r0, [pc, #180]	@ (80023a8 <MX_GPIO_Init+0x144>)
 80022f4:	f000 fd3d 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <MX_GPIO_Init+0x148>)
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4619      	mov	r1, r3
 800230c:	4825      	ldr	r0, [pc, #148]	@ (80023a4 <MX_GPIO_Init+0x140>)
 800230e:	f000 fb95 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LIGHT2_SIG1_Pin LIGHT2_SIG2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LIGHT2_SIG1_Pin|LIGHT2_SIG2_Pin;
 8002312:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2302      	movs	r3, #2
 8002322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4619      	mov	r1, r3
 800232a:	481d      	ldr	r0, [pc, #116]	@ (80023a0 <MX_GPIO_Init+0x13c>)
 800232c:	f000 fb86 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_1_Pin|BUTTON_3_Pin;
 8002330:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8002334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4818      	ldr	r0, [pc, #96]	@ (80023a8 <MX_GPIO_Init+0x144>)
 8002346:	f000 fb79 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT1_SIG1_Pin */
  GPIO_InitStruct.Pin = LIGHT1_SIG1_Pin;
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2302      	movs	r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT1_SIG1_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	4810      	ldr	r0, [pc, #64]	@ (80023a4 <MX_GPIO_Init+0x140>)
 8002362:	f000 fb6b 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT1_SIG2_Pin */
  GPIO_InitStruct.Pin = LIGHT1_SIG2_Pin;
 8002366:	2340      	movs	r3, #64	@ 0x40
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2302      	movs	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT1_SIG2_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <MX_GPIO_Init+0x144>)
 800237e:	f000 fb5d 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2028      	movs	r0, #40	@ 0x28
 8002388:	f000 fb21 	bl	80029ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800238c:	2028      	movs	r0, #40	@ 0x28
 800238e:	f000 fb3a 	bl	8002a06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002392:	bf00      	nop
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010800 	.word	0x40010800
 80023a4:	40011000 	.word	0x40011000
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	10110000 	.word	0x10110000

080023b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <Error_Handler+0x8>

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <HAL_MspInit+0x5c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <HAL_MspInit+0x5c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6193      	str	r3, [r2, #24]
 80023ce:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_MspInit+0x5c>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <HAL_MspInit+0x5c>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a0e      	ldr	r2, [pc, #56]	@ (8002418 <HAL_MspInit+0x5c>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_MspInit+0x5c>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_MspInit+0x60>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_MspInit+0x60>)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	40010000 	.word	0x40010000

08002420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_I2C_MspInit+0x90>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d132      	bne.n	80024a6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002458:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4812      	ldr	r0, [pc, #72]	@ (80024b8 <HAL_I2C_MspInit+0x98>)
 800246e:	f000 fae5 	bl	8002a3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_I2C_MspInit+0x9c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <HAL_I2C_MspInit+0x9c>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 8002494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_I2C_MspInit+0x94>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010c00 	.word	0x40010c00
 80024bc:	40010000 	.word	0x40010000

080024c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d0:	d114      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	201c      	movs	r0, #28
 80024f0:	f000 fa6d 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024f4:	201c      	movs	r0, #28
 80024f6:	f000 fa86 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024fa:	e018      	b.n	800252e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0e      	ldr	r2, [pc, #56]	@ (800253c <HAL_TIM_Base_MspInit+0x7c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d113      	bne.n	800252e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_TIM_Base_MspInit+0x78>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	201d      	movs	r0, #29
 8002524:	f000 fa53 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002528:	201d      	movs	r0, #29
 800252a:	f000 fa6c 	bl	8002a06 <HAL_NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40000400 	.word	0x40000400

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_UART_MspInit+0x70>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d123      	bne.n	80025a8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 8002566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6193      	str	r3, [r2, #24]
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_UART_MspInit+0x74>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002590:	230c      	movs	r3, #12
 8002592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2302      	movs	r3, #2
 800259a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <HAL_UART_MspInit+0x78>)
 80025a4:	f000 fa4a 	bl	8002a3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025a8:	bf00      	nop
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40004400 	.word	0x40004400
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010800 	.word	0x40010800

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <NMI_Handler+0x4>

080025c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	return;
 80025c8:	bf00      	nop
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <MemManage_Handler+0x4>

080025d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002610:	f000 f8c6 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <TIM2_IRQHandler+0x10>)
 800261e:	f001 fd49 	bl	80040b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200001d4 	.word	0x200001d4

0800262c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <TIM3_IRQHandler+0x10>)
 8002632:	f001 fd3f 	bl	80040b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000021c 	.word	0x2000021c

08002640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002644:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002648:	f000 fbc4 	bl	8002dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f002 fa28 	bl	8004ad4 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20005000 	.word	0x20005000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	200002ac 	.word	0x200002ac
 80026b8:	20000400 	.word	0x20000400

080026bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c8:	f7ff fff8 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026cc:	480b      	ldr	r0, [pc, #44]	@ (80026fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026ce:	490c      	ldr	r1, [pc, #48]	@ (8002700 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002704 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a09      	ldr	r2, [pc, #36]	@ (8002708 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026e4:	4c09      	ldr	r4, [pc, #36]	@ (800270c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f2:	f002 f9f5 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026f6:	f7ff fbe1 	bl	8001ebc <main>
  bx lr
 80026fa:	4770      	bx	lr
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002704:	08004c6c 	.word	0x08004c6c
  ldr r2, =_sbss
 8002708:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800270c:	200003fc 	.word	0x200003fc

08002710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_2_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <HAL_Init+0x28>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	@ (800273c <HAL_Init+0x28>)
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f000 f947 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272a:	2000      	movs	r0, #0
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fe44 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f95f 	bl	8002a22 <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 f927 	bl	80029ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4a06      	ldr	r2, [pc, #24]	@ (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000048 	.word	0x20000048
 8002798:	20000050 	.word	0x20000050
 800279c:	2000004c 	.word	0x2000004c

080027a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_IncTick+0x1c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_IncTick+0x20>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a03      	ldr	r2, [pc, #12]	@ (80027c0 <HAL_IncTick+0x20>)
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000050 	.word	0x20000050
 80027c0:	200002b0 	.word	0x200002b0

080027c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b02      	ldr	r3, [pc, #8]	@ (80027d4 <HAL_GetTick+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	200002b0 	.word	0x200002b0

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffe0 	bl	80027c4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000050 	.word	0x20000050

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4906      	ldr	r1, [pc, #24]	@ (80028b8 <__NVIC_EnableIRQ+0x34>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff90 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff2d 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff42 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff90 	bl	8002910 <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5f 	bl	80028bc <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff35 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	@ 0x2c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e169      	b.n	8002d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a50:	2201      	movs	r2, #1
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8158 	bne.w	8002d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a9a      	ldr	r2, [pc, #616]	@ (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d05e      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a78:	4a98      	ldr	r2, [pc, #608]	@ (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d875      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a7e:	4a98      	ldr	r2, [pc, #608]	@ (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d058      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a84:	4a96      	ldr	r2, [pc, #600]	@ (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d86f      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a8a:	4a96      	ldr	r2, [pc, #600]	@ (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d052      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a90:	4a94      	ldr	r2, [pc, #592]	@ (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d869      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a96:	4a94      	ldr	r2, [pc, #592]	@ (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d04c      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a9c:	4a92      	ldr	r2, [pc, #584]	@ (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d863      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aa2:	4a92      	ldr	r2, [pc, #584]	@ (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d046      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002aa8:	4a90      	ldr	r2, [pc, #576]	@ (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d85d      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_GPIO_Init+0xcc>
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d859      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_GPIO_Init+0x80>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002b23 	.word	0x08002b23
 8002ac8:	08002b65 	.word	0x08002b65
 8002acc:	08002b6b 	.word	0x08002b6b
 8002ad0:	08002b6b 	.word	0x08002b6b
 8002ad4:	08002b6b 	.word	0x08002b6b
 8002ad8:	08002b6b 	.word	0x08002b6b
 8002adc:	08002b6b 	.word	0x08002b6b
 8002ae0:	08002b6b 	.word	0x08002b6b
 8002ae4:	08002b6b 	.word	0x08002b6b
 8002ae8:	08002b6b 	.word	0x08002b6b
 8002aec:	08002b6b 	.word	0x08002b6b
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b6b 	.word	0x08002b6b
 8002af8:	08002b6b 	.word	0x08002b6b
 8002afc:	08002b6b 	.word	0x08002b6b
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	4a79      	ldr	r2, [pc, #484]	@ (8002cf0 <HAL_GPIO_Init+0x2b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0e:	e02c      	b.n	8002b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e029      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e024      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	3308      	adds	r3, #8
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e01f      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	330c      	adds	r3, #12
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e01a      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e013      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	611a      	str	r2, [r3, #16]
          break;
 8002b56:	e009      	b.n	8002b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	615a      	str	r2, [r3, #20]
          break;
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          break;
 8002b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d801      	bhi.n	8002b76 <HAL_GPIO_Init+0x13a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_Init+0x13e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	@ 0xff
 8002b80:	d802      	bhi.n	8002b88 <HAL_GPIO_Init+0x14c>
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x152>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	210f      	movs	r1, #15
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80b1 	beq.w	8002d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6193      	str	r3, [r2, #24]
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd4:	4a48      	ldr	r2, [pc, #288]	@ (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a40      	ldr	r2, [pc, #256]	@ (8002cfc <HAL_GPIO_Init+0x2c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	@ (8002d00 <HAL_GPIO_Init+0x2c4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1e8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	@ (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1e0>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c3a:	492f      	ldr	r1, [pc, #188]	@ (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4928      	ldr	r1, [pc, #160]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b23      	ldr	r3, [pc, #140]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4922      	ldr	r1, [pc, #136]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	491e      	ldr	r1, [pc, #120]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4918      	ldr	r1, [pc, #96]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4914      	ldr	r1, [pc, #80]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e021      	b.n	8002d1e <HAL_GPIO_Init+0x2e2>
 8002cda:	bf00      	nop
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10310000 	.word	0x10310000
 8002ce4:	10220000 	.word	0x10220000
 8002ce8:	10210000 	.word	0x10210000
 8002cec:	10120000 	.word	0x10120000
 8002cf0:	10110000 	.word	0x10110000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	40010c00 	.word	0x40010c00
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4909      	ldr	r1, [pc, #36]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f47f ae8e 	bne.w	8002a50 <HAL_GPIO_Init+0x14>
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	372c      	adds	r7, #44	@ 0x2c
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40010400 	.word	0x40010400

08002d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	807b      	strh	r3, [r7, #2]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8e:	e003      	b.n	8002d98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002db4:	887a      	ldrh	r2, [r7, #2]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	041a      	lsls	r2, r3, #16
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	887b      	ldrh	r3, [r7, #2]
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dea:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f806 	bl	8002e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e12b      	b.n	8003082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff faee 	bl	8002420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f001 f832 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8002e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4a81      	ldr	r2, [pc, #516]	@ (800308c <HAL_I2C_Init+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d807      	bhi.n	8002e9c <HAL_I2C_Init+0x84>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <HAL_I2C_Init+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf94      	ite	ls
 8002e94:	2301      	movls	r3, #1
 8002e96:	2300      	movhi	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e006      	b.n	8002eaa <HAL_I2C_Init+0x92>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8003094 <HAL_I2C_Init+0x27c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0e7      	b.n	8003082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a78      	ldr	r2, [pc, #480]	@ (8003098 <HAL_I2C_Init+0x280>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800308c <HAL_I2C_Init+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <HAL_I2C_Init+0xd4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	e009      	b.n	8002f00 <HAL_I2C_Init+0xe8>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a69      	ldr	r2, [pc, #420]	@ (800309c <HAL_I2C_Init+0x284>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3301      	adds	r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	495c      	ldr	r1, [pc, #368]	@ (800308c <HAL_I2C_Init+0x274>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d819      	bhi.n	8002f54 <HAL_I2C_Init+0x13c>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e59      	subs	r1, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f34:	400b      	ands	r3, r1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_I2C_Init+0x138>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1e59      	subs	r1, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	e051      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e04f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_I2C_Init+0x168>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e012      	b.n	8002fa6 <HAL_I2C_Init+0x18e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x196>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e022      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_I2C_Init+0x1bc>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e58      	subs	r0, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6859      	ldr	r1, [r3, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	440b      	add	r3, r1
 8002fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Init+0x1dc>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0099      	lsls	r1, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6809      	ldr	r1, [r1, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003022:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6911      	ldr	r1, [r2, #16]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	000186a0 	.word	0x000186a0
 8003090:	001e847f 	.word	0x001e847f
 8003094:	003d08ff 	.word	0x003d08ff
 8003098:	431bde83 	.word	0x431bde83
 800309c:	10624dd3 	.word	0x10624dd3

080030a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	461a      	mov	r2, r3
 80030ac:	460b      	mov	r3, r1
 80030ae:	817b      	strh	r3, [r7, #10]
 80030b0:	4613      	mov	r3, r2
 80030b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff fb86 	bl	80027c4 <HAL_GetTick>
 80030b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	f040 80e0 	bne.w	8003288 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	4970      	ldr	r1, [pc, #448]	@ (8003294 <HAL_I2C_Master_Transmit+0x1f4>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f964 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	e0d3      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0x50>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0cc      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d007      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2221      	movs	r2, #33	@ 0x21
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2210      	movs	r2, #16
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a50      	ldr	r2, [pc, #320]	@ (8003298 <HAL_I2C_Master_Transmit+0x1f8>)
 8003156:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f89c 	bl	800329c <I2C_MasterRequestWrite>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e08d      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003184:	e066      	b.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6a39      	ldr	r1, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa22 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b04      	cmp	r3, #4
 800319c:	d107      	bne.n	80031ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	781a      	ldrb	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_I2C_Master_Transmit+0x188>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	6a39      	ldr	r1, [r7, #32]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fa19 	bl	8003664 <I2C_WaitOnBTFFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e01a      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d194      	bne.n	8003186 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	00100002 	.word	0x00100002
 8003298:	ffff0000 	.word	0xffff0000

0800329c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d006      	beq.n	80032c6 <I2C_MasterRequestWrite+0x2a>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d003      	beq.n	80032c6 <I2C_MasterRequestWrite+0x2a>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032c4:	d108      	bne.n	80032d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e00b      	b.n	80032f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	2b12      	cmp	r3, #18
 80032de:	d107      	bne.n	80032f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f84f 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003316:	d103      	bne.n	8003320 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e035      	b.n	8003390 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800332c:	d108      	bne.n	8003340 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	e01b      	b.n	8003378 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003340:	897b      	ldrh	r3, [r7, #10]
 8003342:	11db      	asrs	r3, r3, #7
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 0306 	and.w	r3, r3, #6
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f063 030f 	orn	r3, r3, #15
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	490e      	ldr	r1, [pc, #56]	@ (8003398 <I2C_MasterRequestWrite+0xfc>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f898 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e010      	b.n	8003390 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4907      	ldr	r1, [pc, #28]	@ (800339c <I2C_MasterRequestWrite+0x100>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f888 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010008 	.word	0x00010008
 800339c:	00010002 	.word	0x00010002

080033a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	e048      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d044      	beq.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7ff fa03 	bl	80027c4 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d139      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e023      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0xca>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	e00c      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d093      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a2:	e071      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d123      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e067      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d041      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7ff f95e 	bl	80027c4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d136      	bne.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e021      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10c      	bne.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e00b      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af6d 	bne.w	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	e034      	b.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f886 	bl	80036f4 <I2C_IsAcknowledgeFailed>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e034      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d028      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7ff f8e3 	bl	80027c4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d016      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d1c3      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003670:	e034      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f83e 	bl	80036f4 <I2C_IsAcknowledgeFailed>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e034      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d028      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7ff f89b 	bl	80027c4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d016      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d1c3      	bne.n	8003672 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800370a:	d11b      	bne.n	8003744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0204 	orr.w	r2, r3, #4
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e272      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8087 	beq.w	800387e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b04      	cmp	r3, #4
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377c:	4b8f      	ldr	r3, [pc, #572]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d112      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
 8003788:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d10b      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003796:	4b89      	ldr	r3, [pc, #548]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d06c      	beq.n	800387c <HAL_RCC_OscConfig+0x12c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d168      	bne.n	800387c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e24c      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x76>
 80037b8:	4b80      	ldr	r3, [pc, #512]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7f      	ldr	r2, [pc, #508]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e02e      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x98>
 80037ce:	4b7b      	ldr	r3, [pc, #492]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7a      	ldr	r2, [pc, #488]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b78      	ldr	r3, [pc, #480]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e01d      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0xbc>
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a71      	ldr	r2, [pc, #452]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 800380c:	4b6b      	ldr	r3, [pc, #428]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6a      	ldr	r2, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a67      	ldr	r2, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe ffca 	bl	80027c4 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe ffc6 	bl	80027c4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e200      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0xe4>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe ffb6 	bl	80027c4 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fe ffb2 	bl	80027c4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1ec      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x10c>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388a:	4b4c      	ldr	r3, [pc, #304]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003896:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
 80038a2:	4b46      	ldr	r3, [pc, #280]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1c0      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4939      	ldr	r1, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b36      	ldr	r3, [pc, #216]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fe ff6b 	bl	80027c4 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fe ff67 	bl	80027c4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1a1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4927      	ldr	r1, [pc, #156]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe ff4a 	bl	80027c4 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7fe ff46 	bl	80027c4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e180      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03a      	beq.n	80039d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d019      	beq.n	800399a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fe ff2a 	bl	80027c4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fe ff26 	bl	80027c4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e160      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f000 face 	bl	8003f34 <RCC_Delay>
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fe ff10 	bl	80027c4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	e00f      	b.n	80039c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe ff0c 	bl	80027c4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e146      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	42420000 	.word	0x42420000
 80039c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	4b92      	ldr	r3, [pc, #584]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e9      	bne.n	80039a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a6 	beq.w	8003b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b88      	ldr	r3, [pc, #544]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a87      	ldr	r2, [pc, #540]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	61d3      	str	r3, [r2, #28]
 80039fe:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b82      	ldr	r3, [pc, #520]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fecd 	bl	80027c4 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fe fec9 	bl	80027c4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	@ 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e103      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b75      	ldr	r3, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x312>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a6e      	ldr	r2, [pc, #440]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	e02d      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x334>
 8003a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a69      	ldr	r2, [pc, #420]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a66      	ldr	r2, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	e01c      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x356>
 8003a8c:	4b61      	ldr	r3, [pc, #388]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a60      	ldr	r2, [pc, #384]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	e00b      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a57      	ldr	r2, [pc, #348]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fe7d 	bl	80027c4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fe79 	bl	80027c4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0b1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ee      	beq.n	8003ace <HAL_RCC_OscConfig+0x37e>
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fe67 	bl	80027c4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fe63 	bl	80027c4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e09b      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b3c      	ldr	r3, [pc, #240]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8087 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d061      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d146      	bne.n	8003bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe fe37 	bl	80027c4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fe fe33 	bl	80027c4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e06d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b80:	d108      	bne.n	8003b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4921      	ldr	r1, [pc, #132]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a19      	ldr	r1, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	491b      	ldr	r1, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fe fe07 	bl	80027c4 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fe fe03 	bl	80027c4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x46a>
 8003bd8:	e035      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe fdf0 	bl	80027c4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fe fdec 	bl	80027c4 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e026      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x498>
 8003c06:	e01e      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e019      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x500>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0d0      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d910      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4965      	ldr	r1, [pc, #404]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d040      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d115      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e073      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06b      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4936      	ldr	r1, [pc, #216]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe fd3e 	bl	80027c4 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe fd3a 	bl	80027c4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e053      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d210      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4922      	ldr	r1, [pc, #136]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1cc>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fc9c 	bl	8002740 <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08004c38 	.word	0x08004c38
 8003e20:	20000048 	.word	0x20000048
 8003e24:	2000004c 	.word	0x2000004c

08003e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x30>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x36>
 8003e56:	e027      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5a:	613b      	str	r3, [r7, #16]
      break;
 8003e5c:	e027      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d010      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	0c5b      	lsrs	r3, r3, #17
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8a:	fb03 f202 	mul.w	r2, r3, r2
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e004      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	613b      	str	r3, [r7, #16]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	613b      	str	r3, [r7, #16]
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	693b      	ldr	r3, [r7, #16]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	08004c50 	.word	0x08004c50
 8003ec8:	08004c60 	.word	0x08004c60
 8003ecc:	003d0900 	.word	0x003d0900

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b02      	ldr	r3, [pc, #8]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	20000048 	.word	0x20000048

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff2 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08004c48 	.word	0x08004c48

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffde 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0adb      	lsrs	r3, r3, #11
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	08004c48 	.word	0x08004c48

08003f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <RCC_Delay+0x34>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	@ (8003f6c <RCC_Delay+0x38>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a5b      	lsrs	r3, r3, #9
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f50:	bf00      	nop
  }
  while (Delay --);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <RCC_Delay+0x1c>
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20000048 	.word	0x20000048
 8003f6c:	10624dd3 	.word	0x10624dd3

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e041      	b.n	8004006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fa92 	bl	80024c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fa74 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e03a      	b.n	800409e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a18      	ldr	r2, [pc, #96]	@ (80040a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00e      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x58>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d009      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x58>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <HAL_TIM_Base_Start_IT+0x9c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x58>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a13      	ldr	r2, [pc, #76]	@ (80040b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b06      	cmp	r3, #6
 8004078:	d010      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0201 	orr.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800408a:	e007      	b.n	800409c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800

080040b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0202 	mvn.w	r2, #2
 80040e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9b4 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9a7 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9b6 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b04      	cmp	r3, #4
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0204 	mvn.w	r2, #4
 8004134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f98a 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f97d 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f98c 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0208 	mvn.w	r2, #8
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f960 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f953 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f962 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0210 	mvn.w	r2, #16
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2208      	movs	r2, #8
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f936 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f929 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f938 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0201 	mvn.w	r2, #1
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fc f9f8 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b80      	cmp	r3, #128	@ 0x80
 8004244:	d10e      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004250:	2b80      	cmp	r3, #128	@ 0x80
 8004252:	d107      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa7b 	bl	800475a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b40      	cmp	r3, #64	@ 0x40
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8fc 	bl	8004488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b20      	cmp	r3, #32
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0220 	mvn.w	r2, #32
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa46 	bl	8004748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIM_ConfigClockSource+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0b4      	b.n	800444a <HAL_TIM_ConfigClockSource+0x186>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004318:	d03e      	beq.n	8004398 <HAL_TIM_ConfigClockSource+0xd4>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431e:	f200 8087 	bhi.w	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004326:	f000 8086 	beq.w	8004436 <HAL_TIM_ConfigClockSource+0x172>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432e:	d87f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b70      	cmp	r3, #112	@ 0x70
 8004332:	d01a      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xa6>
 8004334:	2b70      	cmp	r3, #112	@ 0x70
 8004336:	d87b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b60      	cmp	r3, #96	@ 0x60
 800433a:	d050      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x11a>
 800433c:	2b60      	cmp	r3, #96	@ 0x60
 800433e:	d877      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b50      	cmp	r3, #80	@ 0x50
 8004342:	d03c      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xfa>
 8004344:	2b50      	cmp	r3, #80	@ 0x50
 8004346:	d873      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d058      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x13a>
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d86f      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b30      	cmp	r3, #48	@ 0x30
 8004352:	d064      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b30      	cmp	r3, #48	@ 0x30
 8004356:	d86b      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d060      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d867      	bhi.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d05a      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	e062      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	f000 f968 	bl	800464e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800438c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	609a      	str	r2, [r3, #8]
      break;
 8004396:	e04f      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	f000 f951 	bl	800464e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ba:	609a      	str	r2, [r3, #8]
      break;
 80043bc:	e03c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 f8c8 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2150      	movs	r1, #80	@ 0x50
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f91f 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80043dc:	e02c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f8e6 	bl	80045bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2160      	movs	r1, #96	@ 0x60
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f90f 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80043fc:	e01c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f8a8 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8ff 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800441c:	e00c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 f8f6 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 800442e:	e003      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
      break;
 8004434:	e000      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a29      	ldr	r2, [pc, #164]	@ (8004554 <TIM_Base_SetConfig+0xb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a26      	ldr	r2, [pc, #152]	@ (8004558 <TIM_Base_SetConfig+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a25      	ldr	r2, [pc, #148]	@ (800455c <TIM_Base_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <TIM_Base_SetConfig+0xb8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <TIM_Base_SetConfig+0xbc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	@ (800455c <TIM_Base_SetConfig+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <TIM_Base_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0210 	bic.w	r2, r3, #16
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e042      	b.n	8004804 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd fed4 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2224      	movs	r2, #36	@ 0x24
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f82b 	bl	800480c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004846:	f023 030c 	bic.w	r3, r3, #12
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	430b      	orrs	r3, r1
 8004852:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2c      	ldr	r2, [pc, #176]	@ (8004920 <UART_SetConfig+0x114>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7ff fb4a 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	e002      	b.n	8004882 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7ff fb32 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8004880:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009a      	lsls	r2, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	0119      	lsls	r1, r3, #4
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <UART_SetConfig+0x118>)
 80048ba:	fba3 0302 	umull	r0, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2064      	movs	r0, #100	@ 0x64
 80048c2:	fb00 f303 	mul.w	r3, r0, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	3332      	adds	r3, #50	@ 0x32
 80048cc:	4a15      	ldr	r2, [pc, #84]	@ (8004924 <UART_SetConfig+0x118>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d8:	4419      	add	r1, r3
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009a      	lsls	r2, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <UART_SetConfig+0x118>)
 80048f2:	fba3 0302 	umull	r0, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2064      	movs	r0, #100	@ 0x64
 80048fa:	fb00 f303 	mul.w	r3, r0, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	3332      	adds	r3, #50	@ 0x32
 8004904:	4a07      	ldr	r2, [pc, #28]	@ (8004924 <UART_SetConfig+0x118>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	440a      	add	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40013800 	.word	0x40013800
 8004924:	51eb851f 	.word	0x51eb851f

08004928 <malloc>:
 8004928:	4b02      	ldr	r3, [pc, #8]	@ (8004934 <malloc+0xc>)
 800492a:	4601      	mov	r1, r0
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f000 b82d 	b.w	800498c <_malloc_r>
 8004932:	bf00      	nop
 8004934:	20000054 	.word	0x20000054

08004938 <free>:
 8004938:	4b02      	ldr	r3, [pc, #8]	@ (8004944 <free+0xc>)
 800493a:	4601      	mov	r1, r0
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f000 b8f5 	b.w	8004b2c <_free_r>
 8004942:	bf00      	nop
 8004944:	20000054 	.word	0x20000054

08004948 <sbrk_aligned>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4e0f      	ldr	r6, [pc, #60]	@ (8004988 <sbrk_aligned+0x40>)
 800494c:	460c      	mov	r4, r1
 800494e:	6831      	ldr	r1, [r6, #0]
 8004950:	4605      	mov	r5, r0
 8004952:	b911      	cbnz	r1, 800495a <sbrk_aligned+0x12>
 8004954:	f000 f8ae 	bl	8004ab4 <_sbrk_r>
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	4621      	mov	r1, r4
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f8a9 	bl	8004ab4 <_sbrk_r>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d103      	bne.n	800496e <sbrk_aligned+0x26>
 8004966:	f04f 34ff 	mov.w	r4, #4294967295
 800496a:	4620      	mov	r0, r4
 800496c:	bd70      	pop	{r4, r5, r6, pc}
 800496e:	1cc4      	adds	r4, r0, #3
 8004970:	f024 0403 	bic.w	r4, r4, #3
 8004974:	42a0      	cmp	r0, r4
 8004976:	d0f8      	beq.n	800496a <sbrk_aligned+0x22>
 8004978:	1a21      	subs	r1, r4, r0
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f89a 	bl	8004ab4 <_sbrk_r>
 8004980:	3001      	adds	r0, #1
 8004982:	d1f2      	bne.n	800496a <sbrk_aligned+0x22>
 8004984:	e7ef      	b.n	8004966 <sbrk_aligned+0x1e>
 8004986:	bf00      	nop
 8004988:	200002b4 	.word	0x200002b4

0800498c <_malloc_r>:
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	1ccd      	adds	r5, r1, #3
 8004992:	f025 0503 	bic.w	r5, r5, #3
 8004996:	3508      	adds	r5, #8
 8004998:	2d0c      	cmp	r5, #12
 800499a:	bf38      	it	cc
 800499c:	250c      	movcc	r5, #12
 800499e:	2d00      	cmp	r5, #0
 80049a0:	4606      	mov	r6, r0
 80049a2:	db01      	blt.n	80049a8 <_malloc_r+0x1c>
 80049a4:	42a9      	cmp	r1, r5
 80049a6:	d904      	bls.n	80049b2 <_malloc_r+0x26>
 80049a8:	230c      	movs	r3, #12
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	2000      	movs	r0, #0
 80049ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a88 <_malloc_r+0xfc>
 80049b6:	f000 f869 	bl	8004a8c <__malloc_lock>
 80049ba:	f8d8 3000 	ldr.w	r3, [r8]
 80049be:	461c      	mov	r4, r3
 80049c0:	bb44      	cbnz	r4, 8004a14 <_malloc_r+0x88>
 80049c2:	4629      	mov	r1, r5
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff ffbf 	bl	8004948 <sbrk_aligned>
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	4604      	mov	r4, r0
 80049ce:	d158      	bne.n	8004a82 <_malloc_r+0xf6>
 80049d0:	f8d8 4000 	ldr.w	r4, [r8]
 80049d4:	4627      	mov	r7, r4
 80049d6:	2f00      	cmp	r7, #0
 80049d8:	d143      	bne.n	8004a62 <_malloc_r+0xd6>
 80049da:	2c00      	cmp	r4, #0
 80049dc:	d04b      	beq.n	8004a76 <_malloc_r+0xea>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	4639      	mov	r1, r7
 80049e2:	4630      	mov	r0, r6
 80049e4:	eb04 0903 	add.w	r9, r4, r3
 80049e8:	f000 f864 	bl	8004ab4 <_sbrk_r>
 80049ec:	4581      	cmp	r9, r0
 80049ee:	d142      	bne.n	8004a76 <_malloc_r+0xea>
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	4630      	mov	r0, r6
 80049f4:	1a6d      	subs	r5, r5, r1
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7ff ffa6 	bl	8004948 <sbrk_aligned>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d03a      	beq.n	8004a76 <_malloc_r+0xea>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	442b      	add	r3, r5
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	bb62      	cbnz	r2, 8004a68 <_malloc_r+0xdc>
 8004a0e:	f8c8 7000 	str.w	r7, [r8]
 8004a12:	e00f      	b.n	8004a34 <_malloc_r+0xa8>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	1b52      	subs	r2, r2, r5
 8004a18:	d420      	bmi.n	8004a5c <_malloc_r+0xd0>
 8004a1a:	2a0b      	cmp	r2, #11
 8004a1c:	d917      	bls.n	8004a4e <_malloc_r+0xc2>
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	6025      	str	r5, [r4, #0]
 8004a24:	bf18      	it	ne
 8004a26:	6059      	strne	r1, [r3, #4]
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	bf08      	it	eq
 8004a2c:	f8c8 1000 	streq.w	r1, [r8]
 8004a30:	5162      	str	r2, [r4, r5]
 8004a32:	604b      	str	r3, [r1, #4]
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f82f 	bl	8004a98 <__malloc_unlock>
 8004a3a:	f104 000b 	add.w	r0, r4, #11
 8004a3e:	1d23      	adds	r3, r4, #4
 8004a40:	f020 0007 	bic.w	r0, r0, #7
 8004a44:	1ac2      	subs	r2, r0, r3
 8004a46:	bf1c      	itt	ne
 8004a48:	1a1b      	subne	r3, r3, r0
 8004a4a:	50a3      	strne	r3, [r4, r2]
 8004a4c:	e7af      	b.n	80049ae <_malloc_r+0x22>
 8004a4e:	6862      	ldr	r2, [r4, #4]
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	bf0c      	ite	eq
 8004a54:	f8c8 2000 	streq.w	r2, [r8]
 8004a58:	605a      	strne	r2, [r3, #4]
 8004a5a:	e7eb      	b.n	8004a34 <_malloc_r+0xa8>
 8004a5c:	4623      	mov	r3, r4
 8004a5e:	6864      	ldr	r4, [r4, #4]
 8004a60:	e7ae      	b.n	80049c0 <_malloc_r+0x34>
 8004a62:	463c      	mov	r4, r7
 8004a64:	687f      	ldr	r7, [r7, #4]
 8004a66:	e7b6      	b.n	80049d6 <_malloc_r+0x4a>
 8004a68:	461a      	mov	r2, r3
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	d1fb      	bne.n	8004a68 <_malloc_r+0xdc>
 8004a70:	2300      	movs	r3, #0
 8004a72:	6053      	str	r3, [r2, #4]
 8004a74:	e7de      	b.n	8004a34 <_malloc_r+0xa8>
 8004a76:	230c      	movs	r3, #12
 8004a78:	4630      	mov	r0, r6
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f000 f80c 	bl	8004a98 <__malloc_unlock>
 8004a80:	e794      	b.n	80049ac <_malloc_r+0x20>
 8004a82:	6005      	str	r5, [r0, #0]
 8004a84:	e7d6      	b.n	8004a34 <_malloc_r+0xa8>
 8004a86:	bf00      	nop
 8004a88:	200002b8 	.word	0x200002b8

08004a8c <__malloc_lock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	@ (8004a94 <__malloc_lock+0x8>)
 8004a8e:	f000 b84b 	b.w	8004b28 <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	200003f8 	.word	0x200003f8

08004a98 <__malloc_unlock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	@ (8004aa0 <__malloc_unlock+0x8>)
 8004a9a:	f000 b846 	b.w	8004b2a <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	200003f8 	.word	0x200003f8

08004aa4 <memset>:
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4402      	add	r2, r0
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d100      	bne.n	8004aae <memset+0xa>
 8004aac:	4770      	bx	lr
 8004aae:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab2:	e7f9      	b.n	8004aa8 <memset+0x4>

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4d05      	ldr	r5, [pc, #20]	@ (8004ad0 <_sbrk_r+0x1c>)
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fd fdc6 	bl	8002650 <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	200003f4 	.word	0x200003f4

08004ad4 <__errno>:
 8004ad4:	4b01      	ldr	r3, [pc, #4]	@ (8004adc <__errno+0x8>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000054 	.word	0x20000054

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	4d0c      	ldr	r5, [pc, #48]	@ (8004b18 <__libc_init_array+0x38>)
 8004ae6:	4c0d      	ldr	r4, [pc, #52]	@ (8004b1c <__libc_init_array+0x3c>)
 8004ae8:	1b64      	subs	r4, r4, r5
 8004aea:	10a4      	asrs	r4, r4, #2
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	f000 f864 	bl	8004bbc <_init>
 8004af4:	2600      	movs	r6, #0
 8004af6:	4d0a      	ldr	r5, [pc, #40]	@ (8004b20 <__libc_init_array+0x40>)
 8004af8:	4c0a      	ldr	r4, [pc, #40]	@ (8004b24 <__libc_init_array+0x44>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	08004c64 	.word	0x08004c64
 8004b1c:	08004c64 	.word	0x08004c64
 8004b20:	08004c64 	.word	0x08004c64
 8004b24:	08004c68 	.word	0x08004c68

08004b28 <__retarget_lock_acquire_recursive>:
 8004b28:	4770      	bx	lr

08004b2a <__retarget_lock_release_recursive>:
 8004b2a:	4770      	bx	lr

08004b2c <_free_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4605      	mov	r5, r0
 8004b30:	2900      	cmp	r1, #0
 8004b32:	d040      	beq.n	8004bb6 <_free_r+0x8a>
 8004b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b38:	1f0c      	subs	r4, r1, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bfb8      	it	lt
 8004b3e:	18e4      	addlt	r4, r4, r3
 8004b40:	f7ff ffa4 	bl	8004a8c <__malloc_lock>
 8004b44:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <_free_r+0x8c>)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	b933      	cbnz	r3, 8004b58 <_free_r+0x2c>
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	6014      	str	r4, [r2, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b54:	f7ff bfa0 	b.w	8004a98 <__malloc_unlock>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d908      	bls.n	8004b6e <_free_r+0x42>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	1821      	adds	r1, r4, r0
 8004b60:	428b      	cmp	r3, r1
 8004b62:	bf01      	itttt	eq
 8004b64:	6819      	ldreq	r1, [r3, #0]
 8004b66:	685b      	ldreq	r3, [r3, #4]
 8004b68:	1809      	addeq	r1, r1, r0
 8004b6a:	6021      	streq	r1, [r4, #0]
 8004b6c:	e7ed      	b.n	8004b4a <_free_r+0x1e>
 8004b6e:	461a      	mov	r2, r3
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b10b      	cbz	r3, 8004b78 <_free_r+0x4c>
 8004b74:	42a3      	cmp	r3, r4
 8004b76:	d9fa      	bls.n	8004b6e <_free_r+0x42>
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	1850      	adds	r0, r2, r1
 8004b7c:	42a0      	cmp	r0, r4
 8004b7e:	d10b      	bne.n	8004b98 <_free_r+0x6c>
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	4401      	add	r1, r0
 8004b84:	1850      	adds	r0, r2, r1
 8004b86:	4283      	cmp	r3, r0
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	d1e0      	bne.n	8004b4e <_free_r+0x22>
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4408      	add	r0, r1
 8004b92:	6010      	str	r0, [r2, #0]
 8004b94:	6053      	str	r3, [r2, #4]
 8004b96:	e7da      	b.n	8004b4e <_free_r+0x22>
 8004b98:	d902      	bls.n	8004ba0 <_free_r+0x74>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	e7d6      	b.n	8004b4e <_free_r+0x22>
 8004ba0:	6820      	ldr	r0, [r4, #0]
 8004ba2:	1821      	adds	r1, r4, r0
 8004ba4:	428b      	cmp	r3, r1
 8004ba6:	bf01      	itttt	eq
 8004ba8:	6819      	ldreq	r1, [r3, #0]
 8004baa:	685b      	ldreq	r3, [r3, #4]
 8004bac:	1809      	addeq	r1, r1, r0
 8004bae:	6021      	streq	r1, [r4, #0]
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	6054      	str	r4, [r2, #4]
 8004bb4:	e7cb      	b.n	8004b4e <_free_r+0x22>
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	200002b8 	.word	0x200002b8

08004bbc <_init>:
 8004bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bbe:	bf00      	nop
 8004bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc2:	bc08      	pop	{r3}
 8004bc4:	469e      	mov	lr, r3
 8004bc6:	4770      	bx	lr

08004bc8 <_fini>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	bf00      	nop
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr
