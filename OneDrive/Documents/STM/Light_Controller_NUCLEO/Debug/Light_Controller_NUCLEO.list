
Light_Controller_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005178  08005178  00006178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005208  08005208  000070a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005208  08005208  000070a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005208  08005208  000070a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005208  08005208  00006208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08005210  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200000a8  080052b8  000070a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  080052b8  00007428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011674  00000000  00000000  000070d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c38  00000000  00000000  00018745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da8  00000000  00000000  0001c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f76  00000000  00000000  0001d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001586d  00000000  00000000  000361fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da7e  00000000  00000000  0004ba6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d94e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  000d952c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000de0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005160 	.word	0x08005160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08005160 	.word	0x08005160

0800014c <writePage>:

unsigned int dataSize;
uint32_t	startpage 	  =  	START_ADDR_PAGE;
uint32_t	dataread;

void writePage(uint32_t startPage, uint32_t endPage, uint32_t data) {
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	dataSize = FLASH_TYPEPROGRAM_WORD;
 8000158:	4b13      	ldr	r3, [pc, #76]	@ (80001a8 <writePage+0x5c>)
 800015a:	2202      	movs	r2, #2
 800015c:	601a      	str	r2, [r3, #0]

	HAL_FLASH_Unlock();
 800015e:	f002 fdaf 	bl	8002cc0 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000162:	2300      	movs	r3, #0
 8000164:	61bb      	str	r3, [r7, #24]
	EraseInit.PageAddress = startPage;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	623b      	str	r3, [r7, #32]
	EraseInit.NbPages = (endPage - startPage)/FLASH_PAGE_SIZE;
 800016a:	68ba      	ldr	r2, [r7, #8]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	0a9b      	lsrs	r3, r3, #10
 8000172:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PageError = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	617b      	str	r3, [r7, #20]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000178:	f107 0214 	add.w	r2, r7, #20
 800017c:	f107 0318 	add.w	r3, r7, #24
 8000180:	4611      	mov	r1, r2
 8000182:	4618      	mov	r0, r3
 8000184:	f002 fe84 	bl	8002e90 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startPage, data);
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2200      	movs	r2, #0
 800018c:	461c      	mov	r4, r3
 800018e:	4615      	mov	r5, r2
 8000190:	4622      	mov	r2, r4
 8000192:	462b      	mov	r3, r5
 8000194:	68f9      	ldr	r1, [r7, #12]
 8000196:	2002      	movs	r0, #2
 8000198:	f002 fd22 	bl	8002be0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 800019c:	f002 fdb6 	bl	8002d0c <HAL_FLASH_Lock>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	@ 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bdb0      	pop	{r4, r5, r7, pc}
 80001a8:	200000c4 	.word	0x200000c4

080001ac <readData>:

uint32_t readData(uint32_t Addr){
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	return *((__IO uint32_t *)Addr) & 0xFFFF;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	b29b      	uxth	r3, r3
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <I2C_Send>:
		C /*Cursor*/ = 0,
		B /*Blinking*/ = 0;

I2C_HandleTypeDef * lcd_i2c;

void I2C_Send(I2C_HandleTypeDef *i2c, uint8_t DevAddress, uint8_t pData, uint8_t rs) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4603      	mov	r3, r0
 80001d4:	70fb      	strb	r3, [r7, #3]
 80001d6:	460b      	mov	r3, r1
 80001d8:	70bb      	strb	r3, [r7, #2]
 80001da:	4613      	mov	r3, r2
 80001dc:	707b      	strb	r3, [r7, #1]
	uint8_t data[1] = {(pData & 0xF0) | _backlightval | En | rs};
 80001de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80001e2:	f023 030f 	bic.w	r3, r3, #15
 80001e6:	b25a      	sxtb	r2, r3
 80001e8:	4b37      	ldr	r3, [pc, #220]	@ (80002c8 <I2C_Send+0x104>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b25b      	sxtb	r3, r3
 80001ee:	4313      	orrs	r3, r2
 80001f0:	b25b      	sxtb	r3, r3
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	787b      	ldrb	r3, [r7, #1]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 8000202:	f107 020c 	add.w	r2, r7, #12
 8000206:	230a      	movs	r3, #10
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2301      	movs	r3, #1
 800020c:	214e      	movs	r1, #78	@ 0x4e
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f003 fa18 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f002 fbb1 	bl	800297c <HAL_Delay>

	data[0] = (pData & 0xF0) | _backlightval | rs;
 800021a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b25a      	sxtb	r2, r3
 8000224:	4b28      	ldr	r3, [pc, #160]	@ (80002c8 <I2C_Send+0x104>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b25b      	sxtb	r3, r3
 800022a:	4313      	orrs	r3, r2
 800022c:	b25a      	sxtb	r2, r3
 800022e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000232:	4313      	orrs	r3, r2
 8000234:	b25b      	sxtb	r3, r3
 8000236:	b2db      	uxtb	r3, r3
 8000238:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 800023a:	f107 020c 	add.w	r2, r7, #12
 800023e:	230a      	movs	r3, #10
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2301      	movs	r3, #1
 8000244:	214e      	movs	r1, #78	@ 0x4e
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f003 f9fc 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f002 fb95 	bl	800297c <HAL_Delay>

	data[0] = (pData << 4) | _backlightval | rs | En;
 8000252:	78bb      	ldrb	r3, [r7, #2]
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	b25a      	sxtb	r2, r3
 8000258:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <I2C_Send+0x104>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b25b      	sxtb	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b25a      	sxtb	r2, r3
 8000262:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000266:	4313      	orrs	r3, r2
 8000268:	b25b      	sxtb	r3, r3
 800026a:	f043 0304 	orr.w	r3, r3, #4
 800026e:	b25b      	sxtb	r3, r3
 8000270:	b2db      	uxtb	r3, r3
 8000272:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 8000274:	f107 020c 	add.w	r2, r7, #12
 8000278:	230a      	movs	r3, #10
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	214e      	movs	r1, #78	@ 0x4e
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f003 f9df 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f002 fb78 	bl	800297c <HAL_Delay>

	data[0] = (pData << 4) | _backlightval | rs;
 800028c:	78bb      	ldrb	r3, [r7, #2]
 800028e:	011b      	lsls	r3, r3, #4
 8000290:	b25a      	sxtb	r2, r3
 8000292:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <I2C_Send+0x104>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b25b      	sxtb	r3, r3
 8000298:	4313      	orrs	r3, r2
 800029a:	b25a      	sxtb	r2, r3
 800029c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(i2c, (0x27 << 1), data, sizeof(data), 10);
 80002a8:	f107 020c 	add.w	r2, r7, #12
 80002ac:	230a      	movs	r3, #10
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2301      	movs	r3, #1
 80002b2:	214e      	movs	r1, #78	@ 0x4e
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f003 f9c5 	bl	8003644 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f002 fb5e 	bl	800297c <HAL_Delay>
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000

080002cc <LCD_Init>:

void LCD_Init(I2C_HandleTypeDef * i2c){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	lcd_i2c = i2c;
 80002d4:	4a19      	ldr	r2, [pc, #100]	@ (800033c <LCD_Init+0x70>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6013      	str	r3, [r2, #0]

//	Set up for 8 bits interface
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 80002da:	4b18      	ldr	r3, [pc, #96]	@ (800033c <LCD_Init+0x70>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2230      	movs	r2, #48	@ 0x30
 80002e2:	214e      	movs	r1, #78	@ 0x4e
 80002e4:	f7ff ff6e 	bl	80001c4 <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <LCD_Init+0x70>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	2230      	movs	r2, #48	@ 0x30
 80002f0:	214e      	movs	r1, #78	@ 0x4e
 80002f2:	f7ff ff67 	bl	80001c4 <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), (3 << 4), 0);
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <LCD_Init+0x70>)
 80002f8:	6818      	ldr	r0, [r3, #0]
 80002fa:	2300      	movs	r3, #0
 80002fc:	2230      	movs	r2, #48	@ 0x30
 80002fe:	214e      	movs	r1, #78	@ 0x4e
 8000300:	f7ff ff60 	bl	80001c4 <I2C_Send>

//	Change into 4 bits interface - 2 display lines - font 5x8 dots
	I2C_Send(lcd_i2c, (0x27 << 1), 0x8, 0);
 8000304:	4b0d      	ldr	r3, [pc, #52]	@ (800033c <LCD_Init+0x70>)
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	2208      	movs	r2, #8
 800030c:	214e      	movs	r1, #78	@ 0x4e
 800030e:	f7ff ff59 	bl	80001c4 <I2C_Send>

//	Display on - cursor off - blinking on
	I2C_Send(lcd_i2c, (0x27 << 1), 0xD, 0);
 8000312:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <LCD_Init+0x70>)
 8000314:	6818      	ldr	r0, [r3, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	220d      	movs	r2, #13
 800031a:	214e      	movs	r1, #78	@ 0x4e
 800031c:	f7ff ff52 	bl	80001c4 <I2C_Send>

//  Entry mode set
	I2C_Send(lcd_i2c, (0x27 << 1), 0x6, 0);
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <LCD_Init+0x70>)
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	2300      	movs	r3, #0
 8000326:	2206      	movs	r2, #6
 8000328:	214e      	movs	r1, #78	@ 0x4e
 800032a:	f7ff ff4b 	bl	80001c4 <I2C_Send>

	clearLCD();
 800032e:	f000 f807 	bl	8000340 <clearLCD>
};
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000cc 	.word	0x200000cc

08000340 <clearLCD>:
	for (int idx = 0; text[idx] != '\0' && col + idx < 17; idx++){
		I2C_Send(lcd_i2c, (0x27 << 1), text[idx], RS);
	}
}

void clearLCD(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//  Clear display
		I2C_Send(lcd_i2c, (0x27 << 1), 0x1, 0);
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <clearLCD+0x24>)
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	2300      	movs	r3, #0
 800034a:	2201      	movs	r2, #1
 800034c:	214e      	movs	r1, #78	@ 0x4e
 800034e:	f7ff ff39 	bl	80001c4 <I2C_Send>
	//  Home return
		I2C_Send(lcd_i2c, (0x27 << 1), 0x2, 0);
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <clearLCD+0x24>)
 8000354:	6818      	ldr	r0, [r3, #0]
 8000356:	2300      	movs	r3, #0
 8000358:	2202      	movs	r2, #2
 800035a:	214e      	movs	r1, #78	@ 0x4e
 800035c:	f7ff ff32 	bl	80001c4 <I2C_Send>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	200000cc 	.word	0x200000cc

08000368 <setBlinking>:

void setBlinking (uint8_t blink) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	B = blink;
 8000372:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <setBlinking+0x58>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	7013      	strb	r3, [r2, #0]
	I2C_Send(lcd_i2c, (0x27 << 1), 0x0, 0);
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <setBlinking+0x5c>)
 800037a:	6818      	ldr	r0, [r3, #0]
 800037c:	2300      	movs	r3, #0
 800037e:	2200      	movs	r2, #0
 8000380:	214e      	movs	r1, #78	@ 0x4e
 8000382:	f7ff ff1f 	bl	80001c4 <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), ((1 << 3) | (D << 2) | (C << 1) | B), 0);
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <setBlinking+0x5c>)
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <setBlinking+0x60>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	b25b      	sxtb	r3, r3
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	b25a      	sxtb	r2, r3
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <setBlinking+0x64>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b25a      	sxtb	r2, r3
 80003a4:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <setBlinking+0x58>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	4313      	orrs	r3, r2
 80003ac:	b25b      	sxtb	r3, r3
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	2300      	movs	r3, #0
 80003b2:	214e      	movs	r1, #78	@ 0x4e
 80003b4:	f7ff ff06 	bl	80001c4 <I2C_Send>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000c9 	.word	0x200000c9
 80003c4:	200000cc 	.word	0x200000cc
 80003c8:	20000001 	.word	0x20000001
 80003cc:	200000c8 	.word	0x200000c8

080003d0 <setCursor>:

void setCursor (uint8_t cursor) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	C = cursor;
 80003da:	4a13      	ldr	r2, [pc, #76]	@ (8000428 <setCursor+0x58>)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	7013      	strb	r3, [r2, #0]
	I2C_Send(lcd_i2c, (0x27 << 1), 0x0, 0);
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <setCursor+0x5c>)
 80003e2:	6818      	ldr	r0, [r3, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	2200      	movs	r2, #0
 80003e8:	214e      	movs	r1, #78	@ 0x4e
 80003ea:	f7ff feeb 	bl	80001c4 <I2C_Send>
	I2C_Send(lcd_i2c, (0x27 << 1), ((1 << 3) | (D << 2) | (C << 1) | B), 0);
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <setCursor+0x5c>)
 80003f0:	6818      	ldr	r0, [r3, #0]
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <setCursor+0x60>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	b25a      	sxtb	r2, r3
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <setCursor+0x58>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	b25b      	sxtb	r3, r3
 8000408:	4313      	orrs	r3, r2
 800040a:	b25a      	sxtb	r2, r3
 800040c:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <setCursor+0x64>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b25b      	sxtb	r3, r3
 8000412:	4313      	orrs	r3, r2
 8000414:	b25b      	sxtb	r3, r3
 8000416:	b2da      	uxtb	r2, r3
 8000418:	2300      	movs	r3, #0
 800041a:	214e      	movs	r1, #78	@ 0x4e
 800041c:	f7ff fed2 	bl	80001c4 <I2C_Send>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000c8 	.word	0x200000c8
 800042c:	200000cc 	.word	0x200000cc
 8000430:	20000001 	.word	0x20000001
 8000434:	200000c9 	.word	0x200000c9

08000438 <SCH_Init>:
#include "Scheduler.h"

sTask * SCH_Tasks;
unsigned int taskID = 0;

void SCH_Init ( void ) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	SCH_Tasks = NULL;
 800043c:	4b03      	ldr	r3, [pc, #12]	@ (800044c <SCH_Init+0x14>)
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	200000d0 	.word	0x200000d0

08000450 <SCH_Add_Task>:

unsigned int SCH_Add_Task (void (* Task) (void), uint32_t Delay, uint32_t Period) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
    sTask * NewTask = (sTask *) malloc (sizeof( sTask ));
 800045c:	2018      	movs	r0, #24
 800045e:	f004 fd35 	bl	8004ecc <malloc>
 8000462:	4603      	mov	r3, r0
 8000464:	613b      	str	r3, [r7, #16]
    NewTask->pTask = Task;
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	68fa      	ldr	r2, [r7, #12]
 800046a:	601a      	str	r2, [r3, #0]
	NewTask->Delay = Delay;
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	605a      	str	r2, [r3, #4]
    NewTask->Period = Period;
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	609a      	str	r2, [r3, #8]
    NewTask->RunMe = 0;
 8000478:	693b      	ldr	r3, [r7, #16]
 800047a:	2200      	movs	r2, #0
 800047c:	731a      	strb	r2, [r3, #12]
    NewTask->TaskID = taskID++;
 800047e:	4b1d      	ldr	r3, [pc, #116]	@ (80004f4 <SCH_Add_Task+0xa4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	491b      	ldr	r1, [pc, #108]	@ (80004f4 <SCH_Add_Task+0xa4>)
 8000486:	600a      	str	r2, [r1, #0]
 8000488:	693a      	ldr	r2, [r7, #16]
 800048a:	6113      	str	r3, [r2, #16]

    //Find the suitable position for Task
    sTask **pointer = &SCH_Tasks;
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <SCH_Add_Task+0xa8>)
 800048e:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 8000490:	e00b      	b.n	80004aa <SCH_Add_Task+0x5a>
        NewTask->Delay -= (*pointer)->Delay;
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	685a      	ldr	r2, [r3, #4]
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	1ad2      	subs	r2, r2, r3
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	605a      	str	r2, [r3, #4]
        pointer = &((*pointer)->next);
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3314      	adds	r3, #20
 80004a8:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d006      	beq.n	80004c0 <SCH_Add_Task+0x70>
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	685a      	ldr	r2, [r3, #4]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dae8      	bge.n	8000492 <SCH_Add_Task+0x42>
    }
    NewTask->next = *pointer;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	615a      	str	r2, [r3, #20]
    *pointer = NewTask;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	601a      	str	r2, [r3, #0]

    //Update the rest of the linked list
    if (NewTask->next != NULL) {
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <SCH_Add_Task+0x98>
    	(NewTask->next)->Delay -= NewTask->Delay;
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	6859      	ldr	r1, [r3, #4]
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	685a      	ldr	r2, [r3, #4]
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	1a8a      	subs	r2, r1, r2
 80004e6:	605a      	str	r2, [r3, #4]
    }
    return NewTask->TaskID;
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	691b      	ldr	r3, [r3, #16]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000d4 	.word	0x200000d4
 80004f8:	200000d0 	.word	0x200000d0

080004fc <SCH_Add_Task_Dispatcher>:

void SCH_Add_Task_Dispatcher (void (* Task) (void), uint32_t Delay, uint32_t Period, int TaskID) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	603b      	str	r3, [r7, #0]
    sTask * NewTask = (sTask *) malloc (sizeof(sTask));
 800050a:	2018      	movs	r0, #24
 800050c:	f004 fcde 	bl	8004ecc <malloc>
 8000510:	4603      	mov	r3, r0
 8000512:	613b      	str	r3, [r7, #16]
    NewTask->pTask = Task;
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	601a      	str	r2, [r3, #0]
    NewTask->Delay = Delay;
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	605a      	str	r2, [r3, #4]
    NewTask->Period = Period;
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	609a      	str	r2, [r3, #8]
    NewTask->RunMe = 0;
 8000526:	693b      	ldr	r3, [r7, #16]
 8000528:	2200      	movs	r2, #0
 800052a:	731a      	strb	r2, [r3, #12]
    NewTask->TaskID = TaskID;
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	611a      	str	r2, [r3, #16]

    //Find the suitable position for Task
    sTask **pointer = &SCH_Tasks;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <SCH_Add_Task_Dispatcher+0x9c>)
 8000534:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 8000536:	e00b      	b.n	8000550 <SCH_Add_Task_Dispatcher+0x54>
        NewTask->Delay -= (*pointer)->Delay;
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	605a      	str	r2, [r3, #4]
        pointer = &((*pointer)->next);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3314      	adds	r3, #20
 800054e:	617b      	str	r3, [r7, #20]
    while (*pointer != NULL && NewTask->Delay >= (*pointer)->Delay) {
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d006      	beq.n	8000566 <SCH_Add_Task_Dispatcher+0x6a>
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	dae8      	bge.n	8000538 <SCH_Add_Task_Dispatcher+0x3c>
    }
    NewTask->next = *pointer;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	615a      	str	r2, [r3, #20]
    *pointer = NewTask;
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	601a      	str	r2, [r3, #0]

    //Update the rest of the linked list
    if (NewTask->next != NULL) {
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d008      	beq.n	800058e <SCH_Add_Task_Dispatcher+0x92>
    	(NewTask->next)->Delay -= NewTask->Delay;
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	6859      	ldr	r1, [r3, #4]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	1a8a      	subs	r2, r1, r2
 800058c:	605a      	str	r2, [r3, #4]
    }
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000d0 	.word	0x200000d0

0800059c <Delete_Task_Dispatcher>:

void Delete_Task_Dispatcher ( void ) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    sTask * deleteTask = SCH_Tasks;
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <Delete_Task_Dispatcher+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	607b      	str	r3, [r7, #4]

    SCH_Tasks = SCH_Tasks->next;
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <Delete_Task_Dispatcher+0x24>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <Delete_Task_Dispatcher+0x24>)
 80005b0:	6013      	str	r3, [r2, #0]
    free(deleteTask);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f004 fc92 	bl	8004edc <free>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000d0 	.word	0x200000d0

080005c4 <Delete_Task>:

void Delete_Task ( unsigned int TaskID) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    sTask ** taskPointer = &SCH_Tasks;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <Delete_Task+0x50>)
 80005ce:	60fb      	str	r3, [r7, #12]

    while (*taskPointer != NULL && (*taskPointer)->TaskID != TaskID)
 80005d0:	e003      	b.n	80005da <Delete_Task+0x16>
        taskPointer = &((*taskPointer)->next);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3314      	adds	r3, #20
 80005d8:	60fb      	str	r3, [r7, #12]
    while (*taskPointer != NULL && (*taskPointer)->TaskID != TaskID)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <Delete_Task+0x2a>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d1f1      	bne.n	80005d2 <Delete_Task+0xe>

    if (*taskPointer != NULL) {
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d00a      	beq.n	800060c <Delete_Task+0x48>
        sTask *deleteTask = *taskPointer;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	60bb      	str	r3, [r7, #8]
        *taskPointer = (*taskPointer)->next;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]
        free(deleteTask);
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f004 fc68 	bl	8004edc <free>
    }
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d0 	.word	0x200000d0

08000618 <SCH_Update>:

void SCH_Update ( void ) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	if (SCH_Tasks != NULL) {
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <SCH_Update+0x24>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d006      	beq.n	8000632 <SCH_Update+0x1a>
		SCH_Tasks->Delay -= TIMER_CYCLE;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <SCH_Update+0x24>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	4b04      	ldr	r3, [pc, #16]	@ (800063c <SCH_Update+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3a01      	subs	r2, #1
 8000630:	605a      	str	r2, [r3, #4]
	}
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200000d0 	.word	0x200000d0

08000640 <SCH_Dispatcher>:

void SCH_Dispatcher ( void ) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
	if (SCH_Tasks != NULL) {
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <SCH_Dispatcher+0x5c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d021      	beq.n	8000692 <SCH_Dispatcher+0x52>
		if (SCH_Tasks->Delay <= 0) {
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <SCH_Dispatcher+0x5c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dc1c      	bgt.n	8000692 <SCH_Dispatcher+0x52>
			(*(SCH_Tasks->pTask))();
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <SCH_Dispatcher+0x5c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4798      	blx	r3
			if (SCH_Tasks->Period > 0) {
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <SCH_Dispatcher+0x5c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d011      	beq.n	800068e <SCH_Dispatcher+0x4e>
				void *func = SCH_Tasks->pTask;
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <SCH_Dispatcher+0x5c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
				unsigned int Period = SCH_Tasks->Period;
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <SCH_Dispatcher+0x5c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	60bb      	str	r3, [r7, #8]
				unsigned int TaskID = SCH_Tasks->TaskID;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <SCH_Dispatcher+0x5c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	607b      	str	r3, [r7, #4]
				SCH_Add_Task_Dispatcher (func, Period, Period, TaskID);
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	f7ff ff37 	bl	80004fc <SCH_Add_Task_Dispatcher>
			}
			Delete_Task_Dispatcher ();
 800068e:	f7ff ff85 	bl	800059c <Delete_Task_Dispatcher>
		}
	}
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000d0 	.word	0x200000d0

080006a0 <HAL_TIM_PeriodElapsedCallback>:
//        head = head->next;
//    }
//    printf ("\n");
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80006a8:	f7ff ffb6 	bl	8000618 <SCH_Update>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Traffic_Light_FSM_Init>:
							 GPIO_TypeDef * Button2_Port, int Button2_Pin,
							 GPIO_TypeDef * Button3_Port, int Button3_Pin,
							 GPIO_TypeDef * LIGHT1_Sig1_Port, int LIGHT1_Sig1_Pin,
							 GPIO_TypeDef * LIGHT1_Sig2_Port, int LIGHT1_Sig2_Pin,
							 GPIO_TypeDef * LIGHT2_Sig1_Port, int LIGHT2_Sig1_Pin,
							 GPIO_TypeDef * LIGHT2_Sig2_Port, int LIGHT2_Sig2_Pin) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	603b      	str	r3, [r7, #0]
	Button_Init(Button1_Port, Button1_Pin, Button2_Port, Button2_Pin, Button3_Port, Button3_Pin);
 80006c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	68b9      	ldr	r1, [r7, #8]
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f000 feb7 	bl	8001444 <Button_Init>

	LIGHT1_Port [0] = LIGHT1_Sig1_Port;
 80006d6:	4a19      	ldr	r2, [pc, #100]	@ (800073c <Traffic_Light_FSM_Init+0x88>)
 80006d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006da:	6013      	str	r3, [r2, #0]
	LIGHT1_Port [1] = LIGHT1_Sig2_Port;
 80006dc:	4a17      	ldr	r2, [pc, #92]	@ (800073c <Traffic_Light_FSM_Init+0x88>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e0:	6053      	str	r3, [r2, #4]
	LIGHT1_Pin [0] = LIGHT1_Sig1_Pin;
 80006e2:	4a17      	ldr	r2, [pc, #92]	@ (8000740 <Traffic_Light_FSM_Init+0x8c>)
 80006e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006e6:	6013      	str	r3, [r2, #0]
	LIGHT1_Pin [1] = LIGHT1_Sig2_Pin;
 80006e8:	4a15      	ldr	r2, [pc, #84]	@ (8000740 <Traffic_Light_FSM_Init+0x8c>)
 80006ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ec:	6053      	str	r3, [r2, #4]

	LIGHT2_Port [0] = LIGHT2_Sig1_Port;
 80006ee:	4a15      	ldr	r2, [pc, #84]	@ (8000744 <Traffic_Light_FSM_Init+0x90>)
 80006f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006f2:	6013      	str	r3, [r2, #0]
	LIGHT2_Port [1] = LIGHT2_Sig2_Port;
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <Traffic_Light_FSM_Init+0x90>)
 80006f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80006f8:	6053      	str	r3, [r2, #4]
	LIGHT2_Pin [0] = LIGHT2_Sig1_Pin;
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <Traffic_Light_FSM_Init+0x94>)
 80006fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006fe:	6013      	str	r3, [r2, #0]
	LIGHT2_Pin [1] = LIGHT2_Sig2_Pin;
 8000700:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <Traffic_Light_FSM_Init+0x94>)
 8000702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000704:	6053      	str	r3, [r2, #4]

	uint32_t dataSetup = readData(START_ADDR_PAGE);
 8000706:	4811      	ldr	r0, [pc, #68]	@ (800074c <Traffic_Light_FSM_Init+0x98>)
 8000708:	f7ff fd50 	bl	80001ac <readData>
 800070c:	6178      	str	r0, [r7, #20]
	if ((dataSetup >> 24) == 1) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	0e1b      	lsrs	r3, r3, #24
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10d      	bne.n	8000732 <Traffic_Light_FSM_Init+0x7e>
	  RED_Timer = (dataSetup >> 16) & 0xFF;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4a0c      	ldr	r2, [pc, #48]	@ (8000750 <Traffic_Light_FSM_Init+0x9c>)
 800071e:	6013      	str	r3, [r2, #0]
	  AMBER_Timer = (dataSetup >> 8) & 0xFF;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <Traffic_Light_FSM_Init+0xa0>)
 8000728:	6013      	str	r3, [r2, #0]
	  GREEN_Timer = dataSetup & 0xFF;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <Traffic_Light_FSM_Init+0xa4>)
 8000730:	6013      	str	r3, [r2, #0]
    }

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000108 	.word	0x20000108
 8000740:	20000118 	.word	0x20000118
 8000744:	20000110 	.word	0x20000110
 8000748:	20000120 	.word	0x20000120
 800074c:	0801fc00 	.word	0x0801fc00
 8000750:	20000024 	.word	0x20000024
 8000754:	20000028 	.word	0x20000028
 8000758:	2000002c 	.word	0x2000002c

0800075c <Traffic_Light_FSM_Run>:

void Traffic_Light_FSM_Run () {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	if (!init) {
 8000760:	4b9b      	ldr	r3, [pc, #620]	@ (80009d0 <Traffic_Light_FSM_Run+0x274>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <Traffic_Light_FSM_Run+0x16>
		init = 1;
 8000768:	4b99      	ldr	r3, [pc, #612]	@ (80009d0 <Traffic_Light_FSM_Run+0x274>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
		controllerInit ();
 800076e:	f000 fa2f 	bl	8000bd0 <controllerInit>
	}
	switch (Mode) {
 8000772:	4b98      	ldr	r3, [pc, #608]	@ (80009d4 <Traffic_Light_FSM_Run+0x278>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b05      	cmp	r3, #5
 8000778:	f200 81dd 	bhi.w	8000b36 <Traffic_Light_FSM_Run+0x3da>
 800077c:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <Traffic_Light_FSM_Run+0x28>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	08000815 	.word	0x08000815
 8000788:	080008cf 	.word	0x080008cf
 800078c:	08000989 	.word	0x08000989
 8000790:	0800079d 	.word	0x0800079d
 8000794:	08000aaf 	.word	0x08000aaf
 8000798:	08000ad5 	.word	0x08000ad5
	case NORMAL:
		if (Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) {
 800079c:	2001      	movs	r0, #1
 800079e:	f000 ff45 	bl	800162c <Is_Button_Pressed>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00c      	beq.n	80007c2 <Traffic_Light_FSM_Run+0x66>
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 ff59 	bl	8001660 <Is_Button_Long_Pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d106      	bne.n	80007c2 <Traffic_Light_FSM_Run+0x66>
			modePreset (RED);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fc07 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 80007ba:	4b87      	ldr	r3, [pc, #540]	@ (80009d8 <Traffic_Light_FSM_Run+0x27c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
			break;
 80007c0:	e1c4      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		}
		else if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 80007c2:	2002      	movs	r0, #2
 80007c4:	f000 ff32 	bl	800162c <Is_Button_Pressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00c      	beq.n	80007e8 <Traffic_Light_FSM_Run+0x8c>
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 ff46 	bl	8001660 <Is_Button_Long_Pressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d106      	bne.n	80007e8 <Traffic_Light_FSM_Run+0x8c>
			modePreset (SLOWDOWN);
 80007da:	2004      	movs	r0, #4
 80007dc:	f000 fbf4 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	@ (80009d8 <Traffic_Light_FSM_Run+0x27c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
			break;
 80007e6:	e1b1      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		}
		else if (Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3)) {
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 ff1f 	bl	800162c <Is_Button_Pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00c      	beq.n	800080e <Traffic_Light_FSM_Run+0xb2>
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 ff33 	bl	8001660 <Is_Button_Long_Pressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <Traffic_Light_FSM_Run+0xb2>
			modePreset (MANUAL);
 8000800:	2005      	movs	r0, #5
 8000802:	f000 fbe1 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 8000806:	4b74      	ldr	r3, [pc, #464]	@ (80009d8 <Traffic_Light_FSM_Run+0x27c>)
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
			break;
 800080c:	e19e      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		} else {
			display_Light ();
 800080e:	f000 f9ad 	bl	8000b6c <display_Light>
			return;
 8000812:	e19b      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		}
		break;
	case RED:
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000814:	2001      	movs	r0, #1
 8000816:	f000 ff09 	bl	800162c <Is_Button_Pressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d005      	beq.n	800082c <Traffic_Light_FSM_Run+0xd0>
 8000820:	2001      	movs	r0, #1
 8000822:	f000 ff1d 	bl	8001660 <Is_Button_Long_Pressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00b      	beq.n	8000844 <Traffic_Light_FSM_Run+0xe8>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 800082c:	2003      	movs	r0, #3
 800082e:	f000 fefd 	bl	800162c <Is_Button_Pressed>
 8000832:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000834:	2b00      	cmp	r3, #0
 8000836:	d015      	beq.n	8000864 <Traffic_Light_FSM_Run+0x108>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000838:	2003      	movs	r0, #3
 800083a:	f000 ff11 	bl	8001660 <Is_Button_Long_Pressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10f      	bne.n	8000864 <Traffic_Light_FSM_Run+0x108>
			if (RED_Timer != settingBuffer[RED])
 8000844:	4b65      	ldr	r3, [pc, #404]	@ (80009dc <Traffic_Light_FSM_Run+0x280>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b65      	ldr	r3, [pc, #404]	@ (80009e0 <Traffic_Light_FSM_Run+0x284>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d002      	beq.n	8000856 <Traffic_Light_FSM_Run+0xfa>
				setFlag = 1;
 8000850:	4b64      	ldr	r3, [pc, #400]	@ (80009e4 <Traffic_Light_FSM_Run+0x288>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
			modePreset (AMBER);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 fbb6 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 800085c:	4b5e      	ldr	r3, [pc, #376]	@ (80009d8 <Traffic_Light_FSM_Run+0x27c>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
			break;
 8000862:	e173      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		}
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 8000864:	2002      	movs	r0, #2
 8000866:	f000 fee1 	bl	800162c <Is_Button_Pressed>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <Traffic_Light_FSM_Run+0x126>
 8000870:	2002      	movs	r0, #2
 8000872:	f000 fef5 	bl	8001660 <Is_Button_Long_Pressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <Traffic_Light_FSM_Run+0x126>
			increaseTimer(&settingBuffer[RED]);
 800087c:	4857      	ldr	r0, [pc, #348]	@ (80009dc <Traffic_Light_FSM_Run+0x280>)
 800087e:	f000 fb73 	bl	8000f68 <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 8000882:	2002      	movs	r0, #2
 8000884:	f000 feec 	bl	8001660 <Is_Button_Long_Pressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00f      	beq.n	80008ae <Traffic_Light_FSM_Run+0x152>
			if (longPressedID == -1) {
 800088e:	4b56      	ldr	r3, [pc, #344]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000896:	f040 8150 	bne.w	8000b3a <Traffic_Light_FSM_Run+0x3de>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 80008a0:	4852      	ldr	r0, [pc, #328]	@ (80009ec <Traffic_Light_FSM_Run+0x290>)
 80008a2:	f7ff fdd5 	bl	8000450 <SCH_Add_Task>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a4f      	ldr	r2, [pc, #316]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80008aa:	6013      	str	r3, [r2, #0]
			if (longPressedID != -1) {
				Delete_Task (longPressedID);
				longPressedID = -1;
			}
		}
		break;
 80008ac:	e145      	b.n	8000b3a <Traffic_Light_FSM_Run+0x3de>
			if (longPressedID != -1) {
 80008ae:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b6:	f000 8140 	beq.w	8000b3a <Traffic_Light_FSM_Run+0x3de>
				Delete_Task (longPressedID);
 80008ba:	4b4b      	ldr	r3, [pc, #300]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe80 	bl	80005c4 <Delete_Task>
				longPressedID = -1;
 80008c4:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	601a      	str	r2, [r3, #0]
		break;
 80008cc:	e135      	b.n	8000b3a <Traffic_Light_FSM_Run+0x3de>
	case AMBER:
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 feac 	bl	800162c <Is_Button_Pressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <Traffic_Light_FSM_Run+0x18a>
 80008da:	2001      	movs	r0, #1
 80008dc:	f000 fec0 	bl	8001660 <Is_Button_Long_Pressed>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00b      	beq.n	80008fe <Traffic_Light_FSM_Run+0x1a2>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 fea0 	bl	800162c <Is_Button_Pressed>
 80008ec:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d015      	beq.n	800091e <Traffic_Light_FSM_Run+0x1c2>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 feb4 	bl	8001660 <Is_Button_Long_Pressed>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <Traffic_Light_FSM_Run+0x1c2>
			if (AMBER_Timer != settingBuffer[AMBER])
 80008fe:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <Traffic_Light_FSM_Run+0x280>)
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <Traffic_Light_FSM_Run+0x294>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d002      	beq.n	8000910 <Traffic_Light_FSM_Run+0x1b4>
				setFlag = 1;
 800090a:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <Traffic_Light_FSM_Run+0x288>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
			modePreset (GREEN);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 fb59 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <Traffic_Light_FSM_Run+0x27c>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
			break;
 800091c:	e116      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		}
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 800091e:	2002      	movs	r0, #2
 8000920:	f000 fe84 	bl	800162c <Is_Button_Pressed>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <Traffic_Light_FSM_Run+0x1e0>
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fe98 	bl	8001660 <Is_Button_Long_Pressed>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <Traffic_Light_FSM_Run+0x1e0>
			increaseTimer (&settingBuffer[AMBER]);
 8000936:	482f      	ldr	r0, [pc, #188]	@ (80009f4 <Traffic_Light_FSM_Run+0x298>)
 8000938:	f000 fb16 	bl	8000f68 <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 800093c:	2002      	movs	r0, #2
 800093e:	f000 fe8f 	bl	8001660 <Is_Button_Long_Pressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00f      	beq.n	8000968 <Traffic_Light_FSM_Run+0x20c>
			if (longPressedID == -1) {
 8000948:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	f040 80f5 	bne.w	8000b3e <Traffic_Light_FSM_Run+0x3e2>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800095a:	4824      	ldr	r0, [pc, #144]	@ (80009ec <Traffic_Light_FSM_Run+0x290>)
 800095c:	f7ff fd78 	bl	8000450 <SCH_Add_Task>
 8000960:	4603      	mov	r3, r0
 8000962:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 8000964:	6013      	str	r3, [r2, #0]
			if (longPressedID != -1) {
				Delete_Task (longPressedID);
				longPressedID = -1;
			}
		}
		break;
 8000966:	e0ea      	b.n	8000b3e <Traffic_Light_FSM_Run+0x3e2>
			if (longPressedID != -1) {
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	f000 80e5 	beq.w	8000b3e <Traffic_Light_FSM_Run+0x3e2>
				Delete_Task (longPressedID);
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe23 	bl	80005c4 <Delete_Task>
				longPressedID = -1;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	601a      	str	r2, [r3, #0]
		break;
 8000986:	e0da      	b.n	8000b3e <Traffic_Light_FSM_Run+0x3e2>
	case GREEN:
		if (Is_Button_Pressed (BUTTON2) && !Is_Button_Long_Pressed (BUTTON2)) {
 8000988:	2002      	movs	r0, #2
 800098a:	f000 fe4f 	bl	800162c <Is_Button_Pressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d008      	beq.n	80009a6 <Traffic_Light_FSM_Run+0x24a>
 8000994:	2002      	movs	r0, #2
 8000996:	f000 fe63 	bl	8001660 <Is_Button_Long_Pressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <Traffic_Light_FSM_Run+0x24a>
			increaseTimer (&settingBuffer[GREEN]);
 80009a0:	4815      	ldr	r0, [pc, #84]	@ (80009f8 <Traffic_Light_FSM_Run+0x29c>)
 80009a2:	f000 fae1 	bl	8000f68 <increaseTimer>
		}
		if (Is_Button_Long_Pressed (BUTTON2)) {
 80009a6:	2002      	movs	r0, #2
 80009a8:	f000 fe5a 	bl	8001660 <Is_Button_Long_Pressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d024      	beq.n	80009fc <Traffic_Light_FSM_Run+0x2a0>
			if (longPressedID == -1) {
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ba:	d12d      	bne.n	8000a18 <Traffic_Light_FSM_Run+0x2bc>
				longPressedID = SCH_Add_Task(checkButton2LongPressed, 1400, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 80009c2:	480a      	ldr	r0, [pc, #40]	@ (80009ec <Traffic_Light_FSM_Run+0x290>)
 80009c4:	f7ff fd44 	bl	8000450 <SCH_Add_Task>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <Traffic_Light_FSM_Run+0x28c>)
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e023      	b.n	8000a18 <Traffic_Light_FSM_Run+0x2bc>
 80009d0:	200000d8 	.word	0x200000d8
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000018 	.word	0x20000018
 80009e0:	20000024 	.word	0x20000024
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	20000034 	.word	0x20000034
 80009ec:	08001245 	.word	0x08001245
 80009f0:	20000028 	.word	0x20000028
 80009f4:	2000001c 	.word	0x2000001c
 80009f8:	20000020 	.word	0x20000020
			}
		} else {
			if (longPressedID != -1) {
 80009fc:	4b54      	ldr	r3, [pc, #336]	@ (8000b50 <Traffic_Light_FSM_Run+0x3f4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a04:	d008      	beq.n	8000a18 <Traffic_Light_FSM_Run+0x2bc>
				Delete_Task (longPressedID);
 8000a06:	4b52      	ldr	r3, [pc, #328]	@ (8000b50 <Traffic_Light_FSM_Run+0x3f4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fdda 	bl	80005c4 <Delete_Task>
				longPressedID = -1;
 8000a10:	4b4f      	ldr	r3, [pc, #316]	@ (8000b50 <Traffic_Light_FSM_Run+0x3f4>)
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	601a      	str	r2, [r3, #0]
			}
		}
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f000 fe07 	bl	800162c <Is_Button_Pressed>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <Traffic_Light_FSM_Run+0x2d4>
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fe1b 	bl	8001660 <Is_Button_Long_Pressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00c      	beq.n	8000a4a <Traffic_Light_FSM_Run+0x2ee>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 fdfb 	bl	800162c <Is_Button_Pressed>
 8000a36:	4603      	mov	r3, r0
		if ((Is_Button_Pressed (BUTTON1) && !Is_Button_Long_Pressed (BUTTON1)) ||
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 8082 	beq.w	8000b42 <Traffic_Light_FSM_Run+0x3e6>
			(Is_Button_Pressed (BUTTON3) && !Is_Button_Long_Pressed (BUTTON3))) {
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 fe0e 	bl	8001660 <Is_Button_Long_Pressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d17b      	bne.n	8000b42 <Traffic_Light_FSM_Run+0x3e6>
			if (GREEN_Timer != settingBuffer[GREEN])
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <Traffic_Light_FSM_Run+0x3f8>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	4b42      	ldr	r3, [pc, #264]	@ (8000b58 <Traffic_Light_FSM_Run+0x3fc>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d002      	beq.n	8000a5c <Traffic_Light_FSM_Run+0x300>
				setFlag = 1;
 8000a56:	4b41      	ldr	r3, [pc, #260]	@ (8000b5c <Traffic_Light_FSM_Run+0x400>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
			if (setFlag) {
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <Traffic_Light_FSM_Run+0x400>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d019      	beq.n	8000a98 <Traffic_Light_FSM_Run+0x33c>
				if (settingBuffer[RED] != settingBuffer[AMBER] + settingBuffer[GREEN]) {//Process if the change is invalid
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <Traffic_Light_FSM_Run+0x3f8>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <Traffic_Light_FSM_Run+0x3f8>)
 8000a6a:	6859      	ldr	r1, [r3, #4]
 8000a6c:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <Traffic_Light_FSM_Run+0x3f8>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	440b      	add	r3, r1
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d00b      	beq.n	8000a8e <Traffic_Light_FSM_Run+0x332>
					resetSettingBuffer ();
 8000a76:	f000 fa8d 	bl	8000f94 <resetSettingBuffer>
					modePreset (RED);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 faa4 	bl	8000fc8 <modePreset>
					changeModeFlag = 1;
 8000a80:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <Traffic_Light_FSM_Run+0x404>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
					setFlag = 0;
 8000a86:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <Traffic_Light_FSM_Run+0x400>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
					break;
 8000a8c:	e05e      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
				} else {
					saveState ();
 8000a8e:	f000 fa39 	bl	8000f04 <saveState>
					setFlag = 0;
 8000a92:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <Traffic_Light_FSM_Run+0x400>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
				}
			}
			if (!setFlag) {//If we not make any change or the change is valid then enter mode normal to run
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <Traffic_Light_FSM_Run+0x400>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d150      	bne.n	8000b42 <Traffic_Light_FSM_Run+0x3e6>
				modePreset (NORMAL);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 fa91 	bl	8000fc8 <modePreset>
				changeModeFlag = 1;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <Traffic_Light_FSM_Run+0x404>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000aac:	e049      	b.n	8000b42 <Traffic_Light_FSM_Run+0x3e6>
	case SLOWDOWN:
		if (Is_Button_Pressed(BUTTON2) && !Is_Button_Long_Pressed(BUTTON2)) {
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f000 fdbc 	bl	800162c <Is_Button_Pressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d045      	beq.n	8000b46 <Traffic_Light_FSM_Run+0x3ea>
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fdd0 	bl	8001660 <Is_Button_Long_Pressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d13f      	bne.n	8000b46 <Traffic_Light_FSM_Run+0x3ea>
			modePreset (NORMAL);
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f000 fa7e 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <Traffic_Light_FSM_Run+0x404>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ad2:	e038      	b.n	8000b46 <Traffic_Light_FSM_Run+0x3ea>
	case MANUAL:
		if (Is_Button_Pressed(BUTTON3) && !Is_Button_Long_Pressed(BUTTON3)) {
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fda9 	bl	800162c <Is_Button_Pressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d017      	beq.n	8000b10 <Traffic_Light_FSM_Run+0x3b4>
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 fdbd 	bl	8001660 <Is_Button_Long_Pressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d111      	bne.n	8000b10 <Traffic_Light_FSM_Run+0x3b4>
			if (waitSwitchingFlag)
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <Traffic_Light_FSM_Run+0x408>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <Traffic_Light_FSM_Run+0x3a2>
				Delete_Task(waitSwitchingTaskID);
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <Traffic_Light_FSM_Run+0x40c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd63 	bl	80005c4 <Delete_Task>
			modePreset (NORMAL);
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 fa62 	bl	8000fc8 <modePreset>
			changeModeFlag = 1;
 8000b04:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <Traffic_Light_FSM_Run+0x404>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
			waitSwitchingFlag = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <Traffic_Light_FSM_Run+0x408>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
		}
		if (Is_Button_Pressed(BUTTON1) && !Is_Button_Long_Pressed(BUTTON1) && waitSwitchingFlag == 0) {
 8000b10:	2001      	movs	r0, #1
 8000b12:	f000 fd8b 	bl	800162c <Is_Button_Pressed>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d016      	beq.n	8000b4a <Traffic_Light_FSM_Run+0x3ee>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fd9f 	bl	8001660 <Is_Button_Long_Pressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d110      	bne.n	8000b4a <Traffic_Light_FSM_Run+0x3ee>
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <Traffic_Light_FSM_Run+0x408>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10c      	bne.n	8000b4a <Traffic_Light_FSM_Run+0x3ee>
			switchRoute();
 8000b30:	f000 fb3e 	bl	80011b0 <switchRoute>
		}
		break;
 8000b34:	e009      	b.n	8000b4a <Traffic_Light_FSM_Run+0x3ee>
	default:
		break;
 8000b36:	bf00      	nop
 8000b38:	e008      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		break;
 8000b3a:	bf00      	nop
 8000b3c:	e006      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		break;
 8000b3e:	bf00      	nop
 8000b40:	e004      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		break;
 8000b42:	bf00      	nop
 8000b44:	e002      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		break;
 8000b46:	bf00      	nop
 8000b48:	e000      	b.n	8000b4c <Traffic_Light_FSM_Run+0x3f0>
		break;
 8000b4a:	bf00      	nop
	}
}
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000034 	.word	0x20000034
 8000b54:	20000018 	.word	0x20000018
 8000b58:	2000002c 	.word	0x2000002c
 8000b5c:	200000dc 	.word	0x200000dc
 8000b60:	20000004 	.word	0x20000004
 8000b64:	200000e0 	.word	0x200000e0
 8000b68:	20000010 	.word	0x20000010

08000b6c <display_Light>:

void display_Light () {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	if (milliSec >= 1000) {
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <display_Light+0x50>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b78:	db1c      	blt.n	8000bb4 <display_Light+0x48>
		second--;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <display_Light+0x54>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <display_Light+0x54>)
 8000b82:	6013      	str	r3, [r2, #0]
		redLightTimer--;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <display_Light+0x58>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc4 <display_Light+0x58>)
 8000b8c:	6013      	str	r3, [r2, #0]
		milliSec = 0;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <display_Light+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]

		if (second <= 0) {
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <display_Light+0x54>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc0b      	bgt.n	8000bb4 <display_Light+0x48>
		  fetchNextState();
 8000b9c:	f000 f844 	bl	8000c28 <fetchNextState>
		  switch (lightController.currentState) {
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <display_Light+0x5c>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d104      	bne.n	8000bb2 <display_Light+0x46>
			  case Green:
				  redLightTimer = RED_Timer;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <display_Light+0x60>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <display_Light+0x58>)
 8000bae:	6013      	str	r3, [r2, #0]
				  break;
 8000bb0:	e000      	b.n	8000bb4 <display_Light+0x48>
			  default:
				  break;
 8000bb2:	bf00      	nop
		  }
		}
	}
	lightOn();
 8000bb4:	f000 f866 	bl	8000c84 <lightOn>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000f4 	.word	0x200000f4
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	20000030 	.word	0x20000030
 8000bc8:	200000e4 	.word	0x200000e4
 8000bcc:	20000024 	.word	0x20000024

08000bd0 <controllerInit>:

/*controllerInit used to reload the value of green light time and red light time
for the traffic light before enter normal mode*/
void controllerInit (void) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	if (Mode == MANUAL) {
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <controllerInit+0x3c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	d105      	bne.n	8000be8 <controllerInit+0x18>
		lightController.isLight1 = isLight1Manual;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <controllerInit+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <controllerInit+0x44>)
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e002      	b.n	8000bee <controllerInit+0x1e>
	} else {
		lightController.isLight1 = 1;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <controllerInit+0x44>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
	}
	lightController.currentState = Green;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <controllerInit+0x44>)
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	705a      	strb	r2, [r3, #1]
	second = GREEN_Timer;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <controllerInit+0x48>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <controllerInit+0x4c>)
 8000bfa:	6013      	str	r3, [r2, #0]
	redLightTimer = RED_Timer;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <controllerInit+0x50>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <controllerInit+0x54>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	200000e4 	.word	0x200000e4
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	20000014 	.word	0x20000014
 8000c20:	20000024 	.word	0x20000024
 8000c24:	20000030 	.word	0x20000030

08000c28 <fetchNextState>:

/*Load next state when the counter gets to zero*/
void fetchNextState (void) {
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	switch (lightController.currentState) {
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <fetchNextState+0x4c>)
 8000c2e:	785b      	ldrb	r3, [r3, #1]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d009      	beq.n	8000c48 <fetchNextState+0x20>
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d119      	bne.n	8000c6c <fetchNextState+0x44>
		case Green:
			lightController.currentState = Yellow;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <fetchNextState+0x4c>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	705a      	strb	r2, [r3, #1]
			second = AMBER_Timer;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <fetchNextState+0x50>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <fetchNextState+0x54>)
 8000c44:	6013      	str	r3, [r2, #0]
			return;
 8000c46:	e012      	b.n	8000c6e <fetchNextState+0x46>
		case Yellow:
			lightController.currentState = Green;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <fetchNextState+0x4c>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	705a      	strb	r2, [r3, #1]
			lightController.isLight1 = !lightController.isLight1;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <fetchNextState+0x4c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf0c      	ite	eq
 8000c56:	2301      	moveq	r3, #1
 8000c58:	2300      	movne	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <fetchNextState+0x4c>)
 8000c60:	701a      	strb	r2, [r3, #0]
			second = GREEN_Timer;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <fetchNextState+0x58>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <fetchNextState+0x54>)
 8000c68:	6013      	str	r3, [r2, #0]
			return;
 8000c6a:	e000      	b.n	8000c6e <fetchNextState+0x46>
		default:
			return;
 8000c6c:	bf00      	nop
	}
}
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	200000e4 	.word	0x200000e4
 8000c78:	20000028 	.word	0x20000028
 8000c7c:	20000014 	.word	0x20000014
 8000c80:	2000002c 	.word	0x2000002c

08000c84 <lightOn>:

/*Turn on lights on the traffic light*/
void lightOn (void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	if (lightController.isLight1) {
 8000c88:	4b43      	ldr	r3, [pc, #268]	@ (8000d98 <lightOn+0x114>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d03e      	beq.n	8000d0e <lightOn+0x8a>
		switch (lightController.currentState) {
 8000c90:	4b41      	ldr	r3, [pc, #260]	@ (8000d98 <lightOn+0x114>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d014      	beq.n	8000cc2 <lightOn+0x3e>
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d125      	bne.n	8000ce8 <lightOn+0x64>
			case Green:
				HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <lightOn+0x118>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a3f      	ldr	r2, [pc, #252]	@ (8000da0 <lightOn+0x11c>)
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	b291      	uxth	r1, r2
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fb34 	bl	8003316 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000cae:	4b3b      	ldr	r3, [pc, #236]	@ (8000d9c <lightOn+0x118>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8000da0 <lightOn+0x11c>)
 8000cb4:	6852      	ldr	r2, [r2, #4]
 8000cb6:	b291      	uxth	r1, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fb2b 	bl	8003316 <HAL_GPIO_WritePin>
				break;
 8000cc0:	e013      	b.n	8000cea <lightOn+0x66>
			case Yellow:
				HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 8000cc2:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <lightOn+0x118>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a36      	ldr	r2, [pc, #216]	@ (8000da0 <lightOn+0x11c>)
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	b291      	uxth	r1, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fb21 	bl	8003316 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 8000cd4:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <lightOn+0x118>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a31      	ldr	r2, [pc, #196]	@ (8000da0 <lightOn+0x11c>)
 8000cda:	6852      	ldr	r2, [r2, #4]
 8000cdc:	b291      	uxth	r1, r2
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fb18 	bl	8003316 <HAL_GPIO_WritePin>
				break;
 8000ce6:	e000      	b.n	8000cea <lightOn+0x66>
			default:
				break;
 8000ce8:	bf00      	nop
		}
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000cea:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <lightOn+0x120>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <lightOn+0x124>)
 8000cf0:	6812      	ldr	r2, [r2, #0]
 8000cf2:	b291      	uxth	r1, r2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fb0d 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000cfc:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <lightOn+0x120>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4a29      	ldr	r2, [pc, #164]	@ (8000da8 <lightOn+0x124>)
 8000d02:	6852      	ldr	r2, [r2, #4]
 8000d04:	b291      	uxth	r1, r2
 8000d06:	2201      	movs	r2, #1
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fb04 	bl	8003316 <HAL_GPIO_WritePin>
	}
	if (!lightController.isLight1) {
 8000d0e:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <lightOn+0x114>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d13e      	bne.n	8000d94 <lightOn+0x110>
		switch (lightController.currentState) {
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <lightOn+0x114>)
 8000d18:	785b      	ldrb	r3, [r3, #1]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d014      	beq.n	8000d48 <lightOn+0xc4>
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d125      	bne.n	8000d6e <lightOn+0xea>
		case Green:
				HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <lightOn+0x120>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a20      	ldr	r2, [pc, #128]	@ (8000da8 <lightOn+0x124>)
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 faf1 	bl	8003316 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <lightOn+0x120>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <lightOn+0x124>)
 8000d3a:	6852      	ldr	r2, [r2, #4]
 8000d3c:	b291      	uxth	r1, r2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fae8 	bl	8003316 <HAL_GPIO_WritePin>
				break;
 8000d46:	e013      	b.n	8000d70 <lightOn+0xec>
			case Yellow:
				HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <lightOn+0x120>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a16      	ldr	r2, [pc, #88]	@ (8000da8 <lightOn+0x124>)
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	b291      	uxth	r1, r2
 8000d52:	2200      	movs	r2, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fade 	bl	8003316 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <lightOn+0x120>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <lightOn+0x124>)
 8000d60:	6852      	ldr	r2, [r2, #4]
 8000d62:	b291      	uxth	r1, r2
 8000d64:	2201      	movs	r2, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fad5 	bl	8003316 <HAL_GPIO_WritePin>
				break;
 8000d6c:	e000      	b.n	8000d70 <lightOn+0xec>
			default:
				break;
 8000d6e:	bf00      	nop
		}
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <lightOn+0x118>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <lightOn+0x11c>)
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	b291      	uxth	r1, r2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 faca 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <lightOn+0x118>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <lightOn+0x11c>)
 8000d88:	6852      	ldr	r2, [r2, #4]
 8000d8a:	b291      	uxth	r1, r2
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fac1 	bl	8003316 <HAL_GPIO_WritePin>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200000e4 	.word	0x200000e4
 8000d9c:	20000108 	.word	0x20000108
 8000da0:	20000118 	.word	0x20000118
 8000da4:	20000110 	.word	0x20000110
 8000da8:	20000120 	.word	0x20000120

08000dac <turnOffLight>:

/*Turn off lights on the traffic light*/
void turnOffLight(){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <turnOffLight+0x50>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <turnOffLight+0x54>)
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	b291      	uxth	r1, r2
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 faaa 	bl	8003316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <turnOffLight+0x50>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <turnOffLight+0x54>)
 8000dc8:	6852      	ldr	r2, [r2, #4]
 8000dca:	b291      	uxth	r1, r2
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 faa1 	bl	8003316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <turnOffLight+0x58>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <turnOffLight+0x5c>)
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	b291      	uxth	r1, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fa98 	bl	8003316 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <turnOffLight+0x58>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <turnOffLight+0x5c>)
 8000dec:	6852      	ldr	r2, [r2, #4]
 8000dee:	b291      	uxth	r1, r2
 8000df0:	2200      	movs	r2, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fa8f 	bl	8003316 <HAL_GPIO_WritePin>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000108 	.word	0x20000108
 8000e00:	20000118 	.word	0x20000118
 8000e04:	20000110 	.word	0x20000110
 8000e08:	20000120 	.word	0x20000120

08000e0c <displayMode>:

/*This function is to display the correct numbers on 4 7-SEGs Leds corresponding to each mode*/
void displayMode (enum FSM_Mode mode) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d046      	beq.n	8000eaa <displayMode+0x9e>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	dc64      	bgt.n	8000eea <displayMode+0xde>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <displayMode+0x1e>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d020      	beq.n	8000e6a <displayMode+0x5e>
		LED_Buffer [1] = 3;
		LED_Buffer [2] = settingBuffer[GREEN] / 10;
		LED_Buffer [3] = settingBuffer[GREEN] % 10;
		break;
	default:
		break;
 8000e28:	e05f      	b.n	8000eea <displayMode+0xde>
		LED_Buffer [0] = 0;
 8000e2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <displayMode+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 1;
 8000e30:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <displayMode+0xec>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[RED] / 10;
 8000e36:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <displayMode+0xf0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <displayMode+0xf4>)
 8000e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e40:	1092      	asrs	r2, r2, #2
 8000e42:	17db      	asrs	r3, r3, #31
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef8 <displayMode+0xec>)
 8000e48:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[RED] % 10;
 8000e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <displayMode+0xf0>)
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <displayMode+0xf4>)
 8000e50:	fb83 2301 	smull	r2, r3, r3, r1
 8000e54:	109a      	asrs	r2, r3, #2
 8000e56:	17cb      	asrs	r3, r1, #31
 8000e58:	1ad2      	subs	r2, r2, r3
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	1aca      	subs	r2, r1, r3
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <displayMode+0xec>)
 8000e66:	60da      	str	r2, [r3, #12]
		break;
 8000e68:	e040      	b.n	8000eec <displayMode+0xe0>
		LED_Buffer [0] = 0;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <displayMode+0xec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 2;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <displayMode+0xec>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[AMBER] / 10;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <displayMode+0xf0>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <displayMode+0xf4>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	1092      	asrs	r2, r2, #2
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <displayMode+0xec>)
 8000e88:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[AMBER] % 10;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <displayMode+0xf0>)
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <displayMode+0xf4>)
 8000e90:	fb83 2301 	smull	r2, r3, r3, r1
 8000e94:	109a      	asrs	r2, r3, #2
 8000e96:	17cb      	asrs	r3, r1, #31
 8000e98:	1ad2      	subs	r2, r2, r3
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	1aca      	subs	r2, r1, r3
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <displayMode+0xec>)
 8000ea6:	60da      	str	r2, [r3, #12]
		break;
 8000ea8:	e020      	b.n	8000eec <displayMode+0xe0>
		LED_Buffer [0] = 0;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <displayMode+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
		LED_Buffer [1] = 3;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <displayMode+0xec>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	605a      	str	r2, [r3, #4]
		LED_Buffer [2] = settingBuffer[GREEN] / 10;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <displayMode+0xf0>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4a11      	ldr	r2, [pc, #68]	@ (8000f00 <displayMode+0xf4>)
 8000ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec0:	1092      	asrs	r2, r2, #2
 8000ec2:	17db      	asrs	r3, r3, #31
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef8 <displayMode+0xec>)
 8000ec8:	6093      	str	r3, [r2, #8]
		LED_Buffer [3] = settingBuffer[GREEN] % 10;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <displayMode+0xf0>)
 8000ecc:	6899      	ldr	r1, [r3, #8]
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <displayMode+0xf4>)
 8000ed0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed4:	109a      	asrs	r2, r3, #2
 8000ed6:	17cb      	asrs	r3, r1, #31
 8000ed8:	1ad2      	subs	r2, r2, r3
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <displayMode+0xec>)
 8000ee6:	60da      	str	r2, [r3, #12]
		break;
 8000ee8:	e000      	b.n	8000eec <displayMode+0xe0>
		break;
 8000eea:	bf00      	nop
	}
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000f8 	.word	0x200000f8
 8000efc:	20000018 	.word	0x20000018
 8000f00:	66666667 	.word	0x66666667

08000f04 <saveState>:

/*To save state when the change is valid*/
void saveState () {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	RED_Timer = settingBuffer[0];
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <saveState+0x4c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <saveState+0x50>)
 8000f10:	6013      	str	r3, [r2, #0]
	AMBER_Timer = settingBuffer[1];
 8000f12:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <saveState+0x4c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <saveState+0x54>)
 8000f18:	6013      	str	r3, [r2, #0]
	GREEN_Timer = settingBuffer[2];
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <saveState+0x4c>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <saveState+0x58>)
 8000f20:	6013      	str	r3, [r2, #0]

	uint32_t data = (1U << 24) | (RED_Timer << 16) | (AMBER_Timer << 8) | GREEN_Timer;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <saveState+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <saveState+0x54>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <saveState+0x58>)
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f3c:	607b      	str	r3, [r7, #4]
	writePage(START_ADDR_PAGE, END_ADDR_PAGE, data);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <saveState+0x5c>)
 8000f42:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <saveState+0x60>)
 8000f44:	f7ff f902 	bl	800014c <writePage>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000018 	.word	0x20000018
 8000f54:	20000024 	.word	0x20000024
 8000f58:	20000028 	.word	0x20000028
 8000f5c:	2000002c 	.word	0x2000002c
 8000f60:	08020000 	.word	0x08020000
 8000f64:	0801fc00 	.word	0x0801fc00

08000f68 <increaseTimer>:

/*This function is to increase and make sure if it valid*/
void increaseTimer (int * buffer) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if (++*buffer > 99)		*buffer = 1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b63      	cmp	r3, #99	@ 0x63
 8000f80:	dd02      	ble.n	8000f88 <increaseTimer+0x20>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
	...

08000f94 <resetSettingBuffer>:
	LED_Buffer [2] = second / 10;
	LED_Buffer [3] = second % 10;
}

/*Reset the buffer if the change we made is invalid*/
void resetSettingBuffer () {
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	settingBuffer[RED] = RED_Timer;
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <resetSettingBuffer+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <resetSettingBuffer+0x28>)
 8000f9e:	6013      	str	r3, [r2, #0]
	settingBuffer[AMBER] = AMBER_Timer;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <resetSettingBuffer+0x2c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <resetSettingBuffer+0x28>)
 8000fa6:	6053      	str	r3, [r2, #4]
	settingBuffer[GREEN] = GREEN_Timer;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <resetSettingBuffer+0x30>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a03      	ldr	r2, [pc, #12]	@ (8000fbc <resetSettingBuffer+0x28>)
 8000fae:	6093      	str	r3, [r2, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000024 	.word	0x20000024
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	2000002c 	.word	0x2000002c

08000fc8 <modePreset>:

/*Preparing for the next state when we make state transition of FSM*/
void modePreset (enum FSM_Mode mode) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (mode != NORMAL) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d011      	beq.n	8000ffc <modePreset+0x34>
		turnOffLight();
 8000fd8:	f7ff fee8 	bl	8000dac <turnOffLight>
		if (mode != MANUAL) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d004      	beq.n	8000fec <modePreset+0x24>
			displayMode(mode);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff11 	bl	8000e0c <displayMode>
 8000fea:	e009      	b.n	8001000 <modePreset+0x38>
		}
		else {
			isLight1Manual = lightController.isLight1;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <modePreset+0x4c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <modePreset+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
			manualModeInit();
 8000ff6:	f000 f815 	bl	8001024 <manualModeInit>
 8000ffa:	e001      	b.n	8001000 <modePreset+0x38>
		}
	} else {
		controllerInit ();
 8000ffc:	f7ff fde8 	bl	8000bd0 <controllerInit>
	}
	Mode = mode;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <modePreset+0x54>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	7013      	strb	r3, [r2, #0]
	count = 0;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <modePreset+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000e4 	.word	0x200000e4
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000008 	.word	0x20000008
 8001020:	200000e8 	.word	0x200000e8

08001024 <manualModeInit>:
void manualModeInit() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	if (isLight1Manual) {
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <manualModeInit+0xa4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d024      	beq.n	800107a <manualModeInit+0x56>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <manualModeInit+0xa8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <manualModeInit+0xac>)
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	b291      	uxth	r1, r2
 800103a:	2201      	movs	r2, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f96a 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <manualModeInit+0xa8>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <manualModeInit+0xac>)
 8001048:	6852      	ldr	r2, [r2, #4]
 800104a:	b291      	uxth	r1, r2
 800104c:	2200      	movs	r2, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 f961 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <manualModeInit+0xb0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <manualModeInit+0xb4>)
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	b291      	uxth	r1, r2
 800105e:	2201      	movs	r2, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f002 f958 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8001066:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <manualModeInit+0xb0>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <manualModeInit+0xb4>)
 800106c:	6852      	ldr	r2, [r2, #4]
 800106e:	b291      	uxth	r1, r2
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f002 f94f 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
	}
}
 8001078:	e023      	b.n	80010c2 <manualModeInit+0x9e>
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <manualModeInit+0xb0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a16      	ldr	r2, [pc, #88]	@ (80010d8 <manualModeInit+0xb4>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	b291      	uxth	r1, r2
 8001084:	2201      	movs	r2, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f002 f945 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <manualModeInit+0xb0>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <manualModeInit+0xb4>)
 8001092:	6852      	ldr	r2, [r2, #4]
 8001094:	b291      	uxth	r1, r2
 8001096:	2200      	movs	r2, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f93c 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <manualModeInit+0xa8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <manualModeInit+0xac>)
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	b291      	uxth	r1, r2
 80010a8:	2201      	movs	r2, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f933 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <manualModeInit+0xa8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a06      	ldr	r2, [pc, #24]	@ (80010d0 <manualModeInit+0xac>)
 80010b6:	6852      	ldr	r2, [r2, #4]
 80010b8:	b291      	uxth	r1, r2
 80010ba:	2201      	movs	r2, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 f92a 	bl	8003316 <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000108 	.word	0x20000108
 80010d0:	20000118 	.word	0x20000118
 80010d4:	20000110 	.word	0x20000110
 80010d8:	20000120 	.word	0x20000120

080010dc <switchGreenLight>:
void switchGreenLight () {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if (isLight1Manual) {
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <switchGreenLight+0xbc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d024      	beq.n	8001132 <switchGreenLight+0x56>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <switchGreenLight+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <switchGreenLight+0xc4>)
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	b291      	uxth	r1, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 f90e 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <switchGreenLight+0xc0>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <switchGreenLight+0xc4>)
 8001100:	6852      	ldr	r2, [r2, #4]
 8001102:	b291      	uxth	r1, r2
 8001104:	2201      	movs	r2, #1
 8001106:	4618      	mov	r0, r3
 8001108:	f002 f905 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <switchGreenLight+0xc8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a25      	ldr	r2, [pc, #148]	@ (80011a8 <switchGreenLight+0xcc>)
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	b291      	uxth	r1, r2
 8001116:	2201      	movs	r2, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f8fc 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_RESET);
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <switchGreenLight+0xc8>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a21      	ldr	r2, [pc, #132]	@ (80011a8 <switchGreenLight+0xcc>)
 8001124:	6852      	ldr	r2, [r2, #4]
 8001126:	b291      	uxth	r1, r2
 8001128:	2200      	movs	r2, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f002 f8f3 	bl	8003316 <HAL_GPIO_WritePin>
 8001130:	e023      	b.n	800117a <switchGreenLight+0x9e>
	}else {
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_SET);
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <switchGreenLight+0xc8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <switchGreenLight+0xcc>)
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	b291      	uxth	r1, r2
 800113c:	2201      	movs	r2, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f8e9 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <switchGreenLight+0xc8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <switchGreenLight+0xcc>)
 800114a:	6852      	ldr	r2, [r2, #4]
 800114c:	b291      	uxth	r1, r2
 800114e:	2201      	movs	r2, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f8e0 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_SET);
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <switchGreenLight+0xc0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <switchGreenLight+0xc4>)
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	b291      	uxth	r1, r2
 8001160:	2201      	movs	r2, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f8d7 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_RESET);
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <switchGreenLight+0xc0>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <switchGreenLight+0xc4>)
 800116e:	6852      	ldr	r2, [r2, #4]
 8001170:	b291      	uxth	r1, r2
 8001172:	2200      	movs	r2, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f002 f8ce 	bl	8003316 <HAL_GPIO_WritePin>
	}
	isLight1Manual = !isLight1Manual;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <switchGreenLight+0xbc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <switchGreenLight+0xbc>)
 800118c:	601a      	str	r2, [r3, #0]
	waitSwitchingFlag = 0;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <switchGreenLight+0xd0>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000000c 	.word	0x2000000c
 800119c:	20000108 	.word	0x20000108
 80011a0:	20000118 	.word	0x20000118
 80011a4:	20000110 	.word	0x20000110
 80011a8:	20000120 	.word	0x20000120
 80011ac:	200000e0 	.word	0x200000e0

080011b0 <switchRoute>:
void switchRoute () {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if (isLight1Manual) {
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <switchRoute+0x74>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d012      	beq.n	80011e2 <switchRoute+0x32>
		HAL_GPIO_WritePin(LIGHT1_Port[0], LIGHT1_Pin[0], GPIO_PIN_RESET);
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <switchRoute+0x78>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	@ (800122c <switchRoute+0x7c>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	b291      	uxth	r1, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f8a4 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT1_Port[1], LIGHT1_Pin[1], GPIO_PIN_SET);
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <switchRoute+0x78>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a16      	ldr	r2, [pc, #88]	@ (800122c <switchRoute+0x7c>)
 80011d4:	6852      	ldr	r2, [r2, #4]
 80011d6:	b291      	uxth	r1, r2
 80011d8:	2201      	movs	r2, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 f89b 	bl	8003316 <HAL_GPIO_WritePin>
 80011e0:	e011      	b.n	8001206 <switchRoute+0x56>
	} else {
		HAL_GPIO_WritePin(LIGHT2_Port[0], LIGHT2_Pin[0], GPIO_PIN_RESET);
 80011e2:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <switchRoute+0x80>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <switchRoute+0x84>)
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	b291      	uxth	r1, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f891 	bl	8003316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LIGHT2_Port[1], LIGHT2_Pin[1], GPIO_PIN_SET);
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <switchRoute+0x80>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <switchRoute+0x84>)
 80011fa:	6852      	ldr	r2, [r2, #4]
 80011fc:	b291      	uxth	r1, r2
 80011fe:	2201      	movs	r2, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f002 f888 	bl	8003316 <HAL_GPIO_WritePin>
	}
	waitSwitchingTaskID = SCH_Add_Task(switchGreenLight, 2000, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800120c:	480a      	ldr	r0, [pc, #40]	@ (8001238 <switchRoute+0x88>)
 800120e:	f7ff f91f 	bl	8000450 <SCH_Add_Task>
 8001212:	4603      	mov	r3, r0
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <switchRoute+0x8c>)
 8001216:	6013      	str	r3, [r2, #0]
	waitSwitchingFlag = 1;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <switchRoute+0x90>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000000c 	.word	0x2000000c
 8001228:	20000108 	.word	0x20000108
 800122c:	20000118 	.word	0x20000118
 8001230:	20000110 	.word	0x20000110
 8001234:	20000120 	.word	0x20000120
 8001238:	080010dd 	.word	0x080010dd
 800123c:	20000010 	.word	0x20000010
 8001240:	200000e0 	.word	0x200000e0

08001244 <checkButton2LongPressed>:
void checkButton2LongPressed () {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	if (Is_Button_Long_Pressed(BUTTON2)) {
 8001248:	2002      	movs	r0, #2
 800124a:	f000 fa09 	bl	8001660 <Is_Button_Long_Pressed>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <checkButton2LongPressed+0x22>
		longPressedID = SCH_Add_Task(checkLongPressed, 0, 330);
 8001254:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8001258:	2100      	movs	r1, #0
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <checkButton2LongPressed+0x28>)
 800125c:	f7ff f8f8 	bl	8000450 <SCH_Add_Task>
 8001260:	4603      	mov	r3, r0
 8001262:	4a03      	ldr	r2, [pc, #12]	@ (8001270 <checkButton2LongPressed+0x2c>)
 8001264:	6013      	str	r3, [r2, #0]
	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08001275 	.word	0x08001275
 8001270:	20000034 	.word	0x20000034

08001274 <checkLongPressed>:
void checkLongPressed() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	switch (Mode) {
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <checkLongPressed+0x38>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d00e      	beq.n	800129e <checkLongPressed+0x2a>
 8001280:	2b02      	cmp	r3, #2
 8001282:	dc10      	bgt.n	80012a6 <checkLongPressed+0x32>
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <checkLongPressed+0x1a>
 8001288:	2b01      	cmp	r3, #1
 800128a:	d004      	beq.n	8001296 <checkLongPressed+0x22>
		break;
	case GREEN:
		increaseTimer(&settingBuffer[GREEN]);
		break;
	default:
		break;
 800128c:	e00b      	b.n	80012a6 <checkLongPressed+0x32>
		increaseTimer(&settingBuffer[RED]);
 800128e:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <checkLongPressed+0x3c>)
 8001290:	f7ff fe6a 	bl	8000f68 <increaseTimer>
		break;
 8001294:	e008      	b.n	80012a8 <checkLongPressed+0x34>
		increaseTimer(&settingBuffer[AMBER]);
 8001296:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <checkLongPressed+0x40>)
 8001298:	f7ff fe66 	bl	8000f68 <increaseTimer>
		break;
 800129c:	e004      	b.n	80012a8 <checkLongPressed+0x34>
		increaseTimer(&settingBuffer[GREEN]);
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <checkLongPressed+0x44>)
 80012a0:	f7ff fe62 	bl	8000f68 <increaseTimer>
		break;
 80012a4:	e000      	b.n	80012a8 <checkLongPressed+0x34>
		break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000018 	.word	0x20000018
 80012b4:	2000001c 	.word	0x2000001c
 80012b8:	20000020 	.word	0x20000020

080012bc <trafficLightFSM>:
void trafficLightFSM () {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    if (++count >= blinkCount)	{
 80012c0:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <trafficLightFSM+0x158>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a53      	ldr	r2, [pc, #332]	@ (8001414 <trafficLightFSM+0x158>)
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b52      	ldr	r3, [pc, #328]	@ (8001414 <trafficLightFSM+0x158>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <trafficLightFSM+0x15c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f2c0 8083 	blt.w	80013de <trafficLightFSM+0x122>
        count = 0;
 80012d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <trafficLightFSM+0x158>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
        switch (Mode) {
 80012de:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <trafficLightFSM+0x160>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d878      	bhi.n	80013d8 <trafficLightFSM+0x11c>
 80012e6:	a201      	add	r2, pc, #4	@ (adr r2, 80012ec <trafficLightFSM+0x30>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001301 	.word	0x08001301
 80012f0:	0800134b 	.word	0x0800134b
 80012f4:	08001371 	.word	0x08001371
 80012f8:	080013d9 	.word	0x080013d9
 80012fc:	08001397 	.word	0x08001397
            case RED:
                HAL_GPIO_TogglePin (LIGHT1_Port[0], LIGHT1_Pin[0]);
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <trafficLightFSM+0x164>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a47      	ldr	r2, [pc, #284]	@ (8001424 <trafficLightFSM+0x168>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	b292      	uxth	r2, r2
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f002 f81a 	bl	8003346 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 8001312:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <trafficLightFSM+0x164>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a43      	ldr	r2, [pc, #268]	@ (8001424 <trafficLightFSM+0x168>)
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	b292      	uxth	r2, r2
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f002 f811 	bl	8003346 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[0], LIGHT2_Pin[0]);
 8001324:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <trafficLightFSM+0x16c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a40      	ldr	r2, [pc, #256]	@ (800142c <trafficLightFSM+0x170>)
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	b292      	uxth	r2, r2
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f808 	bl	8003346 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <trafficLightFSM+0x16c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a3c      	ldr	r2, [pc, #240]	@ (800142c <trafficLightFSM+0x170>)
 800133c:	6852      	ldr	r2, [r2, #4]
 800133e:	b292      	uxth	r2, r2
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 ffff 	bl	8003346 <HAL_GPIO_TogglePin>
                break;
 8001348:	e049      	b.n	80013de <trafficLightFSM+0x122>
            case AMBER:
                HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 800134a:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <trafficLightFSM+0x164>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a35      	ldr	r2, [pc, #212]	@ (8001424 <trafficLightFSM+0x168>)
 8001350:	6852      	ldr	r2, [r2, #4]
 8001352:	b292      	uxth	r2, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fff5 	bl	8003346 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 800135c:	4b32      	ldr	r3, [pc, #200]	@ (8001428 <trafficLightFSM+0x16c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a32      	ldr	r2, [pc, #200]	@ (800142c <trafficLightFSM+0x170>)
 8001362:	6852      	ldr	r2, [r2, #4]
 8001364:	b292      	uxth	r2, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f001 ffec 	bl	8003346 <HAL_GPIO_TogglePin>
                break;
 800136e:	e036      	b.n	80013de <trafficLightFSM+0x122>
            case GREEN:
                HAL_GPIO_TogglePin (LIGHT1_Port[0], LIGHT1_Pin[0]);
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <trafficLightFSM+0x164>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2b      	ldr	r2, [pc, #172]	@ (8001424 <trafficLightFSM+0x168>)
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	b292      	uxth	r2, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f001 ffe2 	bl	8003346 <HAL_GPIO_TogglePin>
                HAL_GPIO_TogglePin (LIGHT2_Port[0], LIGHT2_Pin[0]);
 8001382:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <trafficLightFSM+0x16c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	@ (800142c <trafficLightFSM+0x170>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	b292      	uxth	r2, r2
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f001 ffd9 	bl	8003346 <HAL_GPIO_TogglePin>
                break;
 8001394:	e023      	b.n	80013de <trafficLightFSM+0x122>
            case SLOWDOWN:
            	if (++amber_blinking_count >= amberBlinkCount) {
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <trafficLightFSM+0x174>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a24      	ldr	r2, [pc, #144]	@ (8001430 <trafficLightFSM+0x174>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <trafficLightFSM+0x174>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <trafficLightFSM+0x178>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	db17      	blt.n	80013dc <trafficLightFSM+0x120>
            		amber_blinking_count = 0;
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <trafficLightFSM+0x174>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin (LIGHT1_Port[1], LIGHT1_Pin[1]);
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <trafficLightFSM+0x164>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <trafficLightFSM+0x168>)
 80013b8:	6852      	ldr	r2, [r2, #4]
 80013ba:	b292      	uxth	r2, r2
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 ffc1 	bl	8003346 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin (LIGHT2_Port[1], LIGHT2_Pin[1]);
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <trafficLightFSM+0x16c>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a18      	ldr	r2, [pc, #96]	@ (800142c <trafficLightFSM+0x170>)
 80013ca:	6852      	ldr	r2, [r2, #4]
 80013cc:	b292      	uxth	r2, r2
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 ffb8 	bl	8003346 <HAL_GPIO_TogglePin>
            	}
                break;
 80013d6:	e001      	b.n	80013dc <trafficLightFSM+0x120>
            default:
                break;
 80013d8:	bf00      	nop
 80013da:	e000      	b.n	80013de <trafficLightFSM+0x122>
                break;
 80013dc:	bf00      	nop
        }
    }
    if (++led_count >= 4*scanCount)
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <trafficLightFSM+0x17c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <trafficLightFSM+0x17c>)
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <trafficLightFSM+0x17c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <trafficLightFSM+0x180>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	429a      	cmp	r2, r3
 80013f4:	db02      	blt.n	80013fc <trafficLightFSM+0x140>
    	led_count = 0;
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <trafficLightFSM+0x17c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
    if (Mode == NORMAL)		milliSec += TIMER;
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <trafficLightFSM+0x160>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d104      	bne.n	800140e <trafficLightFSM+0x152>
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <trafficLightFSM+0x184>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <trafficLightFSM+0x184>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000e8 	.word	0x200000e8
 8001418:	2000003c 	.word	0x2000003c
 800141c:	20000008 	.word	0x20000008
 8001420:	20000108 	.word	0x20000108
 8001424:	20000118 	.word	0x20000118
 8001428:	20000110 	.word	0x20000110
 800142c:	20000120 	.word	0x20000120
 8001430:	200000f0 	.word	0x200000f0
 8001434:	20000040 	.word	0x20000040
 8001438:	200000ec 	.word	0x200000ec
 800143c:	20000038 	.word	0x20000038
 8001440:	200000f4 	.word	0x200000f4

08001444 <Button_Init>:
	ButtonLongPressedState [NO_BUTTONS],
	sample = 0;

void Button_Init(GPIO_TypeDef * Port1, int Pin1,
				 GPIO_TypeDef * Port2, int Pin2,
				 GPIO_TypeDef * Port3, int Pin3) {
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
	ButtonPort [0] = Port1;
 8001452:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <Button_Init+0x88>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6013      	str	r3, [r2, #0]
	ButtonPin [0] = Pin1;
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <Button_Init+0x8c>)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	6013      	str	r3, [r2, #0]
	ButtonPort [1] = Port2;
 800145e:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <Button_Init+0x88>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6053      	str	r3, [r2, #4]
	ButtonPin [1] = Pin2;
 8001464:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <Button_Init+0x8c>)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	6053      	str	r3, [r2, #4]
	ButtonPort [2] = Port3;
 800146a:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <Button_Init+0x88>)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	6093      	str	r3, [r2, #8]
	ButtonPin [2] = Pin3;
 8001470:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <Button_Init+0x8c>)
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	6093      	str	r3, [r2, #8]

	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++) {
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e01d      	b.n	80014b8 <Button_Init+0x74>
		for (int idx = 0; idx < NO_DEBOUNCE_SAMPLE; idx++)
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e00a      	b.n	8001498 <Button_Init+0x54>
			input_buffer[buttonIdx][idx] = 1;
 8001482:	4914      	ldr	r1, [pc, #80]	@ (80014d4 <Button_Init+0x90>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	009a      	lsls	r2, r3, #2
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4413      	add	r3, r2
 800148c:	2201      	movs	r2, #1
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int idx = 0; idx < NO_DEBOUNCE_SAMPLE; idx++)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b03      	cmp	r3, #3
 800149c:	ddf1      	ble.n	8001482 <Button_Init+0x3e>
		ButtonState[buttonIdx] = BUTTON_RELEASED;
 800149e:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <Button_Init+0x94>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2100      	movs	r1, #0
 80014a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ButtonLongPressedState[buttonIdx] = BUTTON_RELEASED;
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <Button_Init+0x98>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2100      	movs	r1, #0
 80014ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	ddde      	ble.n	800147c <Button_Init+0x38>
	}
}
 80014be:	bf00      	nop
 80014c0:	bf00      	nop
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000128 	.word	0x20000128
 80014d0:	20000134 	.word	0x20000134
 80014d4:	20000140 	.word	0x20000140
 80014d8:	20000170 	.word	0x20000170
 80014dc:	2000017c 	.word	0x2000017c

080014e0 <Button_Read>:

void Button_Read () {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
	sample++;
 80014e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001614 <Button_Read+0x134>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a49      	ldr	r2, [pc, #292]	@ (8001614 <Button_Read+0x134>)
 80014ee:	6013      	str	r3, [r2, #0]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++){
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e085      	b.n	8001602 <Button_Read+0x122>
		int offstate = 0, buttonstate = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]

		for (int idx = 1; idx < NO_DEBOUNCE_SAMPLE; idx++) {
 80014fe:	2301      	movs	r3, #1
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	e022      	b.n	800154a <Button_Read+0x6a>
			input_buffer [buttonIdx] [idx - 1] = input_buffer [buttonIdx] [idx];
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3b01      	subs	r3, #1
 8001508:	4843      	ldr	r0, [pc, #268]	@ (8001618 <Button_Read+0x138>)
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	0091      	lsls	r1, r2, #2
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	440a      	add	r2, r1
 8001512:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001516:	4840      	ldr	r0, [pc, #256]	@ (8001618 <Button_Read+0x138>)
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	0089      	lsls	r1, r1, #2
 800151c:	440b      	add	r3, r1
 800151e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			offstate = (offstate << 1) | 1;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
			buttonstate = (buttonstate << 1) | input_buffer [buttonIdx] [idx - 1];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	005a      	lsls	r2, r3, #1
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	4838      	ldr	r0, [pc, #224]	@ (8001618 <Button_Read+0x138>)
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	0089      	lsls	r1, r1, #2
 800153a:	440b      	add	r3, r1
 800153c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001540:	4313      	orrs	r3, r2
 8001542:	607b      	str	r3, [r7, #4]
		for (int idx = 1; idx < NO_DEBOUNCE_SAMPLE; idx++) {
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b03      	cmp	r3, #3
 800154e:	ddd9      	ble.n	8001504 <Button_Read+0x24>
		}

		input_buffer [buttonIdx] [NO_DEBOUNCE_SAMPLE - 1] = HAL_GPIO_ReadPin(ButtonPort[buttonIdx], ButtonPin[buttonIdx]);
 8001550:	4a32      	ldr	r2, [pc, #200]	@ (800161c <Button_Read+0x13c>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001558:	4931      	ldr	r1, [pc, #196]	@ (8001620 <Button_Read+0x140>)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f001 febf 	bl	80032e8 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	4619      	mov	r1, r3
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <Button_Read+0x138>)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	330c      	adds	r3, #12
 8001578:	6019      	str	r1, [r3, #0]
		offstate = (offstate << 1) | 1;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
		buttonstate = (buttonstate << 1) | input_buffer [buttonIdx] [NO_DEBOUNCE_SAMPLE - 1];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	005a      	lsls	r2, r3, #1
 8001588:	4923      	ldr	r1, [pc, #140]	@ (8001618 <Button_Read+0x138>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	330c      	adds	r3, #12
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	607b      	str	r3, [r7, #4]

		if (sample >= NO_DEBOUNCE_SAMPLE) {
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <Button_Read+0x134>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b03      	cmp	r3, #3
 800159e:	dd2d      	ble.n	80015fc <Button_Read+0x11c>
			if (buttonstate == offstate && ButtonState [buttonIdx] == BUTTON_PRESSED) {
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10f      	bne.n	80015c8 <Button_Read+0xe8>
 80015a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001624 <Button_Read+0x144>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d109      	bne.n	80015c8 <Button_Read+0xe8>
				ButtonLongPressedState [buttonIdx] = BUTTON_RELEASED;
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <Button_Read+0x148>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2100      	movs	r1, #0
 80015ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				ButtonState [buttonIdx] = BUTTON_RELEASED;
 80015be:	4a19      	ldr	r2, [pc, #100]	@ (8001624 <Button_Read+0x144>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2100      	movs	r1, #0
 80015c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (buttonstate == 0) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d110      	bne.n	80015f0 <Button_Read+0x110>
				if (ButtonState [buttonIdx] == BUTTON_PRESSED)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <Button_Read+0x144>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <Button_Read+0x106>
					ButtonLongPressedState [buttonIdx] = BUTTON_PRESSED;
 80015da:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <Button_Read+0x148>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2101      	movs	r1, #1
 80015e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015e4:	e004      	b.n	80015f0 <Button_Read+0x110>
				else
					ButtonState [buttonIdx] = BUTTON_PRESSED;
 80015e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001624 <Button_Read+0x144>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2101      	movs	r1, #1
 80015ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (buttonIdx == NO_BUTTONS - 1)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d102      	bne.n	80015fc <Button_Read+0x11c>
				sample = NO_DEBOUNCE_SAMPLE - 1;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <Button_Read+0x134>)
 80015f8:	2203      	movs	r2, #3
 80015fa:	601a      	str	r2, [r3, #0]
	for (int buttonIdx = 0; buttonIdx < NO_BUTTONS; buttonIdx++){
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3301      	adds	r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b02      	cmp	r3, #2
 8001606:	f77f af76 	ble.w	80014f6 <Button_Read+0x16>
		}
	}
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000188 	.word	0x20000188
 8001618:	20000140 	.word	0x20000140
 800161c:	20000128 	.word	0x20000128
 8001620:	20000134 	.word	0x20000134
 8001624:	20000170 	.word	0x20000170
 8001628:	2000017c 	.word	0x2000017c

0800162c <Is_Button_Pressed>:

int Is_Button_Pressed (int num) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	if (num < 1 || num > NO_BUTTONS)		return -1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd02      	ble.n	8001640 <Is_Button_Pressed+0x14>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b03      	cmp	r3, #3
 800163e:	dd02      	ble.n	8001646 <Is_Button_Pressed+0x1a>
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	e004      	b.n	8001650 <Is_Button_Pressed+0x24>
	return ButtonState [num - 1];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3b01      	subs	r3, #1
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <Is_Button_Pressed+0x30>)
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000170 	.word	0x20000170

08001660 <Is_Button_Long_Pressed>:

int Is_Button_Long_Pressed (int num) {
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	if (num < 1 || num > NO_BUTTONS)		return -1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dd02      	ble.n	8001674 <Is_Button_Long_Pressed+0x14>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b03      	cmp	r3, #3
 8001672:	dd02      	ble.n	800167a <Is_Button_Long_Pressed+0x1a>
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	e004      	b.n	8001684 <Is_Button_Long_Pressed+0x24>
	return ButtonLongPressedState [num - 1];
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <Is_Button_Long_Pressed+0x30>)
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	2000017c 	.word	0x2000017c

08001694 <printLightNotify>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printLightNotify () {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b0a5      	sub	sp, #148	@ 0x94
 8001698:	af00      	add	r7, sp, #0
	int col = 1, row = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	667b      	str	r3, [r7, #100]	@ 0x64
 800169e:	2301      	movs	r3, #1
 80016a0:	663b      	str	r3, [r7, #96]	@ 0x60
	if (changeModeFlag) {
 80016a2:	4bab      	ldr	r3, [pc, #684]	@ (8001950 <printLightNotify+0x2bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 821a 	beq.w	8001ae0 <printLightNotify+0x44c>
		char mode[] = "TIMER:";
 80016ac:	4aa9      	ldr	r2, [pc, #676]	@ (8001954 <printLightNotify+0x2c0>)
 80016ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b6:	6018      	str	r0, [r3, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	8019      	strh	r1, [r3, #0]
 80016bc:	3302      	adds	r3, #2
 80016be:	0c0a      	lsrs	r2, r1, #16
 80016c0:	701a      	strb	r2, [r3, #0]
		changeModeFlag = 0;
 80016c2:	4ba3      	ldr	r3, [pc, #652]	@ (8001950 <printLightNotify+0x2bc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
		clearLCD();
 80016c8:	f7fe fe3a 	bl	8000340 <clearLCD>
		switch (Mode) {
 80016cc:	4ba2      	ldr	r3, [pc, #648]	@ (8001958 <printLightNotify+0x2c4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	f200 8204 	bhi.w	8001ade <printLightNotify+0x44a>
 80016d6:	a201      	add	r2, pc, #4	@ (adr r2, 80016dc <printLightNotify+0x48>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	080017cf 	.word	0x080017cf
 80016e0:	08001899 	.word	0x08001899
 80016e4:	08001971 	.word	0x08001971
 80016e8:	080016f5 	.word	0x080016f5
 80016ec:	08001a27 	.word	0x08001a27
 80016f0:	08001a85 	.word	0x08001a85
		case NORMAL:
			char text1[] = "Light 1";
 80016f4:	4a99      	ldr	r2, [pc, #612]	@ (800195c <printLightNotify+0x2c8>)
 80016f6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fe:	e883 0003 	stmia.w	r3, {r0, r1}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001704:	3b01      	subs	r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	019b      	lsls	r3, r3, #6
 800170a:	b2da      	uxtb	r2, r3
 800170c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	3b01      	subs	r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	2300      	movs	r3, #0
 8001724:	214e      	movs	r1, #78	@ 0x4e
 8001726:	488e      	ldr	r0, [pc, #568]	@ (8001960 <printLightNotify+0x2cc>)
 8001728:	f7fe fd4c 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(text1)/sizeof(text1[0]) - 1; i++)
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001732:	e00f      	b.n	8001754 <printLightNotify+0xc0>
				I2C_Send(&hi2c1, (0x27 << 1), text1[i], RS);
 8001734:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800173c:	4413      	add	r3, r2
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	214e      	movs	r1, #78	@ 0x4e
 8001744:	4886      	ldr	r0, [pc, #536]	@ (8001960 <printLightNotify+0x2cc>)
 8001746:	f7fe fd3d 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(text1)/sizeof(text1[0]) - 1; i++)
 800174a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001758:	2b06      	cmp	r3, #6
 800175a:	d9eb      	bls.n	8001734 <printLightNotify+0xa0>

			char text2[] = "Light 2";
 800175c:	4a81      	ldr	r2, [pc, #516]	@ (8001964 <printLightNotify+0x2d0>)
 800175e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001766:	e883 0003 	stmia.w	r3, {r0, r1}
			col = 10; row = 1;
 800176a:	230a      	movs	r3, #10
 800176c:	667b      	str	r3, [r7, #100]	@ 0x64
 800176e:	2301      	movs	r3, #1
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001774:	3b01      	subs	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	b2da      	uxtb	r2, r3
 800177c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800178e:	b25b      	sxtb	r3, r3
 8001790:	b2da      	uxtb	r2, r3
 8001792:	2300      	movs	r3, #0
 8001794:	214e      	movs	r1, #78	@ 0x4e
 8001796:	4872      	ldr	r0, [pc, #456]	@ (8001960 <printLightNotify+0x2cc>)
 8001798:	f7fe fd14 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(text2)/sizeof(text2[0]) - 1; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017a2:	e00f      	b.n	80017c4 <printLightNotify+0x130>
				I2C_Send(&hi2c1, (0x27 << 1), text2[i], RS);
 80017a4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80017a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017ac:	4413      	add	r3, r2
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	214e      	movs	r1, #78	@ 0x4e
 80017b4:	486a      	ldr	r0, [pc, #424]	@ (8001960 <printLightNotify+0x2cc>)
 80017b6:	f7fe fd05 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(text2)/sizeof(text2[0]) - 1; i++)
 80017ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017be:	3301      	adds	r3, #1
 80017c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017c8:	2b06      	cmp	r3, #6
 80017ca:	d9eb      	bls.n	80017a4 <printLightNotify+0x110>
			break;
 80017cc:	e188      	b.n	8001ae0 <printLightNotify+0x44c>
		case RED:
			char textRED[] = "RED SETTING";
 80017ce:	4a66      	ldr	r2, [pc, #408]	@ (8001968 <printLightNotify+0x2d4>)
 80017d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80017da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	2300      	movs	r3, #0
 80017fc:	214e      	movs	r1, #78	@ 0x4e
 80017fe:	4858      	ldr	r0, [pc, #352]	@ (8001960 <printLightNotify+0x2cc>)
 8001800:	f7fe fce0 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textRED)/sizeof(textRED[0]) - 1; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800180a:	e00f      	b.n	800182c <printLightNotify+0x198>
				I2C_Send(&hi2c1, (0x27 << 1), textRED[i], RS);
 800180c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001814:	4413      	add	r3, r2
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	214e      	movs	r1, #78	@ 0x4e
 800181c:	4850      	ldr	r0, [pc, #320]	@ (8001960 <printLightNotify+0x2cc>)
 800181e:	f7fe fcd1 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textRED)/sizeof(textRED[0]) - 1; i++)
 8001822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001826:	3301      	adds	r3, #1
 8001828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800182c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001830:	2b0a      	cmp	r3, #10
 8001832:	d9eb      	bls.n	800180c <printLightNotify+0x178>
			col = 1; row = 2;
 8001834:	2301      	movs	r3, #1
 8001836:	667b      	str	r3, [r7, #100]	@ 0x64
 8001838:	2302      	movs	r3, #2
 800183a:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 800183c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800183e:	3b01      	subs	r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	019b      	lsls	r3, r3, #6
 8001844:	b2da      	uxtb	r2, r3
 8001846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	214e      	movs	r1, #78	@ 0x4e
 8001860:	483f      	ldr	r0, [pc, #252]	@ (8001960 <printLightNotify+0x2cc>)
 8001862:	f7fe fcaf 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800186c:	e00f      	b.n	800188e <printLightNotify+0x1fa>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 800186e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001872:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001876:	4413      	add	r3, r2
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	214e      	movs	r1, #78	@ 0x4e
 800187e:	4838      	ldr	r0, [pc, #224]	@ (8001960 <printLightNotify+0x2cc>)
 8001880:	f7fe fca0 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001884:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001888:	3301      	adds	r3, #1
 800188a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800188e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001892:	2b05      	cmp	r3, #5
 8001894:	d9eb      	bls.n	800186e <printLightNotify+0x1da>
			break;
 8001896:	e123      	b.n	8001ae0 <printLightNotify+0x44c>
		case AMBER:
			char textAMBER[] = "AMBER SETTING";
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <printLightNotify+0x2d8>)
 800189a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800189e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a0:	c407      	stmia	r4!, {r0, r1, r2}
 80018a2:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80018a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	019b      	lsls	r3, r3, #6
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	214e      	movs	r1, #78	@ 0x4e
 80018c8:	4825      	ldr	r0, [pc, #148]	@ (8001960 <printLightNotify+0x2cc>)
 80018ca:	f7fe fc7b 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textAMBER)/sizeof(textAMBER[0]) - 1; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018d2:	e00c      	b.n	80018ee <printLightNotify+0x25a>
				I2C_Send(&hi2c1, (0x27 << 1), textAMBER[i], RS);
 80018d4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80018d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018da:	4413      	add	r3, r2
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	214e      	movs	r1, #78	@ 0x4e
 80018e2:	481f      	ldr	r0, [pc, #124]	@ (8001960 <printLightNotify+0x2cc>)
 80018e4:	f7fe fc6e 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textAMBER)/sizeof(textAMBER[0]) - 1; i++)
 80018e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018ea:	3301      	adds	r3, #1
 80018ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d9ef      	bls.n	80018d4 <printLightNotify+0x240>
			col = 1; row = 2;
 80018f4:	2301      	movs	r3, #1
 80018f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80018f8:	2302      	movs	r3, #2
 80018fa:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80018fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018fe:	3b01      	subs	r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	019b      	lsls	r3, r3, #6
 8001904:	b2da      	uxtb	r2, r3
 8001906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	2300      	movs	r3, #0
 800191e:	214e      	movs	r1, #78	@ 0x4e
 8001920:	480f      	ldr	r0, [pc, #60]	@ (8001960 <printLightNotify+0x2cc>)
 8001922:	f7fe fc4f 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	e00c      	b.n	8001946 <printLightNotify+0x2b2>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 800192c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001932:	4413      	add	r3, r2
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	214e      	movs	r1, #78	@ 0x4e
 800193a:	4809      	ldr	r0, [pc, #36]	@ (8001960 <printLightNotify+0x2cc>)
 800193c:	f7fe fc42 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001942:	3301      	adds	r3, #1
 8001944:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001948:	2b05      	cmp	r3, #5
 800194a:	d9ef      	bls.n	800192c <printLightNotify+0x298>
			break;
 800194c:	e0c8      	b.n	8001ae0 <printLightNotify+0x44c>
 800194e:	bf00      	nop
 8001950:	20000004 	.word	0x20000004
 8001954:	08005178 	.word	0x08005178
 8001958:	20000008 	.word	0x20000008
 800195c:	08005180 	.word	0x08005180
 8001960:	2000018c 	.word	0x2000018c
 8001964:	08005188 	.word	0x08005188
 8001968:	08005190 	.word	0x08005190
 800196c:	0800519c 	.word	0x0800519c
		case GREEN:
			char textGREEN[] = "GREEN SETTING";
 8001970:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae8 <printLightNotify+0x454>)
 8001972:	f107 041c 	add.w	r4, r7, #28
 8001976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001978:	c407      	stmia	r4!, {r0, r1, r2}
 800197a:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 800197c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800197e:	3b01      	subs	r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	b2da      	uxtb	r2, r3
 8001986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	b25b      	sxtb	r3, r3
 8001994:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001998:	b25b      	sxtb	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	214e      	movs	r1, #78	@ 0x4e
 80019a0:	4852      	ldr	r0, [pc, #328]	@ (8001aec <printLightNotify+0x458>)
 80019a2:	f7fe fc0f 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textGREEN)/sizeof(textGREEN[0]) - 1; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80019aa:	e00c      	b.n	80019c6 <printLightNotify+0x332>
				I2C_Send(&hi2c1, (0x27 << 1), textGREEN[i], RS);
 80019ac:	f107 021c 	add.w	r2, r7, #28
 80019b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019b2:	4413      	add	r3, r2
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	214e      	movs	r1, #78	@ 0x4e
 80019ba:	484c      	ldr	r0, [pc, #304]	@ (8001aec <printLightNotify+0x458>)
 80019bc:	f7fe fc02 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textGREEN)/sizeof(textGREEN[0]) - 1; i++)
 80019c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019c2:	3301      	adds	r3, #1
 80019c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80019c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d9ef      	bls.n	80019ac <printLightNotify+0x318>
			col = 1; row = 2;
 80019cc:	2301      	movs	r3, #1
 80019ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80019d0:	2302      	movs	r3, #2
 80019d2:	663b      	str	r3, [r7, #96]	@ 0x60
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 80019d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	019b      	lsls	r3, r3, #6
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	214e      	movs	r1, #78	@ 0x4e
 80019f8:	483c      	ldr	r0, [pc, #240]	@ (8001aec <printLightNotify+0x458>)
 80019fa:	f7fe fbe3 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a02:	e00c      	b.n	8001a1e <printLightNotify+0x38a>
				I2C_Send(&hi2c1, (0x27 << 1), mode[i], RS);
 8001a04:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	214e      	movs	r1, #78	@ 0x4e
 8001a12:	4836      	ldr	r0, [pc, #216]	@ (8001aec <printLightNotify+0x458>)
 8001a14:	f7fe fbd6 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(mode)/sizeof(mode[0]) - 1; i++)
 8001a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d9ef      	bls.n	8001a04 <printLightNotify+0x370>
			break;
 8001a24:	e05c      	b.n	8001ae0 <printLightNotify+0x44c>
		case SLOWDOWN:
			char textSLOWDOWN[] = "SLOWDOWN MODE";
 8001a26:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <printLightNotify+0x45c>)
 8001a28:	f107 040c 	add.w	r4, r7, #12
 8001a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2e:	c407      	stmia	r4!, {r0, r1, r2}
 8001a30:	8023      	strh	r3, [r4, #0]
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	2300      	movs	r3, #0
 8001a54:	214e      	movs	r1, #78	@ 0x4e
 8001a56:	4825      	ldr	r0, [pc, #148]	@ (8001aec <printLightNotify+0x458>)
 8001a58:	f7fe fbb4 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textSLOWDOWN)/sizeof(textSLOWDOWN[0]) - 1; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a60:	e00c      	b.n	8001a7c <printLightNotify+0x3e8>
				I2C_Send(&hi2c1, (0x27 << 1), textSLOWDOWN[i], RS);
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a68:	4413      	add	r3, r2
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	214e      	movs	r1, #78	@ 0x4e
 8001a70:	481e      	ldr	r0, [pc, #120]	@ (8001aec <printLightNotify+0x458>)
 8001a72:	f7fe fba7 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textSLOWDOWN)/sizeof(textSLOWDOWN[0]) - 1; i++)
 8001a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a78:	3301      	adds	r3, #1
 8001a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d9ef      	bls.n	8001a62 <printLightNotify+0x3ce>
			break;
 8001a82:	e02d      	b.n	8001ae0 <printLightNotify+0x44c>
		case MANUAL:
			char textMANUAL[] = "MANUAL MODE";
 8001a84:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <printLightNotify+0x460>)
 8001a86:	463b      	mov	r3, r7
 8001a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	2300      	movs	r3, #0
 8001ab0:	214e      	movs	r1, #78	@ 0x4e
 8001ab2:	480e      	ldr	r0, [pc, #56]	@ (8001aec <printLightNotify+0x458>)
 8001ab4:	f7fe fb86 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textMANUAL)/sizeof(textMANUAL[0]) - 1; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001abc:	e00b      	b.n	8001ad6 <printLightNotify+0x442>
				I2C_Send(&hi2c1, (0x27 << 1), textMANUAL[i], RS);
 8001abe:	463a      	mov	r2, r7
 8001ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	214e      	movs	r1, #78	@ 0x4e
 8001aca:	4808      	ldr	r0, [pc, #32]	@ (8001aec <printLightNotify+0x458>)
 8001acc:	f7fe fb7a 	bl	80001c4 <I2C_Send>
			for (int i = 0; i < sizeof(textMANUAL)/sizeof(textMANUAL[0]) - 1; i++)
 8001ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d9f0      	bls.n	8001abe <printLightNotify+0x42a>
			break;
 8001adc:	e000      	b.n	8001ae0 <printLightNotify+0x44c>
		default:
			break;
 8001ade:	bf00      	nop
		}
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	3794      	adds	r7, #148	@ 0x94
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	080051ac 	.word	0x080051ac
 8001aec:	2000018c 	.word	0x2000018c
 8001af0:	080051bc 	.word	0x080051bc
 8001af4:	080051cc 	.word	0x080051cc

08001af8 <printLight1Mode>:
void printLight1Mode () {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <printLight1Mode+0x6c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d12a      	bne.n	8001b5c <printLight1Mode+0x64>
		int col = 1, row = 2;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	2300      	movs	r3, #0
 8001b30:	214e      	movs	r1, #78	@ 0x4e
 8001b32:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <printLight1Mode+0x70>)
 8001b34:	f7fe fb46 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(light1Mode)/sizeof(light1Mode[0]) - 1; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e00b      	b.n	8001b56 <printLight1Mode+0x5e>
			I2C_Send(&hi2c1, (0x27 << 1), light1Mode[i], RS);
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b6c <printLight1Mode+0x74>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	214e      	movs	r1, #78	@ 0x4e
 8001b4a:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <printLight1Mode+0x70>)
 8001b4c:	f7fe fb3a 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(light1Mode)/sizeof(light1Mode[0]) - 1; i++)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d9f0      	bls.n	8001b3e <printLight1Mode+0x46>
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000008 	.word	0x20000008
 8001b68:	2000018c 	.word	0x2000018c
 8001b6c:	20000044 	.word	0x20000044

08001b70 <printLight2Mode>:
void printLight2Mode () {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <printLight2Mode+0x6c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d12a      	bne.n	8001bd4 <printLight2Mode+0x64>
		int col = 10, row = 2;
 8001b7e:	230a      	movs	r3, #10
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	2302      	movs	r3, #2
 8001b84:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	214e      	movs	r1, #78	@ 0x4e
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <printLight2Mode+0x70>)
 8001bac:	f7fe fb0a 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(light2Mode)/sizeof(light2Mode[0]) - 1; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e00b      	b.n	8001bce <printLight2Mode+0x5e>
			I2C_Send(&hi2c1, (0x27 << 1), light2Mode[i], RS);
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <printLight2Mode+0x74>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	214e      	movs	r1, #78	@ 0x4e
 8001bc2:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <printLight2Mode+0x70>)
 8001bc4:	f7fe fafe 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(light2Mode)/sizeof(light2Mode[0]) - 1; i++)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d9f0      	bls.n	8001bb6 <printLight2Mode+0x46>
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	2000018c 	.word	0x2000018c
 8001be4:	20000048 	.word	0x20000048

08001be8 <printLight1Timer>:
void printLight1Timer () {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
	uint8_t timer[] = "00";
 8001bee:	4aae      	ldr	r2, [pc, #696]	@ (8001ea8 <printLight1Timer+0x2c0>)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	8019      	strh	r1, [r3, #0]
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	0c12      	lsrs	r2, r2, #16
 8001bfc:	701a      	strb	r2, [r3, #0]
	int col = 8, row = 2;
 8001bfe:	2308      	movs	r3, #8
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	2302      	movs	r3, #2
 8001c04:	60bb      	str	r3, [r7, #8]
	switch (Mode){
 8001c06:	4ba9      	ldr	r3, [pc, #676]	@ (8001eac <printLight1Timer+0x2c4>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	f200 8146 	bhi.w	8001e9c <printLight1Timer+0x2b4>
 8001c10:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <printLight1Timer+0x30>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001cff 	.word	0x08001cff
 8001c1c:	08001d89 	.word	0x08001d89
 8001c20:	08001e13 	.word	0x08001e13
 8001c24:	08001c29 	.word	0x08001c29
	case NORMAL:
		if (lightController.isLight1){
 8001c28:	4ba1      	ldr	r3, [pc, #644]	@ (8001eb0 <printLight1Timer+0x2c8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01d      	beq.n	8001c6c <printLight1Timer+0x84>
			timer[0] = '0' + (second / 10);
 8001c30:	4ba0      	ldr	r3, [pc, #640]	@ (8001eb4 <printLight1Timer+0x2cc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4aa0      	ldr	r2, [pc, #640]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001c36:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3a:	1092      	asrs	r2, r2, #2
 8001c3c:	17db      	asrs	r3, r3, #31
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3330      	adds	r3, #48	@ 0x30
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	713b      	strb	r3, [r7, #4]
			timer[1] = '0' + (second % 10);
 8001c48:	4b9a      	ldr	r3, [pc, #616]	@ (8001eb4 <printLight1Timer+0x2cc>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b9a      	ldr	r3, [pc, #616]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001c4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c52:	1099      	asrs	r1, r3, #2
 8001c54:	17d3      	asrs	r3, r2, #31
 8001c56:	1ac9      	subs	r1, r1, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	1ad1      	subs	r1, r2, r3
 8001c62:	b2cb      	uxtb	r3, r1
 8001c64:	3330      	adds	r3, #48	@ 0x30
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	717b      	strb	r3, [r7, #5]
 8001c6a:	e01c      	b.n	8001ca6 <printLight1Timer+0xbe>
		} else {
			timer[0] = '0' + (redLightTimer / 10);
 8001c6c:	4b93      	ldr	r3, [pc, #588]	@ (8001ebc <printLight1Timer+0x2d4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a91      	ldr	r2, [pc, #580]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	1092      	asrs	r2, r2, #2
 8001c78:	17db      	asrs	r3, r3, #31
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3330      	adds	r3, #48	@ 0x30
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	713b      	strb	r3, [r7, #4]
			timer[1] = '0' + (redLightTimer % 10);
 8001c84:	4b8d      	ldr	r3, [pc, #564]	@ (8001ebc <printLight1Timer+0x2d4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001c8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c8e:	1099      	asrs	r1, r3, #2
 8001c90:	17d3      	asrs	r3, r2, #31
 8001c92:	1ac9      	subs	r1, r1, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	1ad1      	subs	r1, r2, r3
 8001c9e:	b2cb      	uxtb	r3, r1
 8001ca0:	3330      	adds	r3, #48	@ 0x30
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	717b      	strb	r3, [r7, #5]
		}
		col = 4; row = 2;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	2302      	movs	r3, #2
 8001cac:	60bb      	str	r3, [r7, #8]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	214e      	movs	r1, #78	@ 0x4e
 8001cd2:	487b      	ldr	r0, [pc, #492]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001cd4:	f7fe fa76 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e00b      	b.n	8001cf6 <printLight1Timer+0x10e>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001cde:	1d3a      	adds	r2, r7, #4
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	214e      	movs	r1, #78	@ 0x4e
 8001cea:	4875      	ldr	r0, [pc, #468]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001cec:	f7fe fa6a 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d9f0      	bls.n	8001cde <printLight1Timer+0xf6>
		break;
 8001cfc:	e0cf      	b.n	8001e9e <printLight1Timer+0x2b6>
	case RED:
		timer[0] = '0' + (settingBuffer[RED] / 10);
 8001cfe:	4b71      	ldr	r3, [pc, #452]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6d      	ldr	r2, [pc, #436]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001d04:	fb82 1203 	smull	r1, r2, r2, r3
 8001d08:	1092      	asrs	r2, r2, #2
 8001d0a:	17db      	asrs	r3, r3, #31
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3330      	adds	r3, #48	@ 0x30
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[RED] % 10);
 8001d16:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001d1c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d20:	1099      	asrs	r1, r3, #2
 8001d22:	17d3      	asrs	r3, r2, #31
 8001d24:	1ac9      	subs	r1, r1, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	1ad1      	subs	r1, r2, r3
 8001d30:	b2cb      	uxtb	r3, r1
 8001d32:	3330      	adds	r3, #48	@ 0x30
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	019b      	lsls	r3, r3, #6
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	214e      	movs	r1, #78	@ 0x4e
 8001d5c:	4858      	ldr	r0, [pc, #352]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001d5e:	f7fe fa31 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	e00b      	b.n	8001d80 <printLight1Timer+0x198>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001d68:	1d3a      	adds	r2, r7, #4
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	214e      	movs	r1, #78	@ 0x4e
 8001d74:	4852      	ldr	r0, [pc, #328]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001d76:	f7fe fa25 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d9f0      	bls.n	8001d68 <printLight1Timer+0x180>
		break;
 8001d86:	e08a      	b.n	8001e9e <printLight1Timer+0x2b6>
	case AMBER:
		timer[0] = '0' + (settingBuffer[AMBER] / 10);
 8001d88:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d92:	1092      	asrs	r2, r2, #2
 8001d94:	17db      	asrs	r3, r3, #31
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	3330      	adds	r3, #48	@ 0x30
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[AMBER] % 10);
 8001da0:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b44      	ldr	r3, [pc, #272]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001da6:	fb83 1302 	smull	r1, r3, r3, r2
 8001daa:	1099      	asrs	r1, r3, #2
 8001dac:	17d3      	asrs	r3, r2, #31
 8001dae:	1ac9      	subs	r1, r1, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	1ad1      	subs	r1, r2, r3
 8001dba:	b2cb      	uxtb	r3, r1
 8001dbc:	3330      	adds	r3, #48	@ 0x30
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	2300      	movs	r3, #0
 8001de4:	214e      	movs	r1, #78	@ 0x4e
 8001de6:	4836      	ldr	r0, [pc, #216]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001de8:	f7fe f9ec 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e00b      	b.n	8001e0a <printLight1Timer+0x222>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001df2:	1d3a      	adds	r2, r7, #4
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	214e      	movs	r1, #78	@ 0x4e
 8001dfe:	4830      	ldr	r0, [pc, #192]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001e00:	f7fe f9e0 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d9f0      	bls.n	8001df2 <printLight1Timer+0x20a>
		break;
 8001e10:	e045      	b.n	8001e9e <printLight1Timer+0x2b6>
	case GREEN:
		timer[0] = '0' + (settingBuffer[GREEN] / 10);
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a28      	ldr	r2, [pc, #160]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001e18:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1c:	1092      	asrs	r2, r2, #2
 8001e1e:	17db      	asrs	r3, r3, #31
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	3330      	adds	r3, #48	@ 0x30
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	713b      	strb	r3, [r7, #4]
		timer[1] = '0' + (settingBuffer[GREEN] % 10);
 8001e2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <printLight1Timer+0x2dc>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <printLight1Timer+0x2d0>)
 8001e30:	fb83 1302 	smull	r1, r3, r3, r2
 8001e34:	1099      	asrs	r1, r3, #2
 8001e36:	17d3      	asrs	r3, r2, #31
 8001e38:	1ac9      	subs	r1, r1, r3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	1ad1      	subs	r1, r2, r3
 8001e44:	b2cb      	uxtb	r3, r1
 8001e46:	3330      	adds	r3, #48	@ 0x30
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	717b      	strb	r3, [r7, #5]

		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	214e      	movs	r1, #78	@ 0x4e
 8001e70:	4813      	ldr	r0, [pc, #76]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001e72:	f7fe f9a7 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e00b      	b.n	8001e94 <printLight1Timer+0x2ac>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001e7c:	1d3a      	adds	r2, r7, #4
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	214e      	movs	r1, #78	@ 0x4e
 8001e88:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <printLight1Timer+0x2d8>)
 8001e8a:	f7fe f99b 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3301      	adds	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d9f0      	bls.n	8001e7c <printLight1Timer+0x294>
		break;
 8001e9a:	e000      	b.n	8001e9e <printLight1Timer+0x2b6>
	default:
		break;
 8001e9c:	bf00      	nop
	}
}
 8001e9e:	bf00      	nop
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	080051d8 	.word	0x080051d8
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	200000e4 	.word	0x200000e4
 8001eb4:	20000014 	.word	0x20000014
 8001eb8:	66666667 	.word	0x66666667
 8001ebc:	20000030 	.word	0x20000030
 8001ec0:	2000018c 	.word	0x2000018c
 8001ec4:	20000018 	.word	0x20000018

08001ec8 <printLight2Timer>:
void printLight2Timer () {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
	if (Mode == NORMAL) {
 8001ece:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <printLight2Timer+0xfc>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d171      	bne.n	8001fba <printLight2Timer+0xf2>
		uint8_t timer[] = "00";
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc8 <printLight2Timer+0x100>)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4611      	mov	r1, r2
 8001ede:	8019      	strh	r1, [r3, #0]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	0c12      	lsrs	r2, r2, #16
 8001ee4:	701a      	strb	r2, [r3, #0]
		if (!lightController.isLight1){
 8001ee6:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <printLight2Timer+0x104>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11d      	bne.n	8001f2a <printLight2Timer+0x62>
			timer[0] = '0' + (second / 10);
 8001eee:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <printLight2Timer+0x108>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <printLight2Timer+0x10c>)
 8001ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef8:	1092      	asrs	r2, r2, #2
 8001efa:	17db      	asrs	r3, r3, #31
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3330      	adds	r3, #48	@ 0x30
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	703b      	strb	r3, [r7, #0]
			timer[1] = '0' + (second % 10);
 8001f06:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <printLight2Timer+0x108>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b32      	ldr	r3, [pc, #200]	@ (8001fd4 <printLight2Timer+0x10c>)
 8001f0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001f10:	1099      	asrs	r1, r3, #2
 8001f12:	17d3      	asrs	r3, r2, #31
 8001f14:	1ac9      	subs	r1, r1, r3
 8001f16:	460b      	mov	r3, r1
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	1ad1      	subs	r1, r2, r3
 8001f20:	b2cb      	uxtb	r3, r1
 8001f22:	3330      	adds	r3, #48	@ 0x30
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	707b      	strb	r3, [r7, #1]
 8001f28:	e01c      	b.n	8001f64 <printLight2Timer+0x9c>
		} else {
			timer[0] = '0' + (redLightTimer / 10);
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <printLight2Timer+0x110>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a29      	ldr	r2, [pc, #164]	@ (8001fd4 <printLight2Timer+0x10c>)
 8001f30:	fb82 1203 	smull	r1, r2, r2, r3
 8001f34:	1092      	asrs	r2, r2, #2
 8001f36:	17db      	asrs	r3, r3, #31
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3330      	adds	r3, #48	@ 0x30
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	703b      	strb	r3, [r7, #0]
			timer[1] = '0' + (redLightTimer % 10);
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <printLight2Timer+0x110>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <printLight2Timer+0x10c>)
 8001f48:	fb83 1302 	smull	r1, r3, r3, r2
 8001f4c:	1099      	asrs	r1, r3, #2
 8001f4e:	17d3      	asrs	r3, r2, #31
 8001f50:	1ac9      	subs	r1, r1, r3
 8001f52:	460b      	mov	r3, r1
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	1ad1      	subs	r1, r2, r3
 8001f5c:	b2cb      	uxtb	r3, r1
 8001f5e:	3330      	adds	r3, #48	@ 0x30
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	707b      	strb	r3, [r7, #1]
		}
		int col = 13, row = 2;
 8001f64:	230d      	movs	r3, #13
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	607b      	str	r3, [r7, #4]
		I2C_Send(&hi2c1, (0x27 << 1), 0x80 | ((row - 1)*64 + (col - 1)), 0);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	214e      	movs	r1, #78	@ 0x4e
 8001f90:	4812      	ldr	r0, [pc, #72]	@ (8001fdc <printLight2Timer+0x114>)
 8001f92:	f7fe f917 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e00b      	b.n	8001fb4 <printLight2Timer+0xec>
			I2C_Send(&hi2c1, (0x27 << 1), timer[i], RS);
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	214e      	movs	r1, #78	@ 0x4e
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <printLight2Timer+0x114>)
 8001faa:	f7fe f90b 	bl	80001c4 <I2C_Send>
		for (int i = 0; i < sizeof(timer)/sizeof(timer[0]) - 1; i++)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d9f0      	bls.n	8001f9c <printLight2Timer+0xd4>
	}
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	080051d8 	.word	0x080051d8
 8001fcc:	200000e4 	.word	0x200000e4
 8001fd0:	20000014 	.word	0x20000014
 8001fd4:	66666667 	.word	0x66666667
 8001fd8:	20000030 	.word	0x20000030
 8001fdc:	2000018c 	.word	0x2000018c

08001fe0 <cursorOff>:
void cursorOff() {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	setCursor(0);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7fe f9f3 	bl	80003d0 <setCursor>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}

08001fee <blinkingOff>:
void blinkingOff() {
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
	setBlinking(0);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7fe f9b8 	bl	8000368 <setBlinking>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <changeMode>:
void changeMode( ) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	switch (lightController.isLight1) {
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <changeMode+0x58>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <changeMode+0x2e>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11d      	bne.n	8002048 <changeMode+0x4c>
	case 1:
		if (lightController.currentState == Green)
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <changeMode+0x58>)
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d103      	bne.n	800201c <changeMode+0x20>
			light1Mode[0] = 'G';
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <changeMode+0x5c>)
 8002016:	2247      	movs	r2, #71	@ 0x47
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e002      	b.n	8002022 <changeMode+0x26>
		else
			light1Mode[0] = 'A';
 800201c:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <changeMode+0x5c>)
 800201e:	2241      	movs	r2, #65	@ 0x41
 8002020:	701a      	strb	r2, [r3, #0]
		light2Mode[0] = 'R';
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <changeMode+0x60>)
 8002024:	2252      	movs	r2, #82	@ 0x52
 8002026:	701a      	strb	r2, [r3, #0]
		break;
 8002028:	e00f      	b.n	800204a <changeMode+0x4e>
	case 0:
		if (lightController.currentState == Green)
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <changeMode+0x58>)
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d103      	bne.n	800203a <changeMode+0x3e>
			light2Mode[0] = 'G';
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <changeMode+0x60>)
 8002034:	2247      	movs	r2, #71	@ 0x47
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e002      	b.n	8002040 <changeMode+0x44>
		else
			light2Mode[0] = 'A';
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <changeMode+0x60>)
 800203c:	2241      	movs	r2, #65	@ 0x41
 800203e:	701a      	strb	r2, [r3, #0]
		light1Mode[0] = 'R';
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <changeMode+0x5c>)
 8002042:	2252      	movs	r2, #82	@ 0x52
 8002044:	701a      	strb	r2, [r3, #0]
		break;
 8002046:	e000      	b.n	800204a <changeMode+0x4e>
	default:
		break;
 8002048:	bf00      	nop
	}
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	200000e4 	.word	0x200000e4
 8002058:	20000044 	.word	0x20000044
 800205c:	20000048 	.word	0x20000048

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002066:	f000 fc27 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206a:	f000 f895 	bl	8002198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206e:	f000 f9cb 	bl	8002408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002072:	f000 f99f 	bl	80023b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002076:	f000 f903 	bl	8002280 <MX_TIM2_Init>
  MX_TIM3_Init();
 800207a:	f000 f94d 	bl	8002318 <MX_TIM3_Init>
  MX_I2C1_Init();
 800207e:	f000 f8d1 	bl	8002224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Traffic_Light_FSM_Init(BUTTON_1_GPIO_Port, BUTTON_1_Pin,
 8002082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002086:	9309      	str	r3, [sp, #36]	@ 0x24
 8002088:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <main+0xf4>)
 800208a:	9308      	str	r3, [sp, #32]
 800208c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002090:	9307      	str	r3, [sp, #28]
 8002092:	4b30      	ldr	r3, [pc, #192]	@ (8002154 <main+0xf4>)
 8002094:	9306      	str	r3, [sp, #24]
 8002096:	2340      	movs	r3, #64	@ 0x40
 8002098:	9305      	str	r3, [sp, #20]
 800209a:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <main+0xf8>)
 800209c:	9304      	str	r3, [sp, #16]
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	9303      	str	r3, [sp, #12]
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <main+0xfc>)
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2320      	movs	r3, #32
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <main+0xf8>)
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b2:	4a29      	ldr	r2, [pc, #164]	@ (8002158 <main+0xf8>)
 80020b4:	2110      	movs	r1, #16
 80020b6:	4828      	ldr	r0, [pc, #160]	@ (8002158 <main+0xf8>)
 80020b8:	f7fe fafc 	bl	80006b4 <Traffic_Light_FSM_Init>
						 BUTTON_3_GPIO_Port, BUTTON_3_Pin,
						 LIGHT1_SIG1_GPIO_Port, LIGHT1_SIG1_Pin,
						 LIGHT1_SIG2_GPIO_Port, LIGHT1_SIG2_Pin,
						 LIGHT2_SIG1_GPIO_Port, LIGHT2_SIG1_Pin,
						 LIGHT2_SIG2_GPIO_Port, LIGHT2_SIG2_Pin);
  HAL_TIM_Base_Start_IT(&htim3);
 80020bc:	4828      	ldr	r0, [pc, #160]	@ (8002160 <main+0x100>)
 80020be:	f002 fa79 	bl	80045b4 <HAL_TIM_Base_Start_IT>
  LCD_Init(&hi2c1);
 80020c2:	4828      	ldr	r0, [pc, #160]	@ (8002164 <main+0x104>)
 80020c4:	f7fe f902 	bl	80002cc <LCD_Init>
  SCH_Init();
 80020c8:	f7fe f9b6 	bl	8000438 <SCH_Init>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(clearLCD, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	4825      	ldr	r0, [pc, #148]	@ (8002168 <main+0x108>)
 80020d2:	f7fe f9bd 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(cursorOff, 3, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2103      	movs	r1, #3
 80020da:	4824      	ldr	r0, [pc, #144]	@ (800216c <main+0x10c>)
 80020dc:	f7fe f9b8 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(blinkingOff, 6, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2106      	movs	r1, #6
 80020e4:	4822      	ldr	r0, [pc, #136]	@ (8002170 <main+0x110>)
 80020e6:	f7fe f9b3 	bl	8000450 <SCH_Add_Task>

  SCH_Add_Task(printLightNotify, 0, 353);
 80020ea:	f240 1261 	movw	r2, #353	@ 0x161
 80020ee:	2100      	movs	r1, #0
 80020f0:	4820      	ldr	r0, [pc, #128]	@ (8002174 <main+0x114>)
 80020f2:	f7fe f9ad 	bl	8000450 <SCH_Add_Task>
//  SCH_Add_Task(printLight2, 0, 1000);
  SCH_Add_Task(printLight1Timer, 0, 243);
 80020f6:	22f3      	movs	r2, #243	@ 0xf3
 80020f8:	2100      	movs	r1, #0
 80020fa:	481f      	ldr	r0, [pc, #124]	@ (8002178 <main+0x118>)
 80020fc:	f7fe f9a8 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(printLight2Timer, 0, 333);
 8002100:	f240 124d 	movw	r2, #333	@ 0x14d
 8002104:	2100      	movs	r1, #0
 8002106:	481d      	ldr	r0, [pc, #116]	@ (800217c <main+0x11c>)
 8002108:	f7fe f9a2 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(printLight1Mode, 0, 300);
 800210c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002110:	2100      	movs	r1, #0
 8002112:	481b      	ldr	r0, [pc, #108]	@ (8002180 <main+0x120>)
 8002114:	f7fe f99c 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(printLight2Mode, 0, 400);
 8002118:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800211c:	2100      	movs	r1, #0
 800211e:	4819      	ldr	r0, [pc, #100]	@ (8002184 <main+0x124>)
 8002120:	f7fe f996 	bl	8000450 <SCH_Add_Task>

  SCH_Add_Task(changeMode, 0, 2*TIMER_CYCLE);
 8002124:	2202      	movs	r2, #2
 8002126:	2100      	movs	r1, #0
 8002128:	4817      	ldr	r0, [pc, #92]	@ (8002188 <main+0x128>)
 800212a:	f7fe f991 	bl	8000450 <SCH_Add_Task>

  SCH_Add_Task(Button_Read, 0, TIMER_CYCLE);
 800212e:	2201      	movs	r2, #1
 8002130:	2100      	movs	r1, #0
 8002132:	4816      	ldr	r0, [pc, #88]	@ (800218c <main+0x12c>)
 8002134:	f7fe f98c 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(Traffic_Light_FSM_Run, 0, TIMER_CYCLE);
 8002138:	2201      	movs	r2, #1
 800213a:	2100      	movs	r1, #0
 800213c:	4814      	ldr	r0, [pc, #80]	@ (8002190 <main+0x130>)
 800213e:	f7fe f987 	bl	8000450 <SCH_Add_Task>
  SCH_Add_Task(trafficLightFSM, 0, TIMER_CYCLE);
 8002142:	2201      	movs	r2, #1
 8002144:	2100      	movs	r1, #0
 8002146:	4813      	ldr	r0, [pc, #76]	@ (8002194 <main+0x134>)
 8002148:	f7fe f982 	bl	8000450 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatcher();
 800214c:	f7fe fa78 	bl	8000640 <SCH_Dispatcher>
 8002150:	e7fc      	b.n	800214c <main+0xec>
 8002152:	bf00      	nop
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	20000228 	.word	0x20000228
 8002164:	2000018c 	.word	0x2000018c
 8002168:	08000341 	.word	0x08000341
 800216c:	08001fe1 	.word	0x08001fe1
 8002170:	08001fef 	.word	0x08001fef
 8002174:	08001695 	.word	0x08001695
 8002178:	08001be9 	.word	0x08001be9
 800217c:	08001ec9 	.word	0x08001ec9
 8002180:	08001af9 	.word	0x08001af9
 8002184:	08001b71 	.word	0x08001b71
 8002188:	08001ffd 	.word	0x08001ffd
 800218c:	080014e1 	.word	0x080014e1
 8002190:	0800075d 	.word	0x0800075d
 8002194:	080012bd 	.word	0x080012bd

08002198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b090      	sub	sp, #64	@ 0x40
 800219c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	2228      	movs	r2, #40	@ 0x28
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 ff4e 	bl	8005048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021cc:	2302      	movs	r3, #2
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 fd87 	bl	8003cf4 <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021ec:	f000 f9b2 	bl	8002554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f0:	230f      	movs	r3, #15
 80021f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f4:	2302      	movs	r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2102      	movs	r1, #2
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fff4 	bl	80041f8 <HAL_RCC_ClockConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002216:	f000 f99d 	bl	8002554 <Error_Handler>
  }
}
 800221a:	bf00      	nop
 800221c:	3740      	adds	r7, #64	@ 0x40
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002228:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <MX_I2C1_Init+0x50>)
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <MX_I2C1_Init+0x54>)
 800222c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002230:	4a12      	ldr	r2, [pc, #72]	@ (800227c <MX_I2C1_Init+0x58>)
 8002232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <MX_I2C1_Init+0x50>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002242:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <MX_I2C1_Init+0x50>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <MX_I2C1_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <MX_I2C1_Init+0x50>)
 8002262:	f001 f8ab 	bl	80033bc <HAL_I2C_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800226c:	f000 f972 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000018c 	.word	0x2000018c
 8002278:	40005400 	.word	0x40005400
 800227c:	000186a0 	.word	0x000186a0

08002280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <MX_TIM2_Init+0x94>)
 800229e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022a6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80022b2:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022b4:	2209      	movs	r2, #9
 80022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022c4:	4813      	ldr	r0, [pc, #76]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022c6:	f002 f925 	bl	8004514 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022d0:	f000 f940 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022e2:	f002 fac1 	bl	8004868 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022ec:	f000 f932 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_TIM2_Init+0x94>)
 80022fe:	f002 fc97 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002308:	f000 f924 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200001e0 	.word	0x200001e0

08002318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002336:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <MX_TIM3_Init+0x98>)
 8002338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23999;
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_TIM3_Init+0x94>)
 800233c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <MX_TIM3_Init+0x94>)
 800234a:	2202      	movs	r2, #2
 800234c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800235a:	4814      	ldr	r0, [pc, #80]	@ (80023ac <MX_TIM3_Init+0x94>)
 800235c:	f002 f8da 	bl	8004514 <HAL_TIM_Base_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002366:	f000 f8f5 	bl	8002554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4619      	mov	r1, r3
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002378:	f002 fa76 	bl	8004868 <HAL_TIM_ConfigClockSource>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002382:	f000 f8e7 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800238e:	463b      	mov	r3, r7
 8002390:	4619      	mov	r1, r3
 8002392:	4806      	ldr	r0, [pc, #24]	@ (80023ac <MX_TIM3_Init+0x94>)
 8002394:	f002 fc4c 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800239e:	f000 f8d9 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000228 	.word	0x20000228
 80023b0:	40000400 	.word	0x40000400

080023b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <MX_USART2_UART_Init+0x50>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <MX_USART2_UART_Init+0x4c>)
 80023ec:	f002 fc90 	bl	8004d10 <HAL_UART_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023f6:	f000 f8ad 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000270 	.word	0x20000270
 8002404:	40004400 	.word	0x40004400

08002408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <MX_GPIO_Init+0x138>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4a47      	ldr	r2, [pc, #284]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6193      	str	r3, [r2, #24]
 8002428:	4b45      	ldr	r3, [pc, #276]	@ (8002540 <MX_GPIO_Init+0x138>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002434:	4b42      	ldr	r3, [pc, #264]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a41      	ldr	r2, [pc, #260]	@ (8002540 <MX_GPIO_Init+0x138>)
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <MX_GPIO_Init+0x138>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <MX_GPIO_Init+0x138>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <MX_GPIO_Init+0x138>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <MX_GPIO_Init+0x138>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LIGHT2_SIG1_Pin|LIGHT2_SIG2_Pin, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002482:	4830      	ldr	r0, [pc, #192]	@ (8002544 <MX_GPIO_Init+0x13c>)
 8002484:	f000 ff47 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT1_SIG1_GPIO_Port, LIGHT1_SIG1_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	@ 0x80
 800248c:	482e      	ldr	r0, [pc, #184]	@ (8002548 <MX_GPIO_Init+0x140>)
 800248e:	f000 ff42 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIGHT1_SIG2_GPIO_Port, LIGHT1_SIG2_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2140      	movs	r1, #64	@ 0x40
 8002496:	482d      	ldr	r0, [pc, #180]	@ (800254c <MX_GPIO_Init+0x144>)
 8002498:	f000 ff3d 	bl	8003316 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800249c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002550 <MX_GPIO_Init+0x148>)
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4825      	ldr	r0, [pc, #148]	@ (8002548 <MX_GPIO_Init+0x140>)
 80024b2:	f000 fd95 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LIGHT2_SIG1_Pin LIGHT2_SIG2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LIGHT2_SIG1_Pin|LIGHT2_SIG2_Pin;
 80024b6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80024ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4619      	mov	r1, r3
 80024ce:	481d      	ldr	r0, [pc, #116]	@ (8002544 <MX_GPIO_Init+0x13c>)
 80024d0:	f000 fd86 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_1_Pin|BUTTON_3_Pin;
 80024d4:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80024d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4619      	mov	r1, r3
 80024e8:	4818      	ldr	r0, [pc, #96]	@ (800254c <MX_GPIO_Init+0x144>)
 80024ea:	f000 fd79 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT1_SIG1_Pin */
  GPIO_InitStruct.Pin = LIGHT1_SIG1_Pin;
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT1_SIG1_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4619      	mov	r1, r3
 8002504:	4810      	ldr	r0, [pc, #64]	@ (8002548 <MX_GPIO_Init+0x140>)
 8002506:	f000 fd6b 	bl	8002fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIGHT1_SIG2_Pin */
  GPIO_InitStruct.Pin = LIGHT1_SIG2_Pin;
 800250a:	2340      	movs	r3, #64	@ 0x40
 800250c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2302      	movs	r3, #2
 8002518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LIGHT1_SIG2_GPIO_Port, &GPIO_InitStruct);
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4619      	mov	r1, r3
 8002520:	480a      	ldr	r0, [pc, #40]	@ (800254c <MX_GPIO_Init+0x144>)
 8002522:	f000 fd5d 	bl	8002fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2028      	movs	r0, #40	@ 0x28
 800252c:	f000 fb21 	bl	8002b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002530:	2028      	movs	r0, #40	@ 0x28
 8002532:	f000 fb3a 	bl	8002baa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800
 8002548:	40011000 	.word	0x40011000
 800254c:	40010c00 	.word	0x40010c00
 8002550:	10110000 	.word	0x10110000

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <Error_Handler+0x8>

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_MspInit+0x5c>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <HAL_MspInit+0x5c>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6193      	str	r3, [r2, #24]
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_MspInit+0x5c>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_MspInit+0x5c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_MspInit+0x60>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_MspInit+0x60>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000

080025c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_I2C_MspInit+0x90>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d132      	bne.n	800264a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002602:	2312      	movs	r3, #18
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4812      	ldr	r0, [pc, #72]	@ (800265c <HAL_I2C_MspInit+0x98>)
 8002612:	f000 fce5 	bl	8002fe0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_I2C_MspInit+0x9c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	4a0c      	ldr	r2, [pc, #48]	@ (8002660 <HAL_I2C_MspInit+0x9c>)
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a08      	ldr	r2, [pc, #32]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 8002638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_I2C_MspInit+0x94>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800264a:	bf00      	nop
 800264c:	3728      	adds	r7, #40	@ 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40005400 	.word	0x40005400
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010000 	.word	0x40010000

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002674:	d114      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002676:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a18      	ldr	r2, [pc, #96]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	201c      	movs	r0, #28
 8002694:	f000 fa6d 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002698:	201c      	movs	r0, #28
 800269a:	f000 fa86 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800269e:	e018      	b.n	80026d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <HAL_TIM_Base_MspInit+0x7c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d113      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a0b      	ldr	r2, [pc, #44]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_TIM_Base_MspInit+0x78>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201d      	movs	r0, #29
 80026c8:	f000 fa53 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026cc:	201d      	movs	r0, #29
 80026ce:	f000 fa6c 	bl	8002baa <HAL_NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40000400 	.word	0x40000400

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0310 	add.w	r3, r7, #16
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a15      	ldr	r2, [pc, #84]	@ (8002754 <HAL_UART_MspInit+0x70>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d123      	bne.n	800274c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_UART_MspInit+0x74>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <HAL_UART_MspInit+0x74>)
 800270a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270e:	61d3      	str	r3, [r2, #28]
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <HAL_UART_MspInit+0x74>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <HAL_UART_MspInit+0x74>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <HAL_UART_MspInit+0x74>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_UART_MspInit+0x74>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002734:	230c      	movs	r3, #12
 8002736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2302      	movs	r3, #2
 800273e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4619      	mov	r1, r3
 8002746:	4805      	ldr	r0, [pc, #20]	@ (800275c <HAL_UART_MspInit+0x78>)
 8002748:	f000 fc4a 	bl	8002fe0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40004400 	.word	0x40004400
 8002758:	40021000 	.word	0x40021000
 800275c:	40010800 	.word	0x40010800

08002760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <NMI_Handler+0x4>

08002768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	return;
 800276c:	bf00      	nop
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <MemManage_Handler+0x4>

0800277c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <UsageFault_Handler+0x4>

0800278c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b4:	f000 f8c6 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <TIM2_IRQHandler+0x10>)
 80027c2:	f001 ff49 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001e0 	.word	0x200001e0

080027d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027d4:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <TIM3_IRQHandler+0x10>)
 80027d6:	f001 ff3f 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000228 	.word	0x20000228

080027e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027ec:	f000 fdc4 	bl	8003378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <_sbrk+0x5c>)
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <_sbrk+0x60>)
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <_sbrk+0x64>)
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <_sbrk+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002824:	f002 fc28 	bl	8005078 <__errno>
 8002828:	4603      	mov	r3, r0
 800282a:	220c      	movs	r2, #12
 800282c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e009      	b.n	8002848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <_sbrk+0x64>)
 8002844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20005000 	.word	0x20005000
 8002854:	00000400 	.word	0x00000400
 8002858:	200002b8 	.word	0x200002b8
 800285c:	20000428 	.word	0x20000428

08002860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800286c:	f7ff fff8 	bl	8002860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002870:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002872:	490c      	ldr	r1, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002888:	4c09      	ldr	r4, [pc, #36]	@ (80028b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f002 fbf5 	bl	8005084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800289a:	f7ff fbe1 	bl	8002060 <main>
  bx lr
 800289e:	4770      	bx	lr
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80028a8:	08005210 	.word	0x08005210
  ldr r2, =_sbss
 80028ac:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80028b0:	20000428 	.word	0x20000428

080028b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC1_2_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <HAL_Init+0x28>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <HAL_Init+0x28>)
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 f947 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fe44 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f95f 	bl	8002bc6 <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 f927 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000004c 	.word	0x2000004c
 800293c:	20000054 	.word	0x20000054
 8002940:	20000050 	.word	0x20000050

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_IncTick+0x1c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_IncTick+0x20>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <HAL_IncTick+0x20>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000054 	.word	0x20000054
 8002964:	200002bc 	.word	0x200002bc

08002968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b02      	ldr	r3, [pc, #8]	@ (8002978 <HAL_GetTick+0x10>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	200002bc 	.word	0x200002bc

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fff0 	bl	8002968 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffe0 	bl	8002968 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000054 	.word	0x20000054

080029c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <__NVIC_SetPriorityGrouping+0x44>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <__NVIC_GetPriorityGrouping+0x18>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db0b      	blt.n	8002a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	4906      	ldr	r1, [pc, #24]	@ (8002a5c <__NVIC_EnableIRQ+0x34>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	@ (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	@ 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff90 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	@ (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff2d 	bl	80029c4 <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff42 	bl	8002a0c <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff90 	bl	8002ab4 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5f 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff35 	bl	8002a28 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa2 	bl	8002b18 <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <HAL_FLASH_Program+0xd8>)
 8002bfc:	7e1b      	ldrb	r3, [r3, #24]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_FLASH_Program+0x26>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e054      	b.n	8002cb0 <HAL_FLASH_Program+0xd0>
 8002c06:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <HAL_FLASH_Program+0xd8>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c10:	f000 f8a8 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d144      	bne.n	8002ca8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d102      	bne.n	8002c2a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002c24:	2301      	movs	r3, #1
 8002c26:	757b      	strb	r3, [r7, #21]
 8002c28:	e007      	b.n	8002c3a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d102      	bne.n	8002c36 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c30:	2302      	movs	r3, #2
 8002c32:	757b      	strb	r3, [r7, #21]
 8002c34:	e001      	b.n	8002c3a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c36:	2304      	movs	r3, #4
 8002c38:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75bb      	strb	r3, [r7, #22]
 8002c3e:	e02d      	b.n	8002c9c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002c40:	7dbb      	ldrb	r3, [r7, #22]
 8002c42:	005a      	lsls	r2, r3, #1
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	eb02 0c03 	add.w	ip, r2, r3
 8002c4a:	7dbb      	ldrb	r3, [r7, #22]
 8002c4c:	0119      	lsls	r1, r3, #4
 8002c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c52:	f1c1 0620 	rsb	r6, r1, #32
 8002c56:	f1a1 0020 	sub.w	r0, r1, #32
 8002c5a:	fa22 f401 	lsr.w	r4, r2, r1
 8002c5e:	fa03 f606 	lsl.w	r6, r3, r6
 8002c62:	4334      	orrs	r4, r6
 8002c64:	fa23 f000 	lsr.w	r0, r3, r0
 8002c68:	4304      	orrs	r4, r0
 8002c6a:	fa23 f501 	lsr.w	r5, r3, r1
 8002c6e:	b2a3      	uxth	r3, r4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4660      	mov	r0, ip
 8002c74:	f000 f85a 	bl	8002d2c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c7c:	f000 f872 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_FLASH_Program+0xdc>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_FLASH_Program+0xdc>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002c96:	7dbb      	ldrb	r3, [r7, #22]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	75bb      	strb	r3, [r7, #22]
 8002c9c:	7dba      	ldrb	r2, [r7, #22]
 8002c9e:	7d7b      	ldrb	r3, [r7, #21]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3cd      	bcc.n	8002c40 <HAL_FLASH_Program+0x60>
 8002ca4:	e000      	b.n	8002ca8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002ca6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_FLASH_Program+0xd8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	761a      	strb	r2, [r3, #24]

  return status;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	200002c0 	.word	0x200002c0
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_FLASH_Unlock+0x40>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <HAL_FLASH_Unlock+0x40>)
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_FLASH_Unlock+0x44>)
 8002cda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002cdc:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_FLASH_Unlock+0x40>)
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_FLASH_Unlock+0x48>)
 8002ce0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_FLASH_Unlock+0x40>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	45670123 	.word	0x45670123
 8002d08:	cdef89ab 	.word	0xcdef89ab

08002d0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_FLASH_Lock+0x1c>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <HAL_FLASH_Lock+0x1c>)
 8002d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000

08002d2c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d38:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <FLASH_Program_HalfWord+0x30>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <FLASH_Program_HalfWord+0x34>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <FLASH_Program_HalfWord+0x34>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	887a      	ldrh	r2, [r7, #2]
 8002d4e:	801a      	strh	r2, [r3, #0]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200002c0 	.word	0x200002c0
 8002d60:	40022000 	.word	0x40022000

08002d64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fdfc 	bl	8002968 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d72:	e010      	b.n	8002d96 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d00c      	beq.n	8002d96 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <FLASH_WaitForLastOperation+0x2e>
 8002d82:	f7ff fdf1 	bl	8002968 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d201      	bcs.n	8002d96 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e025      	b.n	8002de2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e8      	bne.n	8002d74 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002db0:	2220      	movs	r2, #32
 8002db2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002db4:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <FLASH_WaitForLastOperation+0x88>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002dd8:	f000 f80a 	bl	8002df0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40022000 	.word	0x40022000

08002df0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002dfa:	4b23      	ldr	r3, [pc, #140]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e06:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e10:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002e26:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e30:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002e46:	4b11      	ldr	r3, [pc, #68]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e8c <FLASH_SetErrorCode+0x9c>)
 8002e50:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002e52:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f240 1201 	movw	r2, #257	@ 0x101
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d106      	bne.n	8002e76 <FLASH_SetErrorCode+0x86>
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4a06      	ldr	r2, [pc, #24]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	61d3      	str	r3, [r2, #28]
}  
 8002e74:	e002      	b.n	8002e7c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <FLASH_SetErrorCode+0x98>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60d3      	str	r3, [r2, #12]
}  
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	200002c0 	.word	0x200002c0

08002e90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_FLASHEx_Erase+0xd0>)
 8002ea4:	7e1b      	ldrb	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_FLASHEx_Erase+0x1e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e053      	b.n	8002f56 <HAL_FLASHEx_Erase+0xc6>
 8002eae:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <HAL_FLASHEx_Erase+0xd0>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d116      	bne.n	8002eea <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ebc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ec0:	f7ff ff50 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d141      	bne.n	8002f4e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 f84c 	bl	8002f68 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ed0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ed4:	f7ff ff46 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002edc:	4b21      	ldr	r3, [pc, #132]	@ (8002f64 <HAL_FLASHEx_Erase+0xd4>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	@ (8002f64 <HAL_FLASHEx_Erase+0xd4>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6113      	str	r3, [r2, #16]
 8002ee8:	e031      	b.n	8002f4e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002eea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002eee:	f7ff ff39 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d12a      	bne.n	8002f4e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f04f 32ff 	mov.w	r2, #4294967295
 8002efe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	e019      	b.n	8002f3c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002f08:	68b8      	ldr	r0, [r7, #8]
 8002f0a:	f000 f849 	bl	8002fa0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f0e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f12:	f7ff ff27 	bl	8002d64 <FLASH_WaitForLastOperation>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_FLASHEx_Erase+0xd4>)
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	@ (8002f64 <HAL_FLASHEx_Erase+0xd4>)
 8002f20:	f023 0302 	bic.w	r3, r3, #2
 8002f24:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	601a      	str	r2, [r3, #0]
            break;
 8002f32:	e00c      	b.n	8002f4e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f3a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	029a      	lsls	r2, r3, #10
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4413      	add	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3dc      	bcc.n	8002f08 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f4e:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <HAL_FLASHEx_Erase+0xd0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	761a      	strb	r2, [r3, #24]

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200002c0 	.word	0x200002c0
 8002f64:	40022000 	.word	0x40022000

08002f68 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <FLASH_MassErase+0x30>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <FLASH_MassErase+0x34>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <FLASH_MassErase+0x34>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <FLASH_MassErase+0x34>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <FLASH_MassErase+0x34>)
 8002f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f8c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	200002c0 	.word	0x200002c0
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <FLASH_PageErase+0x38>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <FLASH_PageErase+0x3c>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <FLASH_PageErase+0x3c>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fba:	4a08      	ldr	r2, [pc, #32]	@ (8002fdc <FLASH_PageErase+0x3c>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <FLASH_PageErase+0x3c>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <FLASH_PageErase+0x3c>)
 8002fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fca:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200002c0 	.word	0x200002c0
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b08b      	sub	sp, #44	@ 0x2c
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff2:	e169      	b.n	80032c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8158 	bne.w	80032c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a9a      	ldr	r2, [pc, #616]	@ (8003280 <HAL_GPIO_Init+0x2a0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d05e      	beq.n	80030da <HAL_GPIO_Init+0xfa>
 800301c:	4a98      	ldr	r2, [pc, #608]	@ (8003280 <HAL_GPIO_Init+0x2a0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d875      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 8003022:	4a98      	ldr	r2, [pc, #608]	@ (8003284 <HAL_GPIO_Init+0x2a4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d058      	beq.n	80030da <HAL_GPIO_Init+0xfa>
 8003028:	4a96      	ldr	r2, [pc, #600]	@ (8003284 <HAL_GPIO_Init+0x2a4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d86f      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 800302e:	4a96      	ldr	r2, [pc, #600]	@ (8003288 <HAL_GPIO_Init+0x2a8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d052      	beq.n	80030da <HAL_GPIO_Init+0xfa>
 8003034:	4a94      	ldr	r2, [pc, #592]	@ (8003288 <HAL_GPIO_Init+0x2a8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d869      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 800303a:	4a94      	ldr	r2, [pc, #592]	@ (800328c <HAL_GPIO_Init+0x2ac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04c      	beq.n	80030da <HAL_GPIO_Init+0xfa>
 8003040:	4a92      	ldr	r2, [pc, #584]	@ (800328c <HAL_GPIO_Init+0x2ac>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d863      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 8003046:	4a92      	ldr	r2, [pc, #584]	@ (8003290 <HAL_GPIO_Init+0x2b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d046      	beq.n	80030da <HAL_GPIO_Init+0xfa>
 800304c:	4a90      	ldr	r2, [pc, #576]	@ (8003290 <HAL_GPIO_Init+0x2b0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d85d      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 8003052:	2b12      	cmp	r3, #18
 8003054:	d82a      	bhi.n	80030ac <HAL_GPIO_Init+0xcc>
 8003056:	2b12      	cmp	r3, #18
 8003058:	d859      	bhi.n	800310e <HAL_GPIO_Init+0x12e>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <HAL_GPIO_Init+0x80>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	080030db 	.word	0x080030db
 8003064:	080030b5 	.word	0x080030b5
 8003068:	080030c7 	.word	0x080030c7
 800306c:	08003109 	.word	0x08003109
 8003070:	0800310f 	.word	0x0800310f
 8003074:	0800310f 	.word	0x0800310f
 8003078:	0800310f 	.word	0x0800310f
 800307c:	0800310f 	.word	0x0800310f
 8003080:	0800310f 	.word	0x0800310f
 8003084:	0800310f 	.word	0x0800310f
 8003088:	0800310f 	.word	0x0800310f
 800308c:	0800310f 	.word	0x0800310f
 8003090:	0800310f 	.word	0x0800310f
 8003094:	0800310f 	.word	0x0800310f
 8003098:	0800310f 	.word	0x0800310f
 800309c:	0800310f 	.word	0x0800310f
 80030a0:	0800310f 	.word	0x0800310f
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	4a79      	ldr	r2, [pc, #484]	@ (8003294 <HAL_GPIO_Init+0x2b4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030b2:	e02c      	b.n	800310e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	623b      	str	r3, [r7, #32]
          break;
 80030ba:	e029      	b.n	8003110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	3304      	adds	r3, #4
 80030c2:	623b      	str	r3, [r7, #32]
          break;
 80030c4:	e024      	b.n	8003110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	3308      	adds	r3, #8
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e01f      	b.n	8003110 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	330c      	adds	r3, #12
 80030d6:	623b      	str	r3, [r7, #32]
          break;
 80030d8:	e01a      	b.n	8003110 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030e2:	2304      	movs	r3, #4
 80030e4:	623b      	str	r3, [r7, #32]
          break;
 80030e6:	e013      	b.n	8003110 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f0:	2308      	movs	r3, #8
 80030f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	611a      	str	r2, [r3, #16]
          break;
 80030fa:	e009      	b.n	8003110 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030fc:	2308      	movs	r3, #8
 80030fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	615a      	str	r2, [r3, #20]
          break;
 8003106:	e003      	b.n	8003110 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
          break;
 800310c:	e000      	b.n	8003110 <HAL_GPIO_Init+0x130>
          break;
 800310e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2bff      	cmp	r3, #255	@ 0xff
 8003114:	d801      	bhi.n	800311a <HAL_GPIO_Init+0x13a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	e001      	b.n	800311e <HAL_GPIO_Init+0x13e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2bff      	cmp	r3, #255	@ 0xff
 8003124:	d802      	bhi.n	800312c <HAL_GPIO_Init+0x14c>
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	e002      	b.n	8003132 <HAL_GPIO_Init+0x152>
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	3b08      	subs	r3, #8
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	210f      	movs	r1, #15
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	401a      	ands	r2, r3
 8003144:	6a39      	ldr	r1, [r7, #32]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80b1 	beq.w	80032c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003160:	4b4d      	ldr	r3, [pc, #308]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a4c      	ldr	r2, [pc, #304]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b4a      	ldr	r3, [pc, #296]	@ (8003298 <HAL_GPIO_Init+0x2b8>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003178:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_GPIO_Init+0x2bc>)
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003184:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a40      	ldr	r2, [pc, #256]	@ (80032a0 <HAL_GPIO_Init+0x2c0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <HAL_GPIO_Init+0x1ec>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a3f      	ldr	r2, [pc, #252]	@ (80032a4 <HAL_GPIO_Init+0x2c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00d      	beq.n	80031c8 <HAL_GPIO_Init+0x1e8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3e      	ldr	r2, [pc, #248]	@ (80032a8 <HAL_GPIO_Init+0x2c8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <HAL_GPIO_Init+0x1e4>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3d      	ldr	r2, [pc, #244]	@ (80032ac <HAL_GPIO_Init+0x2cc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_GPIO_Init+0x1e0>
 80031bc:	2303      	movs	r3, #3
 80031be:	e006      	b.n	80031ce <HAL_GPIO_Init+0x1ee>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e004      	b.n	80031ce <HAL_GPIO_Init+0x1ee>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e002      	b.n	80031ce <HAL_GPIO_Init+0x1ee>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_GPIO_Init+0x1ee>
 80031cc:	2300      	movs	r3, #0
 80031ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d0:	f002 0203 	and.w	r2, r2, #3
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	4093      	lsls	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031de:	492f      	ldr	r1, [pc, #188]	@ (800329c <HAL_GPIO_Init+0x2bc>)
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031f8:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	492c      	ldr	r1, [pc, #176]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003206:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	43db      	mvns	r3, r3
 800320e:	4928      	ldr	r1, [pc, #160]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003210:	4013      	ands	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003220:	4b23      	ldr	r3, [pc, #140]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	4922      	ldr	r1, [pc, #136]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800322e:	4b20      	ldr	r3, [pc, #128]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	43db      	mvns	r3, r3
 8003236:	491e      	ldr	r1, [pc, #120]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003238:	4013      	ands	r3, r2
 800323a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4918      	ldr	r1, [pc, #96]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	4914      	ldr	r1, [pc, #80]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003260:	4013      	ands	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003270:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	490e      	ldr	r1, [pc, #56]	@ (80032b0 <HAL_GPIO_Init+0x2d0>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e021      	b.n	80032c2 <HAL_GPIO_Init+0x2e2>
 800327e:	bf00      	nop
 8003280:	10320000 	.word	0x10320000
 8003284:	10310000 	.word	0x10310000
 8003288:	10220000 	.word	0x10220000
 800328c:	10210000 	.word	0x10210000
 8003290:	10120000 	.word	0x10120000
 8003294:	10110000 	.word	0x10110000
 8003298:	40021000 	.word	0x40021000
 800329c:	40010000 	.word	0x40010000
 80032a0:	40010800 	.word	0x40010800
 80032a4:	40010c00 	.word	0x40010c00
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_GPIO_Init+0x304>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	4909      	ldr	r1, [pc, #36]	@ (80032e4 <HAL_GPIO_Init+0x304>)
 80032be:	4013      	ands	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f ae8e 	bne.w	8002ff4 <HAL_GPIO_Init+0x14>
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	372c      	adds	r7, #44	@ 0x2c
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e001      	b.n	800330a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	807b      	strh	r3, [r7, #2]
 8003322:	4613      	mov	r3, r2
 8003324:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003326:	787b      	ldrb	r3, [r7, #1]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332c:	887a      	ldrh	r2, [r7, #2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003332:	e003      	b.n	800333c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	041a      	lsls	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003358:	887a      	ldrh	r2, [r7, #2]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	041a      	lsls	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43d9      	mvns	r1, r3
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	400b      	ands	r3, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003382:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800338e:	4a05      	ldr	r2, [pc, #20]	@ (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f806 	bl	80033a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e12b      	b.n	8003626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff f8ee 	bl	80025c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	@ 0x24
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800340e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800341e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003420:	f001 f832 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a81      	ldr	r2, [pc, #516]	@ (8003630 <HAL_I2C_Init+0x274>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d807      	bhi.n	8003440 <HAL_I2C_Init+0x84>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a80      	ldr	r2, [pc, #512]	@ (8003634 <HAL_I2C_Init+0x278>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e006      	b.n	800344e <HAL_I2C_Init+0x92>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a7d      	ldr	r2, [pc, #500]	@ (8003638 <HAL_I2C_Init+0x27c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	bf94      	ite	ls
 8003448:	2301      	movls	r3, #1
 800344a:	2300      	movhi	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0e7      	b.n	8003626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a78      	ldr	r2, [pc, #480]	@ (800363c <HAL_I2C_Init+0x280>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a6a      	ldr	r2, [pc, #424]	@ (8003630 <HAL_I2C_Init+0x274>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d802      	bhi.n	8003490 <HAL_I2C_Init+0xd4>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	e009      	b.n	80034a4 <HAL_I2C_Init+0xe8>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	4a69      	ldr	r2, [pc, #420]	@ (8003640 <HAL_I2C_Init+0x284>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	3301      	adds	r3, #1
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	495c      	ldr	r1, [pc, #368]	@ (8003630 <HAL_I2C_Init+0x274>)
 80034c0:	428b      	cmp	r3, r1
 80034c2:	d819      	bhi.n	80034f8 <HAL_I2C_Init+0x13c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e59      	subs	r1, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034d8:	400b      	ands	r3, r1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_I2C_Init+0x138>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e59      	subs	r1, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f2:	e051      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 80034f4:	2304      	movs	r3, #4
 80034f6:	e04f      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d111      	bne.n	8003524 <HAL_I2C_Init+0x168>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e012      	b.n	800354a <HAL_I2C_Init+0x18e>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e58      	subs	r0, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	0099      	lsls	r1, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	fbb0 f3f3 	udiv	r3, r0, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Init+0x196>
 800354e:	2301      	movs	r3, #1
 8003550:	e022      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10e      	bne.n	8003578 <HAL_I2C_Init+0x1bc>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e58      	subs	r0, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	440b      	add	r3, r1
 8003568:	fbb0 f3f3 	udiv	r3, r0, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003576:	e00f      	b.n	8003598 <HAL_I2C_Init+0x1dc>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	6809      	ldr	r1, [r1, #0]
 800359c:	4313      	orrs	r3, r2
 800359e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6911      	ldr	r1, [r2, #16]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	000186a0 	.word	0x000186a0
 8003634:	001e847f 	.word	0x001e847f
 8003638:	003d08ff 	.word	0x003d08ff
 800363c:	431bde83 	.word	0x431bde83
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	460b      	mov	r3, r1
 8003652:	817b      	strh	r3, [r7, #10]
 8003654:	4613      	mov	r3, r2
 8003656:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003658:	f7ff f986 	bl	8002968 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	f040 80e0 	bne.w	800382c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2319      	movs	r3, #25
 8003672:	2201      	movs	r2, #1
 8003674:	4970      	ldr	r1, [pc, #448]	@ (8003838 <HAL_I2C_Master_Transmit+0x1f4>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f964 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
 8003684:	e0d3      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_I2C_Master_Transmit+0x50>
 8003690:	2302      	movs	r3, #2
 8003692:	e0cc      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d007      	beq.n	80036ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2221      	movs	r2, #33	@ 0x21
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2210      	movs	r2, #16
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	893a      	ldrh	r2, [r7, #8]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a50      	ldr	r2, [pc, #320]	@ (800383c <HAL_I2C_Master_Transmit+0x1f8>)
 80036fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036fc:	8979      	ldrh	r1, [r7, #10]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f89c 	bl	8003840 <I2C_MasterRequestWrite>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e08d      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003728:	e066      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa22 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06b      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_I2C_Master_Transmit+0x188>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fa19 	bl	8003c08 <I2C_WaitOnBTFFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01a      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d194      	bne.n	800372a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	00100002 	.word	0x00100002
 800383c:	ffff0000 	.word	0xffff0000

08003840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	460b      	mov	r3, r1
 800384e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d006      	beq.n	800386a <I2C_MasterRequestWrite+0x2a>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d003      	beq.n	800386a <I2C_MasterRequestWrite+0x2a>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003868:	d108      	bne.n	800387c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00b      	b.n	8003894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	2b12      	cmp	r3, #18
 8003882:	d107      	bne.n	8003894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f84f 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ba:	d103      	bne.n	80038c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e035      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e0:	611a      	str	r2, [r3, #16]
 80038e2:	e01b      	b.n	800391c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038e4:	897b      	ldrh	r3, [r7, #10]
 80038e6:	11db      	asrs	r3, r3, #7
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f063 030f 	orn	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	490e      	ldr	r1, [pc, #56]	@ (800393c <I2C_MasterRequestWrite+0xfc>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f898 	bl	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e010      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4907      	ldr	r1, [pc, #28]	@ (8003940 <I2C_MasterRequestWrite+0x100>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f888 	bl	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	00010008 	.word	0x00010008
 8003940:	00010002 	.word	0x00010002

08003944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003954:	e048      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d044      	beq.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7ff f803 	bl	8002968 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d139      	bne.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <I2C_WaitOnFlagUntilTimeout+0x56>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	e00c      	b.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	43da      	mvns	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d116      	bne.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e023      	b.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10d      	bne.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0xca>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	e00c      	b.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d093      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a46:	e071      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d123      	bne.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e067      	b.n	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d041      	beq.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa8:	f7fe ff5e 	bl	8002968 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d136      	bne.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10c      	bne.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e00b      	b.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e021      	b.n	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10c      	bne.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e00b      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f af6d 	bne.w	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b84:	e034      	b.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f886 	bl	8003c98 <I2C_IsAcknowledgeFailed>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e034      	b.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d028      	beq.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe fee3 	bl	8002968 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbe:	2b80      	cmp	r3, #128	@ 0x80
 8003bc0:	d016      	beq.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b80      	cmp	r3, #128	@ 0x80
 8003bfc:	d1c3      	bne.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c14:	e034      	b.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f83e 	bl	8003c98 <I2C_IsAcknowledgeFailed>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e034      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d028      	beq.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fe9b 	bl	8002968 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11d      	bne.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d016      	beq.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d1c3      	bne.n	8003c16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cae:	d11b      	bne.n	8003ce8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e272      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8087 	beq.w	8003e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d14:	4b92      	ldr	r3, [pc, #584]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d20:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d112      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
 8003d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3a:	4b89      	ldr	r3, [pc, #548]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x12c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d168      	bne.n	8003e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e24c      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x76>
 8003d5c:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7f      	ldr	r2, [pc, #508]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b7b      	ldr	r3, [pc, #492]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7a      	ldr	r2, [pc, #488]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b78      	ldr	r3, [pc, #480]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a77      	ldr	r2, [pc, #476]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0xbc>
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a71      	ldr	r2, [pc, #452]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6f      	ldr	r3, [pc, #444]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a67      	ldr	r2, [pc, #412]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fdca 	bl	8002968 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe fdc6 	bl	8002968 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e200      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xe4>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fe fdb6 	bl	8002968 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fe fdb2 	bl	8002968 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1ec      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x10c>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e3a:	4b49      	ldr	r3, [pc, #292]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c0      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4939      	ldr	r1, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fd6b 	bl	8002968 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fe fd67 	bl	8002968 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4927      	ldr	r1, [pc, #156]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fd4a 	bl	8002968 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fe fd46 	bl	8002968 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e180      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03a      	beq.n	8003f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d019      	beq.n	8003f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fe fd2a 	bl	8002968 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fe fd26 	bl	8002968 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e160      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f000 face 	bl	80044d8 <RCC_Delay>
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fe fd10 	bl	8002968 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fe fd0c 	bl	8002968 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e146      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	42420000 	.word	0x42420000
 8003f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e9      	bne.n	8003f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a6 	beq.w	80040d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	61d3      	str	r3, [r2, #28]
 8003fa2:	4b85      	ldr	r3, [pc, #532]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b82      	ldr	r3, [pc, #520]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fe fccd 	bl	8002968 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fe fcc9 	bl	8002968 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	@ 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e103      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x312>
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6213      	str	r3, [r2, #32]
 8004004:	e02d      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x334>
 800400e:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a69      	ldr	r2, [pc, #420]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a66      	ldr	r2, [pc, #408]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x356>
 8004030:	4b61      	ldr	r3, [pc, #388]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a60      	ldr	r2, [pc, #384]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	4b5e      	ldr	r3, [pc, #376]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a5d      	ldr	r2, [pc, #372]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 800404a:	4b5b      	ldr	r3, [pc, #364]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a5a      	ldr	r2, [pc, #360]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b58      	ldr	r3, [pc, #352]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a57      	ldr	r2, [pc, #348]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fe fc7d 	bl	8002968 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fc79 	bl	8002968 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0b1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x37e>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fe fc67 	bl	8002968 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fe fc63 	bl	8002968 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e09b      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b40      	ldr	r3, [pc, #256]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b3c      	ldr	r3, [pc, #240]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d061      	beq.n	80041ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d146      	bne.n	800417e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe fc37 	bl	8002968 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe fc33 	bl	8002968 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e06d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004110:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004124:	d108      	bne.n	8004138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4921      	ldr	r1, [pc, #132]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a19      	ldr	r1, [r3, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	430b      	orrs	r3, r1
 800414a:	491b      	ldr	r1, [pc, #108]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fe fc07 	bl	8002968 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe fc03 	bl	8002968 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e03d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x46a>
 800417c:	e035      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fbf0 	bl	8002968 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fbec 	bl	8002968 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e026      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x498>
 80041aa:	e01e      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e019      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x500>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0d0      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0207 	bic.w	r2, r3, #7
 8004222:	4965      	ldr	r1, [pc, #404]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b8      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a58      	ldr	r2, [pc, #352]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800425e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800426c:	4b53      	ldr	r3, [pc, #332]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a52      	ldr	r2, [pc, #328]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	494d      	ldr	r1, [pc, #308]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d040      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e073      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4936      	ldr	r1, [pc, #216]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe fb3e 	bl	8002968 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe fb3a 	bl	8002968 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e053      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d210      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4922      	ldr	r1, [pc, #136]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e032      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4916      	ldr	r1, [pc, #88]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004386:	f000 f821 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1cc>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe fa9c 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40021000 	.word	0x40021000
 80043c0:	080051dc 	.word	0x080051dc
 80043c4:	2000004c 	.word	0x2000004c
 80043c8:	20000050 	.word	0x20000050

080043cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x30>
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x36>
 80043fa:	e027      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fe:	613b      	str	r3, [r7, #16]
      break;
 8004400:	e027      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x9c>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800441a:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0c5b      	lsrs	r3, r3, #17
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	4a11      	ldr	r2, [pc, #68]	@ (800446c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e004      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0c      	ldr	r2, [pc, #48]	@ (8004470 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	613b      	str	r3, [r7, #16]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	693b      	ldr	r3, [r7, #16]
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	007a1200 	.word	0x007a1200
 8004468:	080051f4 	.word	0x080051f4
 800446c:	08005204 	.word	0x08005204
 8004470:	003d0900 	.word	0x003d0900

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b02      	ldr	r3, [pc, #8]	@ (8004484 <HAL_RCC_GetHCLKFreq+0x10>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	2000004c 	.word	0x2000004c

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff2 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	@ (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	080051ec 	.word	0x080051ec

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffde 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	0adb      	lsrs	r3, r3, #11
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	@ (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	080051ec 	.word	0x080051ec

080044d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044e0:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <RCC_Delay+0x34>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004510 <RCC_Delay+0x38>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	0a5b      	lsrs	r3, r3, #9
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044f4:	bf00      	nop
  }
  while (Delay --);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1e5a      	subs	r2, r3, #1
 80044fa:	60fa      	str	r2, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f9      	bne.n	80044f4 <RCC_Delay+0x1c>
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	2000004c 	.word	0x2000004c
 8004510:	10624dd3 	.word	0x10624dd3

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e041      	b.n	80045aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe f892 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fa74 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d001      	beq.n	80045cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e03a      	b.n	8004642 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_TIM_Base_Start_IT+0x98>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x58>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d009      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x58>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a14      	ldr	r2, [pc, #80]	@ (8004650 <HAL_TIM_Base_Start_IT+0x9c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x58>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a13      	ldr	r2, [pc, #76]	@ (8004654 <HAL_TIM_Base_Start_IT+0xa0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d111      	bne.n	8004630 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b06      	cmp	r3, #6
 800461c:	d010      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	e007      	b.n	8004640 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800

08004658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0202 	mvn.w	r2, #2
 8004684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9b4 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9a7 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f9b6 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0204 	mvn.w	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f98a 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f97d 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f98c 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b08      	cmp	r3, #8
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0208 	mvn.w	r2, #8
 800472c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f960 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f953 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f962 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0210 	mvn.w	r2, #16
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2208      	movs	r2, #8
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f936 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f929 	bl	80049f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f938 	bl	8004a1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0201 	mvn.w	r2, #1
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fb ff62 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f4:	2b80      	cmp	r3, #128	@ 0x80
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa7b 	bl	8004cfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8fc 	bl	8004a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b20      	cmp	r3, #32
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0220 	mvn.w	r2, #32
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa46 	bl	8004cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIM_ConfigClockSource+0x1c>
 8004880:	2302      	movs	r3, #2
 8004882:	e0b4      	b.n	80049ee <HAL_TIM_ConfigClockSource+0x186>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048bc:	d03e      	beq.n	800493c <HAL_TIM_ConfigClockSource+0xd4>
 80048be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c2:	f200 8087 	bhi.w	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ca:	f000 8086 	beq.w	80049da <HAL_TIM_ConfigClockSource+0x172>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d87f      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b70      	cmp	r3, #112	@ 0x70
 80048d6:	d01a      	beq.n	800490e <HAL_TIM_ConfigClockSource+0xa6>
 80048d8:	2b70      	cmp	r3, #112	@ 0x70
 80048da:	d87b      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b60      	cmp	r3, #96	@ 0x60
 80048de:	d050      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x11a>
 80048e0:	2b60      	cmp	r3, #96	@ 0x60
 80048e2:	d877      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b50      	cmp	r3, #80	@ 0x50
 80048e6:	d03c      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0xfa>
 80048e8:	2b50      	cmp	r3, #80	@ 0x50
 80048ea:	d873      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d058      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x13a>
 80048f0:	2b40      	cmp	r3, #64	@ 0x40
 80048f2:	d86f      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b30      	cmp	r3, #48	@ 0x30
 80048f6:	d064      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d86b      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d060      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d867      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d05c      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	2b10      	cmp	r3, #16
 800490a:	d05a      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x15a>
 800490c:	e062      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800491e:	f000 f968 	bl	8004bf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	609a      	str	r2, [r3, #8]
      break;
 800493a:	e04f      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800494c:	f000 f951 	bl	8004bf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800495e:	609a      	str	r2, [r3, #8]
      break;
 8004960:	e03c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	461a      	mov	r2, r3
 8004970:	f000 f8c8 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2150      	movs	r1, #80	@ 0x50
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f91f 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 8004980:	e02c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498e:	461a      	mov	r2, r3
 8004990:	f000 f8e6 	bl	8004b60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2160      	movs	r1, #96	@ 0x60
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f90f 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 80049a0:	e01c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 f8a8 	bl	8004b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2140      	movs	r1, #64	@ 0x40
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f8ff 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 80049c0:	e00c      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f000 f8f6 	bl	8004bbe <TIM_ITRx_SetConfig>
      break;
 80049d2:	e003      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e000      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
	...

08004a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <TIM_Base_SetConfig+0xb8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x30>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x30>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <TIM_Base_SetConfig+0xbc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x30>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a25      	ldr	r2, [pc, #148]	@ (8004b00 <TIM_Base_SetConfig+0xc0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <TIM_Base_SetConfig+0xb8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x62>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a90:	d007      	beq.n	8004aa2 <TIM_Base_SetConfig+0x62>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <TIM_Base_SetConfig+0xbc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_Base_SetConfig+0x62>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <TIM_Base_SetConfig+0xc0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <TIM_Base_SetConfig+0xb8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800

08004b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 030a 	bic.w	r3, r3, #10
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	031b      	lsls	r3, r3, #12
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f043 0307 	orr.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e046      	b.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c94:	d009      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a10      	ldr	r2, [pc, #64]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800

08004cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e042      	b.n	8004da8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd fcd4 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	@ 0x24
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f82b 	bl	8004db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004dea:	f023 030c 	bic.w	r3, r3, #12
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec4 <UART_SetConfig+0x114>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e18:	f7ff fb4a 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	e002      	b.n	8004e26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7ff fb32 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8004e24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009a      	lsls	r2, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	4a22      	ldr	r2, [pc, #136]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	0119      	lsls	r1, r3, #4
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009a      	lsls	r2, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2064      	movs	r0, #100	@ 0x64
 8004e66:	fb00 f303 	mul.w	r3, r0, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	3332      	adds	r3, #50	@ 0x32
 8004e70:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e7c:	4419      	add	r1, r3
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009a      	lsls	r2, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004e96:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	2064      	movs	r0, #100	@ 0x64
 8004e9e:	fb00 f303 	mul.w	r3, r0, r3
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	3332      	adds	r3, #50	@ 0x32
 8004ea8:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <UART_SetConfig+0x118>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	440a      	add	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40013800 	.word	0x40013800
 8004ec8:	51eb851f 	.word	0x51eb851f

08004ecc <malloc>:
 8004ecc:	4b02      	ldr	r3, [pc, #8]	@ (8004ed8 <malloc+0xc>)
 8004ece:	4601      	mov	r1, r0
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f000 b82d 	b.w	8004f30 <_malloc_r>
 8004ed6:	bf00      	nop
 8004ed8:	20000058 	.word	0x20000058

08004edc <free>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	@ (8004ee8 <free+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f000 b8f5 	b.w	80050d0 <_free_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000058 	.word	0x20000058

08004eec <sbrk_aligned>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4e0f      	ldr	r6, [pc, #60]	@ (8004f2c <sbrk_aligned+0x40>)
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	6831      	ldr	r1, [r6, #0]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	b911      	cbnz	r1, 8004efe <sbrk_aligned+0x12>
 8004ef8:	f000 f8ae 	bl	8005058 <_sbrk_r>
 8004efc:	6030      	str	r0, [r6, #0]
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 f8a9 	bl	8005058 <_sbrk_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d103      	bne.n	8004f12 <sbrk_aligned+0x26>
 8004f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f0e:	4620      	mov	r0, r4
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
 8004f12:	1cc4      	adds	r4, r0, #3
 8004f14:	f024 0403 	bic.w	r4, r4, #3
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d0f8      	beq.n	8004f0e <sbrk_aligned+0x22>
 8004f1c:	1a21      	subs	r1, r4, r0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f89a 	bl	8005058 <_sbrk_r>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d1f2      	bne.n	8004f0e <sbrk_aligned+0x22>
 8004f28:	e7ef      	b.n	8004f0a <sbrk_aligned+0x1e>
 8004f2a:	bf00      	nop
 8004f2c:	200002e0 	.word	0x200002e0

08004f30 <_malloc_r>:
 8004f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f34:	1ccd      	adds	r5, r1, #3
 8004f36:	f025 0503 	bic.w	r5, r5, #3
 8004f3a:	3508      	adds	r5, #8
 8004f3c:	2d0c      	cmp	r5, #12
 8004f3e:	bf38      	it	cc
 8004f40:	250c      	movcc	r5, #12
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	4606      	mov	r6, r0
 8004f46:	db01      	blt.n	8004f4c <_malloc_r+0x1c>
 8004f48:	42a9      	cmp	r1, r5
 8004f4a:	d904      	bls.n	8004f56 <_malloc_r+0x26>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	6033      	str	r3, [r6, #0]
 8004f50:	2000      	movs	r0, #0
 8004f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800502c <_malloc_r+0xfc>
 8004f5a:	f000 f869 	bl	8005030 <__malloc_lock>
 8004f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f62:	461c      	mov	r4, r3
 8004f64:	bb44      	cbnz	r4, 8004fb8 <_malloc_r+0x88>
 8004f66:	4629      	mov	r1, r5
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7ff ffbf 	bl	8004eec <sbrk_aligned>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	4604      	mov	r4, r0
 8004f72:	d158      	bne.n	8005026 <_malloc_r+0xf6>
 8004f74:	f8d8 4000 	ldr.w	r4, [r8]
 8004f78:	4627      	mov	r7, r4
 8004f7a:	2f00      	cmp	r7, #0
 8004f7c:	d143      	bne.n	8005006 <_malloc_r+0xd6>
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d04b      	beq.n	800501a <_malloc_r+0xea>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	4639      	mov	r1, r7
 8004f86:	4630      	mov	r0, r6
 8004f88:	eb04 0903 	add.w	r9, r4, r3
 8004f8c:	f000 f864 	bl	8005058 <_sbrk_r>
 8004f90:	4581      	cmp	r9, r0
 8004f92:	d142      	bne.n	800501a <_malloc_r+0xea>
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	1a6d      	subs	r5, r5, r1
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	f7ff ffa6 	bl	8004eec <sbrk_aligned>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d03a      	beq.n	800501a <_malloc_r+0xea>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	442b      	add	r3, r5
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	f8d8 3000 	ldr.w	r3, [r8]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	bb62      	cbnz	r2, 800500c <_malloc_r+0xdc>
 8004fb2:	f8c8 7000 	str.w	r7, [r8]
 8004fb6:	e00f      	b.n	8004fd8 <_malloc_r+0xa8>
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	1b52      	subs	r2, r2, r5
 8004fbc:	d420      	bmi.n	8005000 <_malloc_r+0xd0>
 8004fbe:	2a0b      	cmp	r2, #11
 8004fc0:	d917      	bls.n	8004ff2 <_malloc_r+0xc2>
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	6059      	strne	r1, [r3, #4]
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	bf08      	it	eq
 8004fd0:	f8c8 1000 	streq.w	r1, [r8]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 f82f 	bl	800503c <__malloc_unlock>
 8004fde:	f104 000b 	add.w	r0, r4, #11
 8004fe2:	1d23      	adds	r3, r4, #4
 8004fe4:	f020 0007 	bic.w	r0, r0, #7
 8004fe8:	1ac2      	subs	r2, r0, r3
 8004fea:	bf1c      	itt	ne
 8004fec:	1a1b      	subne	r3, r3, r0
 8004fee:	50a3      	strne	r3, [r4, r2]
 8004ff0:	e7af      	b.n	8004f52 <_malloc_r+0x22>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	bf0c      	ite	eq
 8004ff8:	f8c8 2000 	streq.w	r2, [r8]
 8004ffc:	605a      	strne	r2, [r3, #4]
 8004ffe:	e7eb      	b.n	8004fd8 <_malloc_r+0xa8>
 8005000:	4623      	mov	r3, r4
 8005002:	6864      	ldr	r4, [r4, #4]
 8005004:	e7ae      	b.n	8004f64 <_malloc_r+0x34>
 8005006:	463c      	mov	r4, r7
 8005008:	687f      	ldr	r7, [r7, #4]
 800500a:	e7b6      	b.n	8004f7a <_malloc_r+0x4a>
 800500c:	461a      	mov	r2, r3
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	42a3      	cmp	r3, r4
 8005012:	d1fb      	bne.n	800500c <_malloc_r+0xdc>
 8005014:	2300      	movs	r3, #0
 8005016:	6053      	str	r3, [r2, #4]
 8005018:	e7de      	b.n	8004fd8 <_malloc_r+0xa8>
 800501a:	230c      	movs	r3, #12
 800501c:	4630      	mov	r0, r6
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f000 f80c 	bl	800503c <__malloc_unlock>
 8005024:	e794      	b.n	8004f50 <_malloc_r+0x20>
 8005026:	6005      	str	r5, [r0, #0]
 8005028:	e7d6      	b.n	8004fd8 <_malloc_r+0xa8>
 800502a:	bf00      	nop
 800502c:	200002e4 	.word	0x200002e4

08005030 <__malloc_lock>:
 8005030:	4801      	ldr	r0, [pc, #4]	@ (8005038 <__malloc_lock+0x8>)
 8005032:	f000 b84b 	b.w	80050cc <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	20000424 	.word	0x20000424

0800503c <__malloc_unlock>:
 800503c:	4801      	ldr	r0, [pc, #4]	@ (8005044 <__malloc_unlock+0x8>)
 800503e:	f000 b846 	b.w	80050ce <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	20000424 	.word	0x20000424

08005048 <memset>:
 8005048:	4603      	mov	r3, r0
 800504a:	4402      	add	r2, r0
 800504c:	4293      	cmp	r3, r2
 800504e:	d100      	bne.n	8005052 <memset+0xa>
 8005050:	4770      	bx	lr
 8005052:	f803 1b01 	strb.w	r1, [r3], #1
 8005056:	e7f9      	b.n	800504c <memset+0x4>

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	2300      	movs	r3, #0
 800505c:	4d05      	ldr	r5, [pc, #20]	@ (8005074 <_sbrk_r+0x1c>)
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fd fbc6 	bl	80027f4 <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000420 	.word	0x20000420

08005078 <__errno>:
 8005078:	4b01      	ldr	r3, [pc, #4]	@ (8005080 <__errno+0x8>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000058 	.word	0x20000058

08005084 <__libc_init_array>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	2600      	movs	r6, #0
 8005088:	4d0c      	ldr	r5, [pc, #48]	@ (80050bc <__libc_init_array+0x38>)
 800508a:	4c0d      	ldr	r4, [pc, #52]	@ (80050c0 <__libc_init_array+0x3c>)
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	42a6      	cmp	r6, r4
 8005092:	d109      	bne.n	80050a8 <__libc_init_array+0x24>
 8005094:	f000 f864 	bl	8005160 <_init>
 8005098:	2600      	movs	r6, #0
 800509a:	4d0a      	ldr	r5, [pc, #40]	@ (80050c4 <__libc_init_array+0x40>)
 800509c:	4c0a      	ldr	r4, [pc, #40]	@ (80050c8 <__libc_init_array+0x44>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	42a6      	cmp	r6, r4
 80050a4:	d105      	bne.n	80050b2 <__libc_init_array+0x2e>
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ac:	4798      	blx	r3
 80050ae:	3601      	adds	r6, #1
 80050b0:	e7ee      	b.n	8005090 <__libc_init_array+0xc>
 80050b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b6:	4798      	blx	r3
 80050b8:	3601      	adds	r6, #1
 80050ba:	e7f2      	b.n	80050a2 <__libc_init_array+0x1e>
 80050bc:	08005208 	.word	0x08005208
 80050c0:	08005208 	.word	0x08005208
 80050c4:	08005208 	.word	0x08005208
 80050c8:	0800520c 	.word	0x0800520c

080050cc <__retarget_lock_acquire_recursive>:
 80050cc:	4770      	bx	lr

080050ce <__retarget_lock_release_recursive>:
 80050ce:	4770      	bx	lr

080050d0 <_free_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4605      	mov	r5, r0
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d040      	beq.n	800515a <_free_r+0x8a>
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f0c      	subs	r4, r1, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfb8      	it	lt
 80050e2:	18e4      	addlt	r4, r4, r3
 80050e4:	f7ff ffa4 	bl	8005030 <__malloc_lock>
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <_free_r+0x8c>)
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	b933      	cbnz	r3, 80050fc <_free_r+0x2c>
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	6014      	str	r4, [r2, #0]
 80050f2:	4628      	mov	r0, r5
 80050f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f8:	f7ff bfa0 	b.w	800503c <__malloc_unlock>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d908      	bls.n	8005112 <_free_r+0x42>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	1821      	adds	r1, r4, r0
 8005104:	428b      	cmp	r3, r1
 8005106:	bf01      	itttt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	1809      	addeq	r1, r1, r0
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	e7ed      	b.n	80050ee <_free_r+0x1e>
 8005112:	461a      	mov	r2, r3
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b10b      	cbz	r3, 800511c <_free_r+0x4c>
 8005118:	42a3      	cmp	r3, r4
 800511a:	d9fa      	bls.n	8005112 <_free_r+0x42>
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	1850      	adds	r0, r2, r1
 8005120:	42a0      	cmp	r0, r4
 8005122:	d10b      	bne.n	800513c <_free_r+0x6c>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	4401      	add	r1, r0
 8005128:	1850      	adds	r0, r2, r1
 800512a:	4283      	cmp	r3, r0
 800512c:	6011      	str	r1, [r2, #0]
 800512e:	d1e0      	bne.n	80050f2 <_free_r+0x22>
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4408      	add	r0, r1
 8005136:	6010      	str	r0, [r2, #0]
 8005138:	6053      	str	r3, [r2, #4]
 800513a:	e7da      	b.n	80050f2 <_free_r+0x22>
 800513c:	d902      	bls.n	8005144 <_free_r+0x74>
 800513e:	230c      	movs	r3, #12
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	e7d6      	b.n	80050f2 <_free_r+0x22>
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	1821      	adds	r1, r4, r0
 8005148:	428b      	cmp	r3, r1
 800514a:	bf01      	itttt	eq
 800514c:	6819      	ldreq	r1, [r3, #0]
 800514e:	685b      	ldreq	r3, [r3, #4]
 8005150:	1809      	addeq	r1, r1, r0
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	6054      	str	r4, [r2, #4]
 8005158:	e7cb      	b.n	80050f2 <_free_r+0x22>
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	200002e4 	.word	0x200002e4

08005160 <_init>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr

0800516c <_fini>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr
